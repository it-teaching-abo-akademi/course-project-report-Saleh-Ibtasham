/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 29.05.2023 18:51:52

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 52
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 35616;
#else
constexpr int kTensorArenaSize = 34592;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_MEAN, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[36];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,3960 } };
const TfArray<1, float> quant0_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 99, 40, 1, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data2[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension2 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data3[2] = { 1, 2, };
const TfArray<1, int> tensor_dimension3 = { 1, { 2 } };
const ALIGN(16) int8_t tensor_data4[3*3*3*1] = { 
  /* [0][0][][] */ -79, -88, -22, 
  /* [0][1][][] */ -127, -121, -12, 
  /* [0][2][][] */ -21, -24, 3, 
  /* [1][0][][] */ 54, 72, 41, 
  /* [1][1][][] */ 79, 127, 83, 
  /* [1][2][][] */ 44, 82, 56, 
  /* [2][0][][] */ -41, -90, -34, 
  /* [2][1][][] */ 15, -90, -127, 
  /* [2][2][][] */ 60, 3, -84, 
};
const TfArray<4, int> tensor_dimension4 = { 4, { 3,3,3,1 } };
const TfArray<3, float> quant4_scale = { 3, { 0.0078611196950078011, 0.0013075827155262232, 0.0035194973461329937, } };
const TfArray<3, int> quant4_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int32_t tensor_data5[3] = { 2841, 195741, 90321, };
const TfArray<1, int> tensor_dimension5 = { 1, { 3 } };
const TfArray<3, float> quant5_scale = { 3, { 3.0707498808624223e-05, 5.1077449825243093e-06, 1.3748036508332007e-05, } };
const TfArray<3, int> quant5_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[1*3*3*3] = { 
  /* [0][0][][] */ 24,-72,127, 10,2,-31, 3,-1,-10, 
  /* [0][1][][] */ 127,-34,100, 33,-31,30, 0,-2,-5, 
  /* [0][2][][] */ 102,127,-30, 32,36,120, 4,-5,-14, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 1,3,3,3 } };
const TfArray<3, float> quant6_scale = { 3, { 0.057025805115699768, 0.034973736852407455, 0.0050132614560425282, } };
const TfArray<3, int> quant6_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 3 };
const ALIGN(8) int32_t tensor_data7[3] = { -3232, 2378, 18123, };
const TfArray<1, int> tensor_dimension7 = { 1, { 3 } };
const TfArray<3, float> quant7_scale = { 3, { 0.00039354988257400692, 0.00024136283900588751, 3.4597818739712238e-05, } };
const TfArray<3, int> quant7_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[6*1*1*3] = { 
  /* [0][0][][] */ 24,-127,-25, 
  /* [1][0][][] */ 97,7,127, 
  /* [2][0][][] */ 81,127,28, 
  /* [3][0][][] */ -10,127,19, 
  /* [4][0][][] */ 15,127,35, 
  /* [5][0][][] */ -17,127,-46, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 6,1,1,3 } };
const TfArray<6, float> quant8_scale = { 6, { 0.013872667215764523, 0.0051911775954067707, 0.020469045266509056, 0.018059009686112404, 0.017073586583137512, 0.0088699711486697197, } };
const TfArray<6, int> quant8_zero = { 6, { 0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[6] = { 8503, -3393, -10475, -8060, -10900, -1375, };
const TfArray<1, int> tensor_dimension9 = { 1, { 6 } };
const TfArray<6, float> quant9_scale = { 6, { 0.00032641569850966334, 0.00012214535672683269, 0.00048162459279410541, 0.00042491787462495267, 0.00040173146408051252, 0.00020870521257165819, } };
const TfArray<6, int> quant9_zero = { 6, { 0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[1*3*3*6] = { 
  /* [0][0][][] */ -127,-72,-7,46,53,-2, -22,-127,88,-44,-56,77, -25,-50,47,32,-38,18, 
  /* [0][1][][] */ -105,13,40,127,55,122, -33,-2,19,-19,127,110, -12,-1,45,3,25,12, 
  /* [0][2][][] */ -30,66,-37,119,93,127, -14,112,-127,3,112,44, -12,49,-84,-4,88,1, 
};
const TfArray<4, int> tensor_dimension10 = { 4, { 1,3,3,6 } };
const TfArray<6, float> quant10_scale = { 6, { 0.0042021763511002064, 0.014909412711858749, 0.0036637107841670513, 0.004634389653801918, 0.0043759020045399666, 0.0039788172580301762, } };
const TfArray<6, int> quant10_zero = { 6, { 0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 3 };
const ALIGN(16) int32_t tensor_data11[6] = { 14884, 5630, 521, 3617, 25, 1400, };
const TfArray<1, int> tensor_dimension11 = { 1, { 6 } };
const TfArray<6, float> quant11_scale = { 6, { 9.8874741524923593e-05, 0.00035080971429124475, 8.6204963736236095e-05, 0.00010904446389758959, 0.0001029624036164023, 9.3619230028707534e-05, } };
const TfArray<6, int> quant11_zero = { 6, { 0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(16) int8_t tensor_data12[12*1*1*6] = { 
  /* [0][0][][] */ -87,127,-22,-30,-81,-10, 
  /* [1][0][][] */ 127,-96,14,38,25,32, 
  /* [2][0][][] */ -127,77,-67,-41,-54,-28, 
  /* [3][0][][] */ -68,-114,-2,-127,43,48, 
  /* [4][0][][] */ -81,127,-50,-65,-57,19, 
  /* [5][0][][] */ 120,-31,-19,127,-29,-49, 
  /* [6][0][][] */ 2,46,4,6,-13,-127, 
  /* [7][0][][] */ -1,81,5,-19,127,-7, 
  /* [8][0][][] */ 127,12,-66,-19,-87,8, 
  /* [9][0][][] */ 8,1,-22,-5,-7,127, 
  /* [10][0][][] */ -29,0,31,-1,12,-127, 
  /* [11][0][][] */ 71,-28,-127,-19,-66,52, 
};
const TfArray<4, int> tensor_dimension12 = { 4, { 12,1,1,6 } };
const TfArray<12, float> quant12_scale = { 12, { 0.0064157326705753803, 0.0038285080809146166, 0.0017223128816112876, 0.010582764632999897, 0.0031784647144377232, 0.0061725717969238758, 0.002088027773424983, 0.010558359324932098, 0.0060554002411663532, 0.01076166145503521, 0.011177435517311096, 0.005785718560218811, } };
const TfArray<12, int> quant12_zero = { 12, { 0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int32_t tensor_data13[12] = { 2218, 6287, 28395, 13286, 9464, -2413, 23313, -5161, -88, -6998, 8279, 3392, };
const TfArray<1, int> tensor_dimension13 = { 1, { 12 } };
const TfArray<12, float> quant13_scale = { 12, { 0.00015095842536538839, 9.0082547103520483e-05, 4.052501026308164e-05, 0.0002490062324795872, 7.4787407356780022e-05, 0.00014523699064739048, 4.9130067054647952e-05, 0.00024843198480084538, 0.00014248001389205456, 0.00025321557768620551, 0.00026299848104827106, 0.00013613456394523382, } };
const TfArray<12, int> quant13_zero = { 12, { 0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int8_t tensor_data14[1*3*3*12] = { 
  /* [0][0][][] */ -8,-15,-53,-7,0,-4,84,38,-31,2,11,-33, -127,11,-51,-28,127,-32,-116,3,-17,127,-127,-40, 49,28,28,28,-6,60,-10,18,-14,-38,62,-23, 
  /* [0][1][][] */ 91,-11,52,-64,51,66,-124,-106,-110,-28,30,28, 53,101,127,-127,41,-66,-7,-127,89,76,-50,127, -20,14,67,-9,13,127,113,-75,-8,-9,-17,29, 
  /* [0][2][][] */ 23,-8,-5,5,12,-8,-44,-52,102,8,-15,-18, 84,127,-83,-59,47,-22,127,-68,-127,-65,44,61, -20,-64,-92,-35,-20,-10,-30,-9,-22,32,-21,-22, 
};
const TfArray<4, int> tensor_dimension14 = { 4, { 1,3,3,12 } };
const TfArray<12, float> quant14_scale = { 12, { 0.0099703650921583176, 0.015392910689115524, 0.017074573785066605, 0.0066273827105760574, 0.016689717769622803, 0.013942566700279713, 0.02349516935646534, 0.0053068106062710285, 0.015416544862091541, 0.0082986541092395782, 0.0091073820367455482, 0.023719169199466705, } };
const TfArray<12, int> quant14_zero = { 12, { 0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 3 };
const ALIGN(16) int32_t tensor_data15[12] = { -1584, -7270, 522, 7842, -8915, -1376, 357, 3038, 3702, 3333, 9432, -2798, };
const TfArray<1, int> tensor_dimension15 = { 1, { 12 } };
const TfArray<12, float> quant15_scale = { 12, { 0.00023459682415705174, 0.00036218613968230784, 0.000401754688937217, 0.00015593842545058578, 0.0003926992358174175, 0.00032806038507260382, 0.00055282755056396127, 0.00012486612831708044, 0.00036274222657084465, 0.00019526245887391269, 0.00021429134358186275, 0.00055809813784435391, } };
const TfArray<12, int> quant15_zero = { 12, { 0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int8_t tensor_data16[12*1*1*12] = { 
  /* [0][0][][] */ 30,82,-26,61,-62,69,47,28,-8,127,85,17, 
  /* [1][0][][] */ -10,101,-18,74,-32,16,46,26,-90,127,109,40, 
  /* [2][0][][] */ 55,1,12,-95,3,127,-46,-66,-39,39,28,-29, 
  /* [3][0][][] */ -44,-2,127,-21,-13,-25,-31,-1,63,20,29,-41, 
  /* [4][0][][] */ 102,-76,-37,-91,-27,65,-92,-73,-22,127,66,-72, 
  /* [5][0][][] */ 44,85,11,-19,-45,-40,71,-71,8,127,91,-48, 
  /* [6][0][][] */ 63,63,65,75,-56,2,72,-23,-52,127,44,-41, 
  /* [7][0][][] */ -20,-127,18,1,53,45,72,45,93,-127,-117,-23, 
  /* [8][0][][] */ -93,56,16,127,76,-30,37,-22,82,-121,-66,102, 
  /* [9][0][][] */ -64,75,35,-48,-127,-18,-20,-29,32,-27,8,-25, 
  /* [10][0][][] */ 80,34,-14,-80,-127,8,44,39,-76,21,-53,-108, 
  /* [11][0][][] */ 32,-74,60,125,27,-69,127,-78,5,114,61,-108, 
};
const TfArray<4, int> tensor_dimension16 = { 4, { 12,1,1,12 } };
const TfArray<12, float> quant16_scale = { 12, { 0.001567491446621716, 0.0025149206630885601, 0.0090745333582162857, 0.0061292559839785099, 0.0060887085273861885, 0.001908088568598032, 0.0055669527500867844, 0.0013721473515033722, 0.0051291496492922306, 0.0029391746502369642, 0.010417882353067398, 0.010438952594995499, } };
const TfArray<12, int> quant16_zero = { 12, { 0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int32_t tensor_data17[12] = { 13880, -3479, -2462, 3301, -5990, 15035, -7508, 35337, 5036, 15782, 10559, -10983, };
const TfArray<1, int> tensor_dimension17 = { 1, { 12 } };
const TfArray<12, float> quant17_scale = { 12, { 3.6882152926409617e-05, 5.9174606576561928e-05, 0.00021351843315642327, 0.0001442177890567109, 0.00014326373639050871, 4.4896201870869845e-05, 0.00013098712952341884, 3.2285821362165734e-05, 0.00012068587966496125, 6.9157053076196462e-05, 0.00024512666277587414, 0.00024562241742387414, } };
const TfArray<12, int> quant17_zero = { 12, { 0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const ALIGN(16) int8_t tensor_data18[1*3*3*12] = { 
  /* [0][0][][] */ 56,-67,64,-82,71,-72,125,15,-41,-95,16,64, 109,-44,-51,-51,65,76,127,48,-21,-77,-55,53, -67,64,32,-16,0,20,57,-97,-11,-3,-21,6, 
  /* [0][1][][] */ 96,-54,127,-127,127,-105,35,57,-127,-10,-68,127, 127,74,-75,-107,118,127,43,68,-57,34,-127,90, -126,100,39,-29,31,21,-27,-127,-43,30,-31,10, 
  /* [0][2][][] */ 76,13,86,-53,78,-62,-81,41,-108,108,-81,99, 100,127,-52,-59,75,67,-84,18,-24,127,-89,59, -28,67,17,-14,28,14,-43,-56,-28,29,-26,-3, 
};
const TfArray<4, int> tensor_dimension18 = { 4, { 1,3,3,12 } };
const TfArray<12, float> quant18_scale = { 12, { 0.0073164398781955242, 0.0059702736325562, 0.0025501805357635021, 0.0042205993086099625, 0.003391362726688385, 0.012311809696257114, 0.003412529593333602, 0.010046098381280899, 0.0035399908665567636, 0.0078815566375851631, 0.0016582300886511803, 0.0027221257332712412, } };
const TfArray<12, int> quant18_zero = { 12, { 0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 3 };
const ALIGN(16) int32_t tensor_data19[12] = { -11365, 3388, 23158, 32850, 532, 5519, -600, 303, 18719, 1956, 72264, 734, };
const TfArray<1, int> tensor_dimension19 = { 1, { 12 } };
const TfArray<12, float> quant19_scale = { 12, { 0.00017215152911376208, 0.00014047703007236123, 6.0004247643519193e-05, 9.9308221251703799e-05, 7.9796773206908256e-05, 0.000289689633063972, 8.0294812505599111e-05, 0.00023637879348825663, 8.3293904026504606e-05, 0.0001854483998613432, 3.9017180824885145e-05, 6.4050022047013044e-05, } };
const TfArray<12, int> quant19_zero = { 12, { 0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int8_t tensor_data20[25*1*1*12] = { 
  /* [0][0][][] */ 43,127,12,-122,19,24,47,-81,64,-20,62,51, 
  /* [1][0][][] */ -115,63,-127,38,-17,120,-24,63,-46,5,0,16, 
  /* [2][0][][] */ 54,-127,43,31,70,106,76,-101,-113,-74,-84,42, 
  /* [3][0][][] */ 83,-39,-38,60,-73,90,34,-111,68,-1,97,127, 
  /* [4][0][][] */ 15,69,-44,56,-8,-58,36,20,23,-28,-80,127, 
  /* [5][0][][] */ -25,-39,19,-33,32,-19,80,0,-63,-127,-29,36, 
  /* [6][0][][] */ -36,-5,21,-110,-15,-5,127,11,15,-58,-23,121, 
  /* [7][0][][] */ -30,15,-24,-127,-27,-33,69,-2,19,-30,-52,34, 
  /* [8][0][][] */ 13,18,63,-96,-74,127,-56,-60,84,18,-74,80, 
  /* [9][0][][] */ 63,53,-94,-71,32,68,0,52,127,-50,-5,2, 
  /* [10][0][][] */ -26,125,-28,127,-9,65,21,25,-18,44,10,-35, 
  /* [11][0][][] */ -5,-20,10,50,5,74,-19,-127,82,-36,68,11, 
  /* [12][0][][] */ 21,30,-23,-40,-22,-16,18,7,-39,127,-43,-45, 
  /* [13][0][][] */ 31,127,19,25,-60,-8,-51,-37,27,49,23,-88, 
  /* [14][0][][] */ -63,70,-18,67,-26,88,114,-45,1,-120,-127,-3, 
  /* [15][0][][] */ 127,-41,30,98,-6,-16,20,96,-23,12,42,70, 
  /* [16][0][][] */ 13,26,3,-42,127,4,-5,-36,4,-3,-14,-16, 
  /* [17][0][][] */ -78,-39,12,-33,115,45,-33,-4,-37,-9,70,127, 
  /* [18][0][][] */ 72,66,5,-90,-25,-17,-33,12,10,21,-127,-50, 
  /* [19][0][][] */ 127,33,31,14,32,-49,-9,6,4,10,-29,-116, 
  /* [20][0][][] */ 55,20,-18,9,-71,-15,12,20,-1,127,-1,-21, 
  /* [21][0][][] */ -127,58,51,-11,59,51,5,-33,-14,27,-21,-65, 
  /* [22][0][][] */ 72,-77,-127,-84,119,21,-10,56,39,-67,-57,-29, 
  /* [23][0][][] */ -40,-33,-44,46,49,43,127,4,91,-69,104,35, 
  /* [24][0][][] */ 16,8,44,-43,33,-127,8,31,47,-2,-5,2, 
};
const TfArray<4, int> tensor_dimension20 = { 4, { 25,1,1,12 } };
const TfArray<25, float> quant20_scale = { 25, { 0.0029232003726065159, 0.0046745976433157921, 0.0010281676659360528, 0.0031990890856832266, 0.0045230765827000141, 0.0072679785080254078, 0.0034348713234066963, 0.0072182328440248966, 0.0049177221953868866, 0.0030067292973399162, 0.003113824874162674, 0.0024457329418510199, 0.0032475476618856192, 0.0032365992665290833, 0.0085612675175070763, 0.0037636272609233856, 0.0057358029298484325, 0.0039970618672668934, 0.008874228224158287, 0.0070448014885187149, 0.0071980468928813934, 0.002408704487606883, 0.002857476007193327, 0.00209232815541327, 0.0074027166701853275, } };
const TfArray<25, int> quant20_zero = { 25, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int32_t tensor_data21[25] = { 581, -1556, 55785, -13656, 9721, 17814, 17995, 25855, 122, 6661, -18567, 1820, 16035, -7220, 1232, -17315, 9513, 1592, 17871, 762, -3495, 9613, 31116, 2538, 14951, };
const TfArray<1, int> tensor_dimension21 = { 1, { 25 } };
const TfArray<25, float> quant21_scale = { 25, { 6.878118438180536e-05, 0.00010999053483828902, 2.4192180717363954e-05, 7.52726846258156e-05, 0.00010642533015925437, 0.00017101125558838248, 8.0820500443223864e-05, 0.00016984077228698879, 0.00011571111099328846, 7.0746573328506202e-05, 7.3266470280941576e-05, 5.7546658354112878e-05, 7.6412885391619056e-05, 7.6155280112288892e-05, 0.00020144159498158842, 8.8555934780742973e-05, 0.0001349600643152371, 9.404851880390197e-05, 0.00020880537340417504, 0.00016576003690715879, 0.00016936581232585013, 5.6675402447581291e-05, 6.7234730522613972e-05, 4.9231250159209594e-05, 0.00017418156494386494, } };
const TfArray<25, int> quant21_zero = { 25, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int8_t tensor_data22[1*3*3*25] = { 
  /* [0][0][][] */ 127,-45,-127,-127,-24,-82,-29,15,39,127,127,-84,-49,-69,-16,-65,8,98,-60,24,127,21,-57,-10,-11, 115,127,-100,45,127,-127,82,-23,42,-91,-58,127,-127,-56,-11,-73,127,127,-34,115,50,46,60,4,-127, -70,-28,-20,9,-1,-27,-127,8,9,-12,0,-75,-7,35,28,-4,-31,32,16,7,11,32,-18,6,-49, 
  /* [0][1][][] */ 42,15,-26,15,28,-73,60,127,2,-79,74,5,-58,105,127,-4,-13,-54,127,-14,98,-127,127,127,22, -11,-13,-111,7,-27,-90,-119,64,127,55,-63,-25,-63,-13,6,127,33,-109,49,85,-5,89,12,-103,-79, 1,8,11,28,-8,-12,99,17,-19,10,-8,17,6,-67,0,-5,32,-30,2,32,12,-31,0,-17,-41, 
  /* [0][2][][] */ -31,14,1,87,-16,-27,-52,-23,-42,-31,-42,10,2,86,17,-4,17,-24,21,-27,-23,-18,126,-1,12, -17,1,1,-52,-1,-72,-65,-2,-69,24,20,-9,-59,127,3,62,-36,-47,-3,-127,-4,2,-5,16,72, -2,8,-49,2,8,0,92,-9,1,1,1,-2,-14,28,-5,35,-19,5,13,-31,-26,-6,20,2,22, 
};
const TfArray<4, int> tensor_dimension22 = { 4, { 1,3,3,25 } };
const TfArray<25, float> quant22_scale = { 25, { 0.0082817832008004189, 0.01096612960100174, 0.015618138015270233, 0.012123088352382183, 0.01115928590297699, 0.0066201752051711082, 0.0072581600397825241, 0.0080944998189806938, 0.007130039855837822, 0.017018899321556091, 0.011424779891967773, 0.029999913647770882, 0.012994280084967613, 0.00670646782964468, 0.0064026224426925182, 0.0098834019154310226, 0.010530148632824421, 0.0070567000657320023, 0.0074589578434824944, 0.0069933063350617886, 0.0073323058895766735, 0.013685902580618858, 0.011486552655696869, 0.020537296310067177, 0.0053143147379159927, } };
const TfArray<25, int> quant22_zero = { 25, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 3 };
const ALIGN(16) int32_t tensor_data23[25] = { 1450, -3852, 19559, 1237, -1880, 8119, 998, -260, -1423, 146, -46, -925, 13380, -4000, -9123, -260, -558, 876, -299, -161, -501, -61, -3494, -926, 23039, };
const TfArray<1, int> tensor_dimension23 = { 1, { 25 } };
const TfArray<25, float> quant23_scale = { 25, { 0.00019486549717839807, 0.00025802658637985587, 0.00036748559796251357, 0.00028524914523586631, 0.00026257144054397941, 0.0001557688374305144, 0.00017078024393413216, 0.00019045882800128311, 0.00016776564007159323, 0.00040044469642452896, 0.00026881834492087364, 0.00070588034577667713, 0.00030574775882996619, 0.00015779925161041319, 0.00015064993931446224, 0.00023255063570104539, 0.00024776821373961866, 0.00016604000120423734, 0.00017550488701090217, 0.00016454838623758405, 0.0001725248439470306, 0.00032202125294134021, 0.00027027181931771338, 0.00048323051305487752, 0.00012504270125646144, } };
const TfArray<25, int> quant23_zero = { 25, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const ALIGN(16) int8_t tensor_data24[25*1*1*25] = { 
  /* [0][0][][] */ 17,-8,-10,-44,-39,-14,-9,-56,13,86,-96,17,-23,4,-47,-6,-80,-3,-47,24,-32,-15,125,127,96, 
  /* [1][0][][] */ -127,-7,69,-2,60,-11,29,-22,29,10,35,15,-74,38,-42,-22,-32,-15,27,-28,-71,-6,-14,53,-2, 
  /* [2][0][][] */ -57,5,-36,31,40,18,53,-36,-58,57,5,127,-2,20,16,19,20,-28,-1,22,-4,-2,-3,67,9, 
  /* [3][0][][] */ -127,-7,34,6,-13,-3,40,14,30,-57,-60,4,54,-3,64,41,-63,19,-15,-30,-48,51,34,4,-29, 
  /* [4][0][][] */ 38,16,-84,115,-64,-79,-24,-100,-14,44,127,104,78,-23,-15,-16,-30,-70,-72,45,-37,52,42,34,-36, 
  /* [5][0][][] */ 127,21,-84,67,87,-1,13,-44,-54,-15,30,59,21,-64,24,31,-79,-13,62,-62,53,-66,63,81,-44, 
  /* [6][0][][] */ 6,-42,-109,17,-114,-54,-2,109,-88,-27,-95,97,92,22,21,-124,117,127,-36,41,90,11,82,17,19, 
  /* [7][0][][] */ -17,-39,2,74,15,-58,-15,-58,34,63,-27,-17,-65,-69,127,25,8,-70,124,78,86,79,-76,45,38, 
  /* [8][0][][] */ -76,-33,-56,-25,0,-17,31,0,93,-46,30,23,-11,-26,-60,66,-19,-45,15,-37,-127,108,-35,-112,-22, 
  /* [9][0][][] */ 118,-3,-107,7,38,-46,79,24,-54,25,28,71,46,103,-43,98,127,80,-53,-58,-5,14,36,7,59, 
  /* [10][0][][] */ -35,10,-53,-5,11,-72,-55,65,6,22,-119,-27,-30,-22,127,2,16,-26,91,-33,37,18,-43,-16,-17, 
  /* [11][0][][] */ 18,84,-49,67,71,-107,31,124,-16,29,-39,-4,100,-39,34,8,1,127,-95,-31,72,-83,63,60,-54, 
  /* [12][0][][] */ -18,-14,-40,7,-31,-37,-5,-32,-29,35,-7,35,6,11,1,0,127,-18,-47,14,-21,40,-5,7,-41, 
  /* [13][0][][] */ 19,-48,-55,43,-15,-42,-14,67,-67,22,2,105,2,-75,44,-50,14,7,47,-5,57,14,44,-21,-127, 
  /* [14][0][][] */ -6,106,-74,63,-56,-107,18,37,90,-90,-78,74,86,-6,33,51,-4,-5,-46,27,-25,-66,-6,-64,127, 
  /* [15][0][][] */ -25,77,-32,14,23,-52,102,-4,-41,33,43,78,32,45,-6,76,127,42,-30,-49,-11,67,47,19,59, 
  /* [16][0][][] */ -1,-111,-126,11,12,-68,17,41,12,43,-67,-52,61,9,-7,29,-1,12,-27,62,9,-93,-53,16,-127, 
  /* [17][0][][] */ 104,-56,-127,96,11,-102,40,14,-7,1,12,117,84,21,-17,20,126,69,-26,22,11,41,-4,-20,-47, 
  /* [18][0][][] */ -47,11,-14,73,12,15,79,-40,2,44,-53,-39,-118,-42,64,-63,36,-96,125,38,127,112,-67,1,-7, 
  /* [19][0][][] */ 51,11,20,23,-45,-24,-38,-119,18,12,16,15,-28,-127,66,-4,-27,-84,62,67,-21,-14,-7,20,37, 
  /* [20][0][][] */ -14,-57,127,-64,54,118,-32,-42,15,6,-37,-77,-2,17,8,13,-74,-21,-51,25,-59,11,42,26,20, 
  /* [21][0][][] */ -29,-9,-30,-29,-60,3,-1,24,-10,-41,13,116,52,31,22,-70,127,23,-15,51,9,-48,-110,-76,9, 
  /* [22][0][][] */ -84,53,-125,27,-23,-53,112,-39,23,56,-12,-24,91,61,-33,68,63,56,-38,-127,35,1,23,93,4, 
  /* [23][0][][] */ -6,49,46,40,15,-55,-11,43,46,-46,-47,-70,-60,-20,127,-17,30,-50,97,-49,81,14,-123,-70,60, 
  /* [24][0][][] */ 2,61,-49,69,41,-127,11,56,-26,18,-41,12,69,-5,46,3,11,89,-49,-14,16,-29,57,69,-14, 
};
const TfArray<4, int> tensor_dimension24 = { 4, { 25,1,1,25 } };
const TfArray<25, float> quant24_scale = { 25, { 0.0038527902215719223, 0.0043082567863166332, 0.0045832446776330471, 0.0080491211265325546, 0.0040619787760078907, 0.0025398151483386755, 0.004458580631762743, 0.0042334836907684803, 0.0058626229874789715, 0.0023261243477463722, 0.0034493051934987307, 0.0018782777478918433, 0.0070358780212700367, 0.0052650542929768562, 0.0066321180202066898, 0.0029757646843791008, 0.008004428818821907, 0.0032445087563246489, 0.0018876816611737013, 0.0091087082400918007, 0.0019513810984790325, 0.0011153342202305794, 0.0063210134394466877, 0.00353453797288239, 0.0027840270195156336, } };
const TfArray<25, int> quant24_zero = { 25, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int32_t tensor_data25[25] = { -6717, 4922, 8431, 7984, -621, 11251, -3911, -3778, 12879, -9451, 12757, 12685, 1423, 14303, -13319, -8644, 18244, -3733, 14153, -2979, 14290, 41338, 827, -3132, 7895, };
const TfArray<1, int> tensor_dimension25 = { 1, { 25 } };
const TfArray<25, float> quant25_scale = { 25, { 9.0653891675174236e-05, 0.0001013707515085116, 0.00010784105688799173, 0.00018939109577331692, 9.5575975137762725e-05, 5.9760357544291764e-05, 0.00010490778367966413, 9.9611381301656365e-05, 0.00013794408005196601, 5.4732339776819572e-05, 8.1160120316781104e-05, 4.4194770453032106e-05, 0.00016555006732232869, 0.00012388362665660679, 0.00015604983491357416, 7.0017995312809944e-05, 0.00018833950161933899, 7.6341384556144476e-05, 4.4416039600037038e-05, 0.00021432255744002759, 4.5914850488770753e-05, 2.6243158572469838e-05, 0.00014872972678858787, 8.3165599789936095e-05, 6.5506515966262668e-05, } };
const TfArray<25, int> quant25_zero = { 25, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int8_t tensor_data26[1*3*3*25] = { 
  /* [0][0][][] */ -11,36,-7,25,67,66,51,-4,80,0,-40,-32,84,-49,75,28,55,-75,-18,-99,-108,-127,-64,-96,4, -9,24,103,-4,71,-13,47,9,-11,-2,47,-9,56,91,-53,19,-15,127,15,49,-4,13,-56,-59,-11, 65,-12,90,9,31,6,6,-27,1,18,-1,-6,-20,-21,-7,127,2,46,-14,127,-4,-23,-127,22,-14, 
  /* [0][1][][] */ 54,127,14,125,127,127,127,20,127,-55,-74,-15,127,-97,127,23,127,-85,60,-49,25,-124,-51,-121,127, -8,22,113,-43,116,-50,49,112,-33,1,-33,20,83,127,-53,-5,-36,93,4,28,6,38,-92,-127,55, 127,-3,127,-10,62,0,-8,127,12,127,-8,-14,-10,-25,-8,74,1,-5,-110,80,-11,5,-95,31,21, 
  /* [0][2][][] */ 69,86,35,127,77,75,117,44,49,-59,-41,127,53,-87,79,14,109,-12,48,8,127,13,-38,-43,-26, -37,24,15,-8,64,-29,23,56,-24,-17,-127,49,57,83,-24,-26,-22,33,127,-34,28,26,-93,-46,-33, 85,-30,61,-5,41,-6,-11,14,10,70,-22,-2,-4,-12,-2,-33,1,-13,92,-38,6,-5,-82,17,-15, 
};
const TfArray<4, int> tensor_dimension26 = { 4, { 1,3,3,25 } };
const TfArray<25, float> quant26_scale = { 25, { 0.0077200657688081264, 0.012705299071967602, 0.0051140841096639633, 0.0058281179517507553, 0.0060845213010907173, 0.0086146239191293716, 0.0038929067086428404, 0.0038488316349685192, 0.0077773057855665684, 0.0082363160327076912, 0.0047892015427350998, 0.012946829199790955, 0.0050626983866095543, 0.004645196720957756, 0.0045585110783576965, 0.0082037551328539848, 0.0054234038107097149, 0.0055266371928155422, 0.0080511821433901787, 0.0030061923898756504, 0.011178403161466122, 0.021184125915169716, 0.0020512251649051905, 0.0039327801205217838, 0.012088896706700325, } };
const TfArray<25, int> quant26_zero = { 25, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 3 };
const ALIGN(16) int32_t tensor_data27[25] = { -254, -309, -2903, -8609, 1045, 5911, 1506, -170, -10422, 4024, 22785, 317, 1956, 15871, 5972, 1335, 8781, 11002, -5614, 543, -701, 10748, 26099, 29731, -966, };
const TfArray<1, int> tensor_dimension27 = { 1, { 25 } };
const TfArray<25, float> quant27_scale = { 25, { 0.00018164860375691205, 0.00029894823092035949, 0.00012033139500999823, 0.00013713218504562974, 0.00014316520537249744, 0.00020269703236408532, 9.1597808932419866e-05, 9.056074486579746e-05, 0.00018299542716704309, 0.000193795669474639, 0.00011268709931755438, 0.00030463127768598497, 0.00011912232002941892, 0.00010929875134024769, 0.00010725908941822127, 0.00019302954024169594, 0.00012760949903167784, 0.00013003851927351207, 0.00018943958275485784, 7.0733942266087979e-05, 0.00026302126934751868, 0.00049845001194626093, 4.8264122597174719e-05, 9.2536007286980748e-05, 0.00028444462805055082, } };
const TfArray<25, int> quant27_zero = { 25, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int8_t tensor_data28[51*1*1*25] = { 
  /* [0][0][][] */ 30,12,-91,75,-7,-61,11,-23,41,-5,-52,24,-30,-59,-30,17,32,63,-1,41,-29,-19,-31,127,13, 
  /* [1][0][][] */ -23,-36,47,80,21,40,-92,38,-39,-6,107,-82,97,75,73,15,-127,65,-47,60,32,94,-87,-67,17, 
  /* [2][0][][] */ 77,10,113,-98,-27,118,26,25,17,127,-48,-46,2,-74,-113,-88,78,4,-25,64,-40,92,26,74,-15, 
  /* [3][0][][] */ 6,71,34,65,-7,-10,-27,127,28,45,-24,23,-18,63,-83,-70,47,-3,117,-33,34,-1,-6,6,-59, 
  /* [4][0][][] */ -48,-49,52,-26,-41,-73,21,77,40,-33,-5,-17,30,-50,-22,31,16,-33,66,6,-53,127,12,-17,-3, 
  /* [5][0][][] */ 13,-81,2,-41,-45,-3,14,79,-15,39,8,122,127,-45,14,-20,-117,-69,5,31,113,45,-36,70,116, 
  /* [6][0][][] */ -37,-107,-10,95,-40,-91,-127,-53,-3,-11,-35,-102,-13,-75,80,-68,69,-78,-85,-67,-3,-59,0,53,-106, 
  /* [7][0][][] */ 36,27,26,45,9,-33,-90,39,10,-35,25,127,1,0,24,13,19,-12,-71,48,-12,-23,30,-31,-73, 
  /* [8][0][][] */ -121,6,0,3,27,-127,13,-28,58,22,87,16,-4,35,19,-15,-37,-39,-20,60,-11,-40,-36,29,19, 
  /* [9][0][][] */ 11,84,118,-103,18,-76,30,-18,-40,16,6,-12,75,-9,-76,-36,127,-50,9,-45,11,48,23,-34,-25, 
  /* [10][0][][] */ 56,-18,5,-42,-61,111,50,-40,-13,-16,81,-13,-31,-6,-79,20,-63,10,-2,34,127,100,-7,62,14, 
  /* [11][0][][] */ -20,-40,108,54,21,-95,-92,-13,61,-72,-30,127,-18,46,33,32,42,-20,-44,9,-4,-19,-80,14,64, 
  /* [12][0][][] */ -54,7,9,-39,-127,-49,-3,22,72,11,-122,-24,50,85,5,31,-23,-42,14,30,60,-15,21,-55,28, 
  /* [13][0][][] */ 59,-88,80,45,-73,5,-121,2,-23,101,-77,94,29,-86,108,-127,70,101,-17,28,75,-115,-112,-24,87, 
  /* [14][0][][] */ -7,-74,-21,-7,-75,127,122,-77,89,88,-25,126,-44,-72,85,50,4,-51,-15,24,72,-61,-8,14,50, 
  /* [15][0][][] */ 21,56,8,-63,-30,-116,-30,-40,127,-26,102,-36,-47,-11,-68,3,-42,-9,48,36,-21,20,-20,-44,34, 
  /* [16][0][][] */ -31,-70,-8,80,15,70,23,2,-30,4,-38,-50,12,40,92,77,-8,-33,74,-32,2,-59,6,-40,127, 
  /* [17][0][][] */ -3,-32,-6,61,-4,-9,-36,-16,-18,43,9,44,35,41,-56,-62,-74,127,-30,5,-1,29,-6,80,52, 
  /* [18][0][][] */ -32,12,127,-1,-1,-35,25,12,19,90,-35,17,-61,-2,-19,48,-3,-49,-42,62,-27,-32,-80,-26,16, 
  /* [19][0][][] */ 25,-54,-79,31,77,-36,25,-40,-40,6,-48,-33,-2,-14,48,111,51,98,85,41,68,-54,-47,127,61, 
  /* [20][0][][] */ 24,-44,94,-95,-117,2,49,121,46,-17,67,-16,103,-124,-31,48,-27,127,-26,-22,-39,7,-24,-33,-64, 
  /* [21][0][][] */ -11,-50,-9,-27,-9,-8,4,22,35,127,0,0,14,-3,21,-29,25,-3,-4,10,5,19,-35,23,-38, 
  /* [22][0][][] */ 81,-107,59,-39,124,-56,18,5,127,-6,32,4,19,-52,46,19,15,39,-12,38,-37,22,8,-21,-52, 
  /* [23][0][][] */ 8,6,16,-10,-25,-6,-16,38,127,-69,19,43,-12,-23,13,-5,6,39,73,-18,-5,-8,52,-31,5, 
  /* [24][0][][] */ -55,-41,2,-15,25,2,21,-3,-9,-32,-10,63,-46,10,34,31,-127,12,-21,-32,-15,-11,9,19,-5, 
  /* [25][0][][] */ -15,67,91,5,127,4,-70,-61,-99,5,56,23,-40,22,-12,34,20,-18,-43,48,43,-39,-12,8,0, 
  /* [26][0][][] */ -14,-61,-62,14,65,-78,-28,82,-62,77,127,114,20,13,-31,-7,22,28,-50,91,38,18,22,25,67, 
  /* [27][0][][] */ 33,-67,-62,-127,-118,-29,3,-41,8,0,-2,45,99,-5,-17,80,55,39,-34,49,-46,74,-95,58,1, 
  /* [28][0][][] */ 72,-84,-54,45,45,-51,-127,72,-9,39,34,-80,83,77,0,47,-81,27,1,-66,-62,-42,24,16,-121, 
  /* [29][0][][] */ -6,-78,6,99,-28,-2,-21,3,-14,19,-89,-8,123,-43,127,16,-52,-24,22,18,-48,7,2,50,-30, 
  /* [30][0][][] */ -33,-55,-40,-1,11,-2,32,62,2,4,-13,21,67,-42,6,-39,-13,3,63,19,55,-1,-35,127,-20, 
  /* [31][0][][] */ 0,-47,-33,-127,9,28,4,21,-41,-66,-3,6,-40,4,15,42,47,59,39,-59,-15,23,1,23,3, 
  /* [32][0][][] */ -5,-25,-42,121,31,-20,5,60,72,14,-2,24,-18,-103,-18,-20,-96,-15,3,43,5,-15,21,-127,51, 
  /* [33][0][][] */ 15,86,-7,53,-21,-14,-49,-52,-80,-50,-36,-127,35,-35,38,49,48,31,48,7,8,-43,62,36,-73, 
  /* [34][0][][] */ -61,-35,6,50,41,72,58,105,81,127,46,58,-44,62,0,-59,-5,-20,-24,67,44,0,-30,20,8, 
  /* [35][0][][] */ -8,-39,0,109,-91,35,-61,50,-38,48,-127,45,-45,9,-26,-51,-38,-64,44,7,29,-39,-51,-43,25, 
  /* [36][0][][] */ -5,-64,26,-23,40,26,-102,-24,-77,8,25,54,-93,72,68,-22,17,78,5,18,-27,127,-85,-10,65, 
  /* [37][0][][] */ -21,-56,-34,-26,35,127,-45,19,5,-27,-16,19,21,-14,-43,5,39,17,12,-27,80,-31,-11,-25,2, 
  /* [38][0][][] */ -4,-20,-29,8,-99,37,97,0,1,-38,44,41,16,-47,81,-1,43,97,-3,-67,55,-15,-127,-19,49, 
  /* [39][0][][] */ -119,-71,-116,67,6,-95,-33,77,40,30,-31,-32,94,49,-12,55,-127,79,46,75,11,29,57,9,-74, 
  /* [40][0][][] */ -18,-12,-19,-8,1,-13,-29,-19,31,32,-17,16,58,-18,7,127,-3,-19,1,-8,0,5,-63,-4,6, 
  /* [41][0][][] */ 35,-1,12,-2,17,-23,-34,19,52,-18,1,-17,37,-5,-6,2,-8,-26,127,-10,-36,12,-2,5,-64, 
  /* [42][0][][] */ -68,-44,-30,-15,-26,-6,-40,127,22,-39,53,72,22,-62,71,-4,46,-43,-70,37,42,20,-32,-44,16, 
  /* [43][0][][] */ -8,29,3,54,-33,71,69,64,-20,9,-78,-33,-11,-21,37,-4,5,39,-49,-62,127,-59,-93,44,-122, 
  /* [44][0][][] */ 44,-25,-18,88,-57,-33,-89,-21,-60,-14,-5,48,99,-47,36,127,-98,34,35,-7,60,-115,-52,-7,86, 
  /* [45][0][][] */ 10,-29,10,-79,-30,-87,-75,-11,8,33,-9,53,-52,103,98,-16,-127,24,-22,-8,-7,6,-29,-42,29, 
  /* [46][0][][] */ -50,-68,113,77,66,-10,59,-58,-70,-127,-9,-42,-21,-76,-3,63,-68,113,34,108,93,-20,-40,47,-76, 
  /* [47][0][][] */ -1,86,32,-91,-76,-31,29,-12,21,-71,-26,-40,-6,-19,15,-18,-11,61,45,-23,-53,75,-12,35,-127, 
  /* [48][0][][] */ -24,35,-30,-41,-5,30,112,58,-14,-96,62,-66,-127,53,-58,32,-3,90,-62,3,92,46,105,-28,-93, 
  /* [49][0][][] */ 0,-20,-43,15,-3,36,-43,-22,-50,-12,16,-33,50,31,17,-2,-27,-62,-45,39,58,-127,-11,88,1, 
  /* [50][0][][] */ -68,21,53,-61,10,41,12,25,127,60,7,53,-18,23,-6,-8,-35,9,-44,50,13,26,-46,-68,47, 
};
const TfArray<4, int> tensor_dimension28 = { 4, { 51,1,1,25 } };
const TfArray<51, float> quant28_scale = { 51, { 0.0033095823600888252, 0.0041016801260411739, 0.0041543622501194477, 0.0038880447391420603, 0.0037229971494525671, 0.002494933782145381, 0.0010918870102614164, 0.0040195873007178307, 0.0058374712243676186, 0.0023039595689624548, 0.008541611023247242, 0.0043527525849640369, 0.0041034216992557049, 0.0033134077675640583, 0.0018528400687500834, 0.005156015045940876, 0.0024659971240907907, 0.0040689855813980103, 0.0068031675182282925, 0.0026998755056411028, 0.002972164424136281, 0.0055481763556599617, 0.0028128291014581919, 0.0043994938023388386, 0.006178924348205328, 0.0068455357104539871, 0.0043453602120280266, 0.0022000386379659176, 0.0029008788987994194, 0.003909955732524395, 0.0060136271640658379, 0.0054769646376371384, 0.0074712643399834633, 0.0051482445560395718, 0.0039044213481247425, 0.0046217385679483414, 0.0034731065388768911, 0.0050130863673985004, 0.0028978383634239435, 0.0023495680652558804, 0.0040261936374008656, 0.011446527205407619, 0.0037026824429631233, 0.0047445213422179222, 0.0030173268169164658, 0.0028711212798953056, 0.0053468211553990841, 0.0042102029547095299, 0.0027373426128178835, 0.0042074327357113361, 0.0035442574881017208, } };
const TfArray<51, int> quant28_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int32_t tensor_data29[51] = { 15407, -17977, -16581, -16247, 12844, 11177, 68377, 3858, 2017, 8630, -9932, -3720, 17064, 3553, 853, 15015, 307, -10299, -6200, -6545, 2021, -2467, 847, 3300, 7909, -12441, -13428, 14144, 12382, 8316, 1078, 1185, 19957, 5725, -24715, 23714, -9555, 4018, -836, 15770, 5808, 3097, 13225, 2147, 13690, 15165, -1772, 11917, -1483, 11647, -3559, };
const TfArray<1, int> tensor_dimension29 = { 1, { 51 } };
const TfArray<51, float> quant29_scale = { 51, { 7.7872529800515622e-05, 9.6510120783932507e-05, 9.7749703854788095e-05, 9.148340905085206e-05, 8.7599932157900184e-05, 5.8704325056169182e-05, 2.569145908637438e-05, 9.4578528660349548e-05, 0.00013735226821154356, 5.4210813686950132e-05, 0.00020097909145988524, 0.0001024177108774893, 9.6551098977215588e-05, 7.7962540672160685e-05, 4.3596239265752956e-05, 0.00012131800031056628, 5.802346277050674e-05, 9.5740841061342508e-05, 0.00016007453086785972, 6.3526480516884476e-05, 6.9933281338308007e-05, 0.00013054533337708563, 6.6184213210362941e-05, 0.00010351750097470358, 0.00014538645336870104, 0.00016107142437249422, 0.00010224377183476463, 5.1765615353360772e-05, 6.8255976657383144e-05, 9.1998961579520255e-05, 0.00014149711932986975, 0.00012886975309811532, 0.00017579445557203144, 0.00012113517004763708, 9.18687364901416e-05, 0.00010874678991967812, 8.1720158050302416e-05, 0.00011795497266575694, 6.8184432166162878e-05, 5.5283955589402467e-05, 9.4733972218818963e-05, 0.00026933004846796393, 8.7121938122436404e-05, 0.00011163579620188102, 7.0995927671901882e-05, 6.7555796704255044e-05, 0.00012580756447277963, 9.9063603556714952e-05, 6.4408064645249397e-05, 9.8998418252449483e-05, 8.3394297689665109e-05, } };
const TfArray<51, int> quant29_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const ALIGN(16) int8_t tensor_data30[1*3*3*51] = { 
  /* [0][0][][] */ 9,-45,46,-61,13,-15,80,35,69,46,-83,-127,127,43,2,27,-40,-12,-3,-31,-54,-11,5,-40,127,-35,-127,60,-45,19,44,49,-17,-65,127,127,-40,3,127,127,61,124,0,-29,30,4,27,-126,13,-20,-3, -20,-33,127,-63,-25,2,66,127,18,105,-36,-30,51,127,-93,91,-58,-20,-47,-21,-47,83,127,-64,45,68,119,-68,-13,-60,27,-34,7,-81,-79,-46,-2,127,21,-2,5,5,-34,-55,70,127,-5,-9,-17,36,10, 13,0,-8,25,47,6,-127,16,-67,-33,127,57,-81,-16,95,-33,21,17,-9,41,-30,127,-19,6,-11,33,3,-113,-26,1,-58,-127,-21,-40,-5,103,1,-12,7,-5,-25,1,28,-115,103,-4,-40,-49,-16,53,-10, 
  /* [0][1][][] */ -66,-124,15,-59,41,127,-120,-8,127,-11,-73,-33,-105,10,20,127,-124,127,9,-16,127,-25,-18,29,-20,-38,-40,-29,127,17,-7,-2,-39,-45,-3,-20,-34,-14,10,-1,-38,-24,48,65,127,16,-30,-127,-21,-68,-12, -64,127,-34,127,127,10,-65,-21,-32,39,43,-72,-16,-25,127,-75,-127,-30,-33,-42,17,13,5,7,-2,127,-6,30,-3,127,44,70,127,-26,34,-22,-19,-25,24,-14,37,-56,-109,127,30,42,-31,8,-127,-77,127, 2,29,-45,50,-42,40,-3,12,-54,38,-21,5,17,0,-76,36,17,41,-17,89,-45,-43,12,-127,-1,19,7,127,-12,-29,-58,-15,-12,23,-24,-20,127,-14,-31,-23,-62,-109,127,-51,-61,2,-6,-17,37,127,43, 
  /* [0][2][][] */ 127,-76,-23,67,2,-7,98,-18,-24,14,-3,-91,1,-5,3,5,114,9,-22,-111,-4,-30,-20,47,-11,7,-58,14,-6,60,127,1,-8,-127,-9,41,101,22,-28,-48,-23,48,36,-46,60,-3,127,55,54,-76,-24, -4,-33,0,-26,-24,1,83,-13,-6,-36,0,-55,-11,-19,30,-16,109,25,127,127,2,-11,-26,32,-1,43,-4,-63,4,80,-48,-21,9,65,-20,6,64,-10,-27,3,-18,127,45,40,-3,-23,83,16,101,31,-3, -23,2,-28,-45,3,-9,83,-4,-53,127,-5,1,32,-14,21,-27,-81,-9,-16,21,26,-25,0,92,14,22,20,73,-8,-17,-51,10,31,14,16,18,-22,-14,6,-12,127,38,-30,93,-29,-1,-43,-8,-24,35,4, 
};
const TfArray<4, int> tensor_dimension30 = { 4, { 1,3,3,51 } };
const TfArray<51, float> quant30_scale = { 51, { 0.017916101962327957, 0.0073802266269922256, 0.0085047949105501175, 0.0095247328281402588, 0.011517895385622978, 0.015137635171413422, 0.010677344165742397, 0.0093009741976857185, 0.0088896257802844048, 0.011431658640503883, 0.0041573233902454376, 0.010365976952016354, 0.0087398840114474297, 0.010041786357760429, 0.0086933709681034088, 0.0065221590921282768, 0.0077241528779268265, 0.011785664595663548, 0.0099533451721072197, 0.0082125170156359673, 0.010447189211845398, 0.01180095411837101, 0.012669921852648258, 0.013611424714326859, 0.011514556594192982, 0.0047765164636075497, 0.0091688120737671852, 0.010295679792761803, 0.018233956769108772, 0.0076438304968178272, 0.0081599261611700058, 0.0077572250738739967, 0.0069669205695390701, 0.0087641943246126175, 0.010879140347242355, 0.0080231176689267159, 0.0090955514460802078, 0.013272914104163647, 0.020756721496582031, 0.016884457319974899, 0.016205310821533203, 0.0052766231819987297, 0.0075594605877995491, 0.0059591108001768589, 0.0086974948644638062, 0.013754313811659813, 0.00613365788012743, 0.007975919172167778, 0.0086909066885709763, 0.0060235699638724327, 0.013370485045015812, } };
const TfArray<51, int> quant30_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 3 };
const ALIGN(16) int32_t tensor_data31[51] = { 2443, 1805, 211, 346, -3558, -1628, -1019, -1915, -2886, -4621, -4547, 10091, 4481, -789, 327, -566, 2392, 943, -154, -708, 2276, -1815, -976, -180, -888, -5962, 1202, -595, 82, -439, 683, 10841, -3214, 4986, -82, 918, 1257, -27, -531, 248, 343, -6853, 1827, 313, -3997, -2103, -1657, 5390, 916, 3653, -3743, };
const TfArray<1, int> tensor_dimension31 = { 1, { 51 } };
const TfArray<51, float> quant31_scale = { 51, { 0.00042155533446930349, 0.00017365239909850061, 0.00020011283049825579, 0.00022411136887967587, 0.00027100931038148701, 0.00035617966204881668, 0.00025123162777163088, 0.00021884645684622228, 0.00020916767243761569, 0.00026898022042587399, 9.7819378424901515e-05, 0.00024390534963458776, 0.00020564433361869305, 0.00023627733753528446, 0.00020454991317819804, 0.00015346257714554667, 0.00018174477736465633, 0.00027730976580642164, 0.00023419635544996709, 0.00019323569722473621, 0.00024581621983088553, 0.00027766951825469732, 0.00029811580316163599, 0.0003202688239980489, 0.00027093075914308429, 0.00011238862498430535, 0.00021573675621766597, 0.00024225129163824022, 0.00042903429130092263, 0.00017985483282245696, 0.00019199826056137681, 0.00018252294103149325, 0.00016392754332628101, 0.0002062163403024897, 0.0002559797721914947, 0.00018877924594562501, 0.00021401297999545932, 0.00031230386230163276, 0.00048839347437024117, 0.00039728134288452566, 0.00038130144821479917, 0.00012415583478286862, 0.00017786966054700315, 0.00014021436800248921, 0.00020464694534894079, 0.00032363092759624124, 0.00014432136958930641, 0.00018766868743114173, 0.000204491923796013, 0.00014173105591908097, 0.00031459965975955129, } };
const TfArray<51, int> quant31_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int8_t tensor_data32[51*1*1*51] = { 
  /* [0][0][][] */ 3,-68,-5,11,-27,-16,-2,-4,20,54,-22,70,-19,1,18,57,-9,-33,23,20,14,68,96,-25,55,22,33,-86,-120,0,-127,3,32,36,-19,33,28,-23,57,-124,97,-63,-7,-95,41,-17,-55,54,-58,-38,20, 
  /* [1][0][][] */ 31,-52,31,-76,28,39,27,-19,29,-23,69,-46,71,18,42,-16,35,22,-11,8,-127,-15,98,-2,-63,-29,-20,14,-71,74,-3,-12,-23,91,20,-53,125,37,-20,-16,1,-15,7,29,10,28,35,4,106,-13,-41, 
  /* [2][0][][] */ 17,127,54,-50,-3,30,-34,12,-20,-19,-26,53,24,12,-9,-23,-16,54,62,1,-38,34,-14,0,-52,-11,33,-28,-31,-8,46,-3,6,16,-1,66,29,-25,-58,-4,-40,10,13,11,-43,43,1,-38,-17,23,14, 
  /* [3][0][][] */ -2,-51,-37,-25,-49,-18,96,-73,-93,35,42,-75,-58,-29,7,69,-29,108,-8,67,-15,127,51,-56,55,-37,7,4,-95,-9,24,-125,2,13,25,23,-2,25,-22,36,-85,41,18,-54,105,18,-67,19,118,55,39, 
  /* [4][0][][] */ -23,3,-43,38,100,-19,108,-63,-98,-21,35,-61,-23,2,45,-65,53,-2,0,2,-43,127,-82,-31,-2,-36,-108,92,-2,-29,36,125,32,5,98,-17,14,35,-85,-10,-13,-10,15,-108,67,-35,0,57,28,44,26, 
  /* [5][0][][] */ -9,48,59,21,-81,-58,56,-14,57,86,116,-53,60,-74,-30,1,45,-127,37,-5,65,-39,-17,-38,-28,30,60,122,9,12,16,-67,41,24,-6,61,77,-32,-10,-12,12,-37,-37,-28,60,-25,-6,56,3,11,-21, 
  /* [6][0][][] */ 37,-34,-11,13,64,20,-27,-37,49,-27,-16,-56,-24,-30,17,33,43,-60,-39,14,-27,27,-4,8,-7,-37,-66,73,-45,127,-76,-21,-112,-24,-35,1,39,42,-20,-86,20,-27,-44,0,5,2,16,-94,38,22,12, 
  /* [7][0][][] */ 75,34,10,-3,-9,-7,-71,15,-11,2,-17,-35,10,25,-11,31,44,16,-2,20,-16,3,-47,-14,-12,-4,36,-6,72,23,35,-52,-51,11,-13,-29,29,2,-47,7,7,-52,37,3,-1,127,36,40,13,52,-33, 
  /* [8][0][][] */ 84,-116,-8,-53,112,-66,61,-54,125,32,-16,-87,54,79,-33,41,60,-71,127,-110,-38,49,-11,22,87,-2,11,115,37,67,-36,104,1,-8,37,22,0,8,-47,34,5,-58,32,-57,-12,-16,-74,-42,11,-11,18, 
  /* [9][0][][] */ -45,56,-31,39,-22,-88,-26,12,-127,34,15,-37,93,-17,-64,-95,-60,15,-32,38,-65,54,-56,43,-38,35,-16,33,-2,18,1,23,45,-46,36,-65,-60,12,-64,-75,-72,39,24,7,13,59,-7,-8,19,65,-2, 
  /* [10][0][][] */ -30,-47,-29,50,-34,8,1,77,-59,29,7,-29,21,45,-30,-79,-54,44,-14,127,-18,-101,-10,12,29,-60,60,-75,-106,-30,88,-65,-31,90,-47,-29,-11,-7,-101,36,-21,66,-16,84,39,1,-15,-18,35,-19,-18, 
  /* [11][0][][] */ -79,-27,68,88,26,-78,-100,4,-56,20,0,-2,28,19,-7,10,113,7,78,127,-17,-5,13,87,20,-67,22,3,5,1,-22,-49,-4,-31,-1,32,34,-68,-5,-79,-97,-108,-79,-35,-57,16,-65,-16,36,-11,7, 
  /* [12][0][][] */ -85,-4,5,33,11,-53,-24,-3,-26,26,-23,1,7,41,4,-66,30,-11,4,-14,-35,13,-33,-46,-15,34,29,-53,22,-37,38,26,-25,-9,27,-2,21,2,5,-42,78,-52,-14,-18,-24,22,18,60,-36,31,127, 
  /* [13][0][][] */ -127,16,44,-40,1,94,1,-78,-7,94,1,59,0,37,-6,102,27,-3,112,-90,82,16,83,24,93,79,84,-7,-112,16,20,2,65,26,-58,48,59,-18,8,-87,-25,-29,101,0,2,-18,21,-7,25,99,-69, 
  /* [14][0][][] */ -53,9,-10,1,-77,53,43,5,4,-65,-29,-39,39,-12,29,2,-4,36,49,-64,63,43,-127,-77,0,1,38,65,-31,26,46,-4,25,-4,65,36,-50,-9,84,-35,76,51,-11,-102,113,-20,-100,-19,-21,-67,7, 
  /* [15][0][][] */ -4,-68,61,28,-2,-38,9,28,10,28,-35,-103,17,-77,41,-59,14,11,65,-6,-27,-38,-34,-41,-29,17,-77,0,29,-113,11,-2,98,-6,105,22,127,75,-71,-37,-7,8,27,13,10,49,-73,-2,-9,-51,41, 
  /* [16][0][][] */ 60,63,-63,-14,-58,82,-14,-33,76,-8,-8,-88,-40,28,55,77,32,84,-21,-72,-74,-47,14,-109,-43,13,-18,16,28,19,63,-6,-20,-75,108,-3,-108,2,-5,-47,127,-21,61,-29,-23,17,34,-18,64,80,22, 
  /* [17][0][][] */ -3,21,-12,-31,-18,4,-76,-46,55,1,45,-15,80,-24,-87,50,-16,-53,-51,-30,-15,62,-38,-11,28,-71,-22,8,1,-5,66,-43,-35,-4,85,-91,-4,-2,127,-54,114,33,-18,8,29,54,53,7,-23,-9,18, 
  /* [18][0][][] */ 11,29,9,-31,-12,84,47,-24,23,5,-36,-127,-11,44,39,-38,100,-3,14,-54,-46,-84,-14,-56,-3,-16,-42,-12,-81,-17,4,52,33,-14,6,-32,-13,28,-24,23,40,-23,21,8,42,14,38,50,44,-35,-48, 
  /* [19][0][][] */ -7,-12,8,-5,-6,-26,6,37,-13,-112,-44,-13,-11,-28,-33,61,-8,54,96,-53,8,-15,-7,0,7,-5,-38,-127,10,-53,36,60,-5,-27,-4,-14,22,14,61,-38,-37,-4,-1,-52,-35,-12,-51,-3,-29,-9,13, 
  /* [20][0][][] */ 10,9,-51,-6,-24,-32,19,32,-25,42,-8,-18,127,1,48,42,28,42,1,-68,6,-11,-16,-69,-20,9,22,-39,-42,-24,0,28,-74,-36,39,95,-19,73,48,90,15,-38,-53,40,-61,53,41,11,4,1,-13, 
  /* [21][0][][] */ -68,19,-59,109,10,-75,8,-4,9,16,-58,19,9,15,-12,-4,3,20,-20,3,-41,-80,-22,-43,-8,-48,8,-55,-35,36,-12,-51,-51,-25,23,65,-38,26,-9,-47,6,-127,-35,-77,-22,-27,-64,-2,-21,-52,90, 
  /* [22][0][][] */ -53,-53,7,42,-47,39,-59,16,65,18,16,1,-19,-8,95,-10,-40,127,10,-57,10,49,-57,20,48,-2,-46,15,11,34,-46,30,15,-8,-9,34,-24,-53,21,75,-38,20,0,25,-43,17,-27,-33,-4,-27,-9, 
  /* [23][0][][] */ -58,-1,29,-95,-61,-82,36,-41,10,-37,-72,-7,62,0,-20,-57,-78,-83,99,-59,2,-37,-5,103,-82,-10,-96,-20,24,-37,28,-25,16,25,-6,-32,-51,-8,69,46,-44,48,127,72,118,15,-34,9,16,-60,-35, 
  /* [24][0][][] */ -68,30,3,91,-62,60,65,-16,-75,1,-19,-112,29,1,-17,-8,117,-63,22,-44,68,6,-1,5,-127,-21,8,10,-124,21,-56,-37,-62,-33,25,69,-36,38,55,61,-1,-57,29,-35,-91,23,-17,-10,-49,111,114, 
  /* [25][0][][] */ -8,-16,-39,27,0,-27,-1,32,-65,-16,-18,28,-62,-40,-43,4,39,-8,18,18,-3,-56,0,8,48,11,33,-9,1,-4,6,-127,24,79,18,-12,14,23,-46,3,-43,24,-107,23,26,1,-8,-26,-20,-3,5, 
  /* [26][0][][] */ -39,-25,-29,120,4,-69,6,24,-28,-18,-45,-47,-72,-73,64,2,14,64,9,16,6,9,-53,21,-65,-67,16,12,21,-24,-12,38,27,-105,-71,50,-14,65,-14,-27,19,-18,-10,40,5,-1,33,52,-1,-21,127, 
  /* [27][0][][] */ 62,34,-5,26,-90,31,7,2,-54,-84,27,-53,48,55,-9,-38,37,25,53,17,-38,51,127,-23,66,73,15,-21,-37,5,16,91,-21,12,-18,-52,-9,109,14,72,12,-39,86,-93,-31,17,14,52,-95,6,-14, 
  /* [28][0][][] */ -1,-9,110,-27,33,3,30,-11,22,75,-22,-117,-23,32,-32,-37,12,25,-19,54,-30,-39,-58,3,-3,-24,-20,30,-6,-45,-7,-57,-14,55,40,38,6,127,38,-6,-22,-72,-13,22,-5,-16,20,-30,9,46,-9, 
  /* [29][0][][] */ -52,50,-22,-7,31,63,49,40,-25,18,-75,-3,-58,20,14,30,32,29,-86,-40,12,-20,-78,-10,29,45,-18,30,-27,-44,-44,-10,-89,19,25,27,-29,13,61,-10,127,-29,-54,-16,10,-13,-39,-55,-100,23,-5, 
  /* [30][0][][] */ 46,22,-21,-39,-8,-17,39,93,23,-6,8,3,-48,14,76,-49,-68,-47,-14,-19,58,-44,56,-10,35,4,-125,-57,21,-64,42,2,-21,-28,-26,30,-31,23,20,127,-10,5,53,3,-87,17,12,-8,-51,-68,-8, 
  /* [31][0][][] */ -93,-38,-22,20,68,-51,0,58,17,-127,-23,41,31,57,-3,-106,68,-91,5,-3,-37,19,-13,12,-50,-49,3,26,-54,79,-19,-74,117,28,-1,-31,-43,-127,89,-73,-2,-85,-57,34,12,-34,76,-5,28,60,55, 
  /* [32][0][][] */ -83,127,92,10,101,-21,36,6,-23,38,0,-94,-24,54,-80,-3,-12,86,24,13,-40,24,-24,-83,-34,-39,-7,55,-24,47,49,-62,71,0,55,81,77,-61,-9,93,66,-75,-52,-32,21,30,53,13,52,-36,-1, 
  /* [33][0][][] */ -17,-83,-19,-22,-21,-9,-34,43,60,50,-14,6,-40,-78,-65,25,15,56,4,29,15,-127,76,56,-11,15,-46,-1,24,10,57,43,11,27,0,-44,6,49,42,11,-4,43,3,17,29,24,-5,4,-8,-46,38, 
  /* [34][0][][] */ -7,85,-1,29,-24,-99,37,69,-60,24,54,-41,-28,50,83,21,-72,-73,16,5,50,16,-27,10,127,17,-31,83,13,-26,-47,-80,-59,-32,29,0,-12,35,103,-24,30,19,-74,86,-44,-67,32,-117,4,-36,5, 
  /* [35][0][][] */ 14,-47,119,31,-42,103,27,127,62,69,21,-19,-22,67,17,-55,-46,44,95,94,6,-8,19,-47,-23,-44,59,-22,9,-39,-20,-14,0,3,-70,-15,-38,-120,77,-59,19,-79,27,11,-38,68,13,-5,-34,-17,113, 
  /* [36][0][][] */ 7,24,-49,-31,-35,-17,-5,8,48,28,-26,-10,-11,29,-69,-41,-10,43,-21,0,5,-39,9,-32,118,-40,-92,-30,16,-69,-23,113,-10,63,-17,-42,-15,-44,49,6,44,-86,4,-27,67,79,90,8,46,127,19, 
  /* [37][0][][] */ 66,-38,11,12,43,29,-76,-52,2,10,-45,-42,42,15,33,-41,2,33,-47,-21,56,33,30,-12,-7,-2,-32,-7,22,0,-35,-7,-4,-1,-34,17,127,-26,-54,11,-18,6,24,-70,-8,-48,-23,-75,22,31,-20, 
  /* [38][0][][] */ 15,68,1,-37,24,127,38,-16,-10,0,2,-37,36,-11,-26,27,31,-42,12,-38,34,2,13,-50,-21,37,17,26,-7,21,-2,-15,-3,17,-21,46,54,-2,17,-26,-27,-27,-3,-11,-28,-18,33,-46,36,-75,-11, 
  /* [39][0][][] */ 26,34,-31,-5,-21,23,72,-45,18,12,-3,-46,-20,4,-39,39,11,-30,-2,-45,-12,18,8,41,-69,67,-12,17,127,24,5,-84,13,-2,0,-61,72,-16,-49,10,-79,-8,-44,36,-46,-4,89,-81,39,41,57, 
  /* [40][0][][] */ 102,-36,-10,-1,47,19,-13,-49,24,70,21,-8,-12,-82,12,17,-17,38,127,-46,-22,-14,64,50,23,59,26,-54,-37,44,118,-9,31,-3,-17,18,-102,13,-41,31,-57,4,10,-28,8,-17,-8,6,1,16,15, 
  /* [41][0][][] */ 1,4,1,-32,33,-60,-6,57,68,-23,33,-48,46,-38,-31,16,21,24,33,-88,-5,-22,-7,-127,38,9,17,14,83,94,-26,-15,-3,-75,8,-38,54,-5,-76,-6,20,-51,39,-25,-37,-16,8,-20,33,34,37, 
  /* [42][0][][] */ -45,-23,-44,20,38,-68,9,25,-50,52,4,20,-68,40,-30,36,9,-26,62,46,-107,-7,89,39,-10,-61,35,15,17,-102,-33,-26,-24,35,-127,32,19,75,-15,-10,5,30,-8,-13,-87,72,37,-102,-29,-2,35, 
  /* [43][0][][] */ -15,-37,-127,-51,-1,-78,49,109,-16,-22,-1,1,0,62,-40,-66,-36,-43,3,39,12,27,-43,-3,-73,44,96,30,-40,29,12,29,-53,52,-64,-41,-6,-1,-38,-59,10,-29,39,-13,40,-45,14,24,36,-14,-3, 
  /* [44][0][][] */ 112,0,11,-15,-15,127,80,38,-63,-49,8,-7,-45,-28,-2,-4,-72,61,37,30,-4,-75,70,40,49,70,3,-41,-25,23,8,55,83,-34,50,24,11,15,-104,-44,-5,-50,17,15,-24,60,-39,0,-42,33,-59, 
  /* [45][0][][] */ 35,5,113,17,-64,-19,36,-26,-6,8,19,40,14,-40,-33,-7,2,-64,-13,-13,-42,-16,-11,42,-77,-56,2,62,-45,25,-64,-86,-23,-127,-32,-29,-34,-66,70,38,-14,-67,14,49,-23,-92,-18,-6,-23,-68,89, 
  /* [46][0][][] */ -17,13,1,-12,-29,33,-31,-3,-19,24,-15,-73,-66,4,-13,-38,-6,4,-35,-73,-43,41,-8,-43,-51,-60,-84,-69,31,56,-116,30,29,17,127,-55,7,-48,-1,71,55,-7,2,8,17,51,-1,27,6,35,9, 
  /* [47][0][][] */ -28,-40,-3,33,-10,61,61,-61,15,73,-12,-86,-34,-29,-10,-74,-57,12,3,-13,-17,-39,117,-66,17,-41,-15,-71,-96,-20,12,18,31,40,-38,12,-9,35,-1,71,-9,33,50,95,103,30,-113,-86,-127,1,29, 
  /* [48][0][][] */ 2,-77,-31,7,-37,-49,24,-31,-1,49,-53,-127,-16,-63,-75,-68,26,-108,27,97,-84,-64,60,-23,9,-18,-2,-40,-48,-31,-35,89,-4,41,31,-10,-3,-93,17,63,28,-23,23,94,101,-3,8,30,-22,82,43, 
  /* [49][0][][] */ 8,77,-74,-38,-16,40,24,54,57,-2,123,-37,24,127,83,-22,-43,-25,-31,4,-7,-15,10,-37,33,-2,-15,15,-6,24,-32,28,-6,15,49,22,13,-35,-20,22,-5,-44,0,22,8,94,-1,-59,-22,-25,-23, 
  /* [50][0][][] */ -48,-89,-65,32,66,50,-81,95,109,127,-15,-54,-36,-17,49,42,-9,-64,1,53,-55,28,-36,-87,-34,-21,-25,97,-28,85,-94,-25,-90,-65,17,16,32,47,5,58,27,21,31,-31,-14,-40,-40,-55,-28,6,-36, 
};
const TfArray<4, int> tensor_dimension32 = { 4, { 51,1,1,51 } };
const TfArray<51, float> quant32_scale = { 51, { 0.0039433334022760391, 0.0043665086850523949, 0.0049848668277263641, 0.0036230003461241722, 0.0036400377284735441, 0.0028311836067587137, 0.0064758653752505779, 0.0039554215036332607, 0.0018685363465920091, 0.0023815722670406103, 0.0032708956860005856, 0.002033689059317112, 0.0044678933918476105, 0.0023689460940659046, 0.0030376992654055357, 0.0042963828891515732, 0.0020629281643778086, 0.002201577415689826, 0.0040382491424679756, 0.0043713035993278027, 0.0032851870637387037, 0.0096887229010462761, 0.0046037589199841022, 0.0027415503282099962, 0.0040707932785153389, 0.0029524397104978561, 0.0034849510993808508, 0.0023100273683667183, 0.0035020350478589535, 0.0046183709055185318, 0.0028396302368491888, 0.0030248775146901608, 0.0033431914635002613, 0.0030271927826106548, 0.0025599468499422073, 0.0021385110449045897, 0.0035692383535206318, 0.004151572473347187, 0.0070767821744084358, 0.0048847533762454987, 0.0027585828211158514, 0.0048806457780301571, 0.0059072938747704029, 0.0049333539791405201, 0.0043958406895399094, 0.005542888306081295, 0.0061904303729534149, 0.0040883659385144711, 0.0040698512457311153, 0.0030934116803109646, 0.0024669456761330366, } };
const TfArray<51, int> quant32_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int32_t tensor_data33[51] = { 4061, -9724, -3959, 4668, -1148, 1732, 6946, -3059, -1619, 15277, 13783, 18009, 1628, -4098, 4601, 6589, 8220, 10348, -552, 7908, -5054, 18800, -3515, 13420, 9531, 21882, 5010, -5537, 6408, 9854, 11411, 16158, -3118, 20, 16754, 389, -8876, 3749, 533, 2782, 5857, 803, 8186, 6831, -7640, 17343, 4733, 4297, 5356, -2290, 14897, };
const TfArray<1, int> tensor_dimension33 = { 1, { 51 } };
const TfArray<51, float> quant33_scale = { 51, { 9.2784313892479986e-05, 0.00010274138185195625, 0.00011729098332580179, 8.5247069364413619e-05, 8.5647945525124669e-05, 6.6616084950510412e-05, 0.0001523733080830425, 9.3068745627533644e-05, 4.39655632362701e-05, 5.6036995374597609e-05, 7.6962256571277976e-05, 4.7851506678853184e-05, 0.00010512690641917288, 5.5739910749252886e-05, 7.14752750354819e-05, 0.00010109136201208457, 4.8539488489041105e-05, 5.1801824156427756e-05, 9.5017625426407903e-05, 0.00010285420285072178, 7.7298522228375077e-05, 0.00022796995472162962, 0.00010832374391611665, 6.450706860050559e-05, 9.5783376309555024e-05, 6.9469169829972088e-05, 8.1998849054798484e-05, 5.4353586165234447e-05, 8.2400823885109276e-05, 0.00010866755474125966, 6.6814827732741833e-05, 7.1173592004925013e-05, 7.8663331805728376e-05, 7.1228067099582404e-05, 6.0234044212847948e-05, 5.0317907152930275e-05, 8.3982078649569303e-05, 9.7684060165192932e-05, 0.00016651253099553287, 0.00011493537749629468, 6.4907835621852428e-05, 0.00011483872367534786, 0.00013899515033699572, 0.00011607891792664304, 0.00010343155008740723, 0.00013042089994996786, 0.00014565719175152481, 9.6196847152896225e-05, 9.5761206466704607e-05, 7.2786155214998871e-05, 5.8045781770488247e-05, } };
const TfArray<51, int> quant33_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int8_t tensor_data34[1*3*3*51] = { 
  /* [0][0][][] */ 127,127,-65,-28,29,127,-52,127,10,-23,36,-73,-76,46,-122,8,-47,-52,-78,33,-32,-85,8,-48,-44,-71,3,85,15,-49,-102,-49,-24,-68,72,90,-62,68,-42,2,9,127,23,-1,114,-2,119,-10,-65,127,-16, -40,-45,127,127,-8,-31,-71,98,-32,127,-89,-127,127,49,-51,-17,127,127,59,116,-3,-115,127,-84,127,63,-30,21,4,-11,6,127,80,32,115,13,-30,0,-33,127,127,-62,-12,-25,15,-74,17,-39,-18,-42,-55, -28,-31,50,-13,-21,111,-86,60,-127,49,87,58,65,23,-18,-41,-43,71,-48,-51,-21,-12,-18,-96,24,-17,109,78,6,-127,-53,-55,-18,-13,-90,-7,-67,-40,34,61,28,-57,-22,43,117,10,-21,127,127,-123,-16, 
  /* [0][1][][] */ -21,39,-17,15,-48,-10,-34,101,-27,-66,67,-6,-67,67,47,84,-23,-20,-125,-47,-43,120,15,-7,-25,-31,86,-127,27,-44,-123,-38,-56,-8,2,-65,126,2,39,-14,-26,-55,127,47,127,-59,127,20,-29,91,127, 10,29,-5,-10,127,-22,127,-19,-71,-114,73,65,68,-48,15,57,-40,-76,-83,2,-5,-42,-23,-127,-55,-8,126,5,-19,-20,-79,-12,-50,-67,-111,-37,100,-45,34,4,43,57,-19,-57,-33,-67,65,51,40,-111,33, -34,-42,-26,-4,-22,55,49,-16,30,-63,25,-40,107,30,-123,-8,44,76,-26,-91,-12,73,-22,-75,-2,127,54,76,13,118,-48,-18,127,127,-127,127,100,127,127,-34,-53,-72,-20,-59,-9,-10,12,-66,55,-22,-34, 
  /* [0][2][][] */ -13,-27,-11,-5,61,1,29,-91,-77,-105,-127,-3,82,127,-23,127,11,-21,-127,-127,-3,127,44,15,3,52,24,-9,1,-6,-17,-4,29,-55,2,58,-127,-14,-8,31,-24,-8,-37,3,-93,-68,72,74,-45,-16,45, 5,-12,38,-55,16,-10,34,-30,5,-4,9,12,-31,-37,-51,3,-18,-36,-65,35,127,-95,22,44,31,-45,127,-7,127,-65,127,0,4,18,64,-11,-16,8,17,14,14,47,21,119,-45,127,124,-44,-28,-11,36, -28,-30,72,12,20,-68,39,-9,-21,11,-18,-46,-34,-32,127,58,22,12,-20,69,-22,-28,12,12,-7,-47,17,9,-17,23,-48,38,59,64,32,30,118,50,-21,4,40,81,-46,-127,-23,61,-33,-14,-14,-80,92, 
};
const TfArray<4, int> tensor_dimension34 = { 4, { 1,3,3,51 } };
const TfArray<51, float> quant34_scale = { 51, { 0.010736106894910336, 0.0097678173333406448, 0.0087014064192771912, 0.0077218906953930855, 0.0082351891323924065, 0.010454157367348671, 0.0052580051124095917, 0.0077348044142127037, 0.012853255495429039, 0.010784104466438293, 0.0090818684548139572, 0.014697405509650707, 0.0063534318469464779, 0.008764464408159256, 0.0074996701441705227, 0.0076874801889061928, 0.013453062623739243, 0.0091967666521668434, 0.015698550269007683, 0.0077164480462670326, 0.0086748115718364716, 0.0026244823820888996, 0.0089325932785868645, 0.0070844679139554501, 0.0094706257805228233, 0.01590435579419136, 0.0059579485096037388, 0.011898843571543694, 0.011853448115289211, 0.0067502926103770733, 0.0090699996799230576, 0.00904063880443573, 0.0068661435507237911, 0.010484293103218079, 0.0065810997039079666, 0.010721974074840546, 0.0043028714135289192, 0.0093346675857901573, 0.0071223494596779346, 0.0073341079987585545, 0.0093067307025194168, 0.006110483780503273, 0.0063270828686654568, 0.0091584566980600357, 0.005720159038901329, 0.004432204645127058, 0.0041297031566500664, 0.0066616302356123924, 0.0088092656806111336, 0.0069793206639587879, 0.010719574987888336, } };
const TfArray<51, int> quant34_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 3 };
const ALIGN(16) int32_t tensor_data35[51] = { -1201, -160, -1629, -729, -1507, 1340, -160, -1025, 7164, 6167, 1442, 1522, -963, -1278, 3285, -2593, -246, 245, 2949, 372, -941, 7453, -1315, 9011, -1713, 183, -6845, -951, -2236, 4991, 959, 171, 547, -700, 4923, 1212, 2542, 169, -276, -1679, -564, 3320, -1688, -1901, 1334, 5683, -2089, 2410, -31, 10454, -1607, };
const TfArray<1, int> tensor_dimension35 = { 1, { 51 } };
const TfArray<51, float> quant35_scale = { 51, { 0.00025261429254896939, 0.00022983099916018546, 0.00020473897166084498, 0.00018169154645875096, 0.00019376915588509291, 0.00024598019081167877, 0.00012371776392683387, 0.00018199540500063449, 0.00030242954380810261, 0.00025374363758601248, 0.00021369103342294693, 0.00034582131775096059, 0.00014949252363294363, 0.00020622269948944449, 0.00017646282503847033, 0.00018088189244735986, 0.00031654266058467329, 0.00021639451733790338, 0.00036937766708433628, 0.00018156348960474133, 0.00020411321020219475, 6.1752529290970415e-05, 0.00021017866674810648, 0.00016669336764607579, 0.00022283825092017651, 0.00037422013701871037, 0.00014018702495377511, 0.00027997279539704323, 0.00027890465571545064, 0.0001588304148754105, 0.00021341176761779934, 0.00021272091544233263, 0.00016155632329173386, 0.00024668924743309617, 0.00015484940377064049, 0.00025228175218217075, 0.00010124403343070298, 0.00021963924518786371, 0.00016758470155764371, 0.00017256724822800606, 0.00021898190607316792, 0.00014377609477378428, 0.00014887253928463906, 0.0002154930989490822, 0.00013459197361953557, 0.00010428717359900475, 9.7169489890802652e-05, 0.0001567442377563566, 0.00020727684022858739, 0.00016421930922660977, 0.00025222529075108469, } };
const TfArray<51, int> quant35_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const ALIGN(16) int8_t tensor_data36[51*1*1*51] = { 
  /* [0][0][][] */ 28,-47,-7,-3,-11,42,-65,16,-30,-26,103,66,61,11,38,-20,-19,29,17,55,127,50,50,11,3,-102,-14,-43,46,37,115,19,40,-57,-21,-58,-5,32,-44,-81,16,-58,25,0,7,77,9,-63,-31,-25,12, 
  /* [1][0][][] */ -75,34,53,47,-15,-127,-5,15,-39,-20,10,55,18,25,1,42,-18,60,-50,9,-31,23,-41,-42,6,39,-5,-52,-8,-4,24,-2,-25,-7,-20,9,50,-37,84,-4,40,-10,-51,-5,65,-50,-31,29,-106,52,-21, 
  /* [2][0][][] */ 127,18,71,-50,118,-37,-72,3,-8,-16,-14,83,84,-17,-56,84,8,-50,2,-52,-30,89,-48,96,-28,38,24,83,-14,4,-61,23,22,-36,2,-27,-27,21,-25,90,-46,-37,3,10,28,-26,-1,-21,-14,-60,-50, 
  /* [3][0][][] */ 73,-43,-127,6,2,-24,10,-59,-23,106,23,-20,-33,66,-1,122,-2,-28,-53,-23,2,-44,-38,46,13,-59,-1,5,-78,64,-67,86,18,34,-1,-27,20,-40,18,-20,11,-35,47,4,-26,17,-81,72,36,-16,-44, 
  /* [4][0][][] */ -45,-23,-103,18,38,50,-40,88,127,-46,-17,-72,57,-13,1,-10,-69,-54,-32,-21,22,80,12,20,4,-75,-30,-83,11,79,30,67,86,-20,11,65,35,-78,52,13,-45,30,126,-102,-11,16,56,-41,8,99,-18, 
  /* [5][0][][] */ -10,-66,34,18,53,52,-43,44,-39,-47,-21,20,88,-51,50,-71,65,27,-116,-58,30,22,-31,19,47,21,-79,-18,122,70,-111,-8,-38,-101,43,22,93,3,18,21,-12,-34,27,36,-55,118,-6,48,127,-62,11, 
  /* [6][0][][] */ 105,-42,73,-127,-14,-21,119,-40,45,-77,-55,46,34,-9,4,30,34,54,44,-27,-67,-23,-20,126,65,59,48,2,98,-53,-38,-101,-44,-84,94,77,30,-53,42,-9,-47,86,-62,35,-49,-11,15,-67,3,-16,11, 
  /* [7][0][][] */ -113,-4,27,38,-39,37,127,-53,-11,-52,-59,29,65,17,-51,-70,74,-105,102,-71,-29,-38,-7,61,100,23,32,-8,-53,-115,9,11,-72,16,-51,85,58,-9,57,-35,-17,81,-61,-67,-22,-90,62,-2,-34,-19,22, 
  /* [8][0][][] */ 12,-80,-64,26,-6,14,18,47,-22,-11,9,-73,44,61,-65,95,-34,-70,-27,-31,14,-53,46,51,90,-33,-17,-9,1,6,43,50,-23,64,-64,36,37,-53,127,15,-53,17,-14,-10,19,7,-92,40,-7,-2,-57, 
  /* [9][0][][] */ -16,28,3,28,15,-47,-53,-52,3,51,-47,10,14,-45,24,15,44,15,85,67,5,-26,-57,-35,-14,15,24,-13,-8,-17,-22,127,-20,14,-2,-61,17,8,-14,-4,32,8,32,60,9,0,1,37,53,41,-9, 
  /* [10][0][][] */ 62,-39,-62,68,72,-10,19,-48,54,-127,26,82,48,-109,9,33,19,-61,-16,35,92,127,98,-6,-16,-26,-25,76,-28,-38,9,2,46,-76,-17,41,17,-48,51,31,73,27,59,38,-65,-35,-12,-21,65,51,-94, 
  /* [11][0][][] */ -55,117,56,20,-42,67,-56,78,-24,24,81,15,3,127,-13,-41,-59,-66,-67,101,-54,35,64,-10,-98,-9,-69,26,61,12,7,-30,95,-44,-34,6,-74,-73,-35,-38,-8,52,51,-29,-18,30,89,33,-102,-77,55, 
  /* [12][0][][] */ -61,16,-3,-87,127,-34,30,-13,-30,-22,39,101,51,-40,-17,-24,72,42,31,13,-34,23,-17,-9,-4,64,14,-11,7,2,31,7,18,-81,6,65,-46,33,-13,-87,-24,-32,-1,-17,49,52,-49,31,-20,7,37, 
  /* [13][0][][] */ -75,-127,-14,49,29,5,16,-58,-100,-36,26,-39,26,-60,33,-2,7,2,-99,-66,60,-78,-42,113,90,-49,29,-66,24,-31,12,31,3,-50,-19,-58,48,8,-52,-17,-38,66,21,-58,12,-80,45,-55,-5,-22,-50, 
  /* [14][0][][] */ 26,-64,-5,39,6,-101,-6,1,-6,79,-51,-21,9,-37,28,-40,-1,72,13,30,12,-64,-37,-2,8,2,-30,-5,127,10,-51,95,-17,32,-37,7,-53,-14,27,38,62,104,-7,-52,-60,-1,19,86,-57,-68,-6, 
  /* [15][0][][] */ 11,-37,-35,-44,29,-18,-3,14,-114,59,41,7,-83,14,98,25,-15,-39,8,88,53,-73,9,87,105,-66,-117,-69,36,-120,-34,42,127,39,-109,60,117,22,-106,40,-27,-25,47,-114,18,-68,59,109,1,-25,-69, 
  /* [16][0][][] */ -6,-22,-3,65,-7,-46,-30,-70,6,8,44,-36,39,26,63,-40,-7,19,-127,61,-17,-60,17,-10,49,22,-102,-5,21,-5,4,16,24,-1,-56,17,17,-31,-1,59,-12,50,-45,-42,-12,5,28,60,58,15,-73, 
  /* [17][0][][] */ -55,-97,71,-14,-4,-13,63,-20,121,14,-24,43,19,65,82,-127,-85,-38,-8,-47,41,78,1,-74,-114,17,20,2,50,36,-3,-12,-39,67,51,-80,-71,47,17,-32,-20,-19,17,11,109,108,-103,-62,31,-15,86, 
  /* [18][0][][] */ -13,-63,61,-28,41,-29,83,-26,-35,52,21,-17,-23,-17,-22,-101,-12,92,-32,-25,7,-43,2,64,66,59,8,-78,9,15,-79,60,-82,61,98,-10,66,87,61,-105,96,49,127,13,-12,5,6,-52,13,-37,15, 
  /* [19][0][][] */ 127,45,59,37,-10,-19,64,-30,-99,-5,-27,43,81,47,-30,-10,46,-52,35,39,24,-40,-77,18,-15,88,22,-49,22,-35,-34,-51,-11,-110,-8,9,-62,32,-7,-44,17,5,113,34,61,-23,41,-19,-35,41,-46, 
  /* [20][0][][] */ -17,12,50,-52,-37,44,-21,-1,-40,6,24,-27,-2,-14,39,0,-23,77,25,-44,34,-37,-20,-46,-19,14,-127,19,17,0,19,31,45,15,-26,-7,57,-50,-9,28,44,-54,15,-3,21,-13,-19,13,21,54,-68, 
  /* [21][0][][] */ 56,-68,-63,31,35,24,-124,2,70,64,-82,42,-47,98,-31,-117,77,-12,12,-102,-4,10,54,31,-12,-37,-127,-5,-19,97,-31,36,118,39,79,13,-7,-85,4,-4,39,-16,-30,17,-31,-10,17,-15,-90,-6,82, 
  /* [22][0][][] */ -19,-41,8,-18,-35,50,-18,-42,-49,-46,-13,121,19,-61,-11,-5,18,-25,-114,56,30,12,13,-56,-44,36,46,-80,121,-89,29,-2,-127,-3,-7,74,-45,120,-121,-11,82,6,-15,-127,37,45,42,-79,-44,-48,41, 
  /* [23][0][][] */ 58,-17,36,53,-122,42,57,1,-99,-42,-29,116,-55,-71,-1,-25,-2,-58,-43,9,46,-68,52,6,-93,32,44,-127,-55,-66,60,4,-82,-69,47,-62,86,-124,-103,-69,77,65,-29,38,-58,-24,69,-36,-20,-63,-34, 
  /* [24][0][][] */ -3,-82,25,56,26,34,-42,127,-43,113,-4,10,21,-11,7,-2,32,-34,-9,-25,4,-12,-47,52,-56,-13,-46,32,22,-51,42,53,90,52,-26,8,29,-46,3,-18,62,-29,-9,67,98,-21,7,2,7,47,-54, 
  /* [25][0][][] */ -56,-2,18,-70,19,-52,44,32,-15,-71,26,-34,-27,62,-53,-10,-24,58,0,-54,-18,10,-60,22,58,-54,-32,66,-53,-33,11,127,31,21,-97,13,-54,48,87,16,-18,61,-46,68,-75,28,-75,-18,34,20,-31, 
  /* [26][0][][] */ -32,20,-50,41,-16,13,23,-52,-50,66,19,25,-69,46,10,-36,-26,-3,-39,14,-71,-14,-13,11,34,8,-86,5,18,38,-45,-9,-18,-16,56,28,44,39,54,15,-26,-17,14,-3,-99,-6,10,-6,56,-127,109, 
  /* [27][0][][] */ -30,-4,-85,-55,-10,-21,-68,23,6,66,37,-20,-50,67,-7,98,-9,-40,-60,-27,-20,-22,-65,-24,0,-46,-33,53,40,127,-45,27,75,17,5,73,-23,123,26,-59,-49,-52,44,68,5,2,-68,-19,53,-6,20, 
  /* [28][0][][] */ -4,29,-67,-76,55,14,-2,-16,-4,-87,127,85,68,-39,25,-7,47,100,-93,-23,-45,-40,-19,16,-27,28,-61,-29,40,20,-29,45,52,-79,-65,80,-14,-24,23,-22,63,-37,-2,-15,24,51,26,-34,-19,-39,-13, 
  /* [29][0][][] */ -76,-59,98,62,-80,71,-55,-15,-17,21,48,-88,-75,-35,107,-87,-127,56,-41,56,-76,-110,16,27,-17,-99,-1,93,-59,12,54,-8,-9,30,62,-12,-34,6,-78,21,-100,-86,23,48,-10,41,-6,35,-92,47,-58, 
  /* [30][0][][] */ -28,-127,6,-29,10,-34,24,4,57,11,15,36,0,7,22,1,-67,14,-18,-32,22,-32,-53,-20,48,-38,32,-95,-15,-26,54,2,8,4,-49,-14,33,48,38,2,-89,29,57,-29,-20,-13,60,-20,11,1,-10, 
  /* [31][0][][] */ -55,69,35,3,9,18,-23,-47,35,-58,-10,32,20,-27,67,19,11,93,-43,-29,-39,-108,-56,-7,-16,-9,32,-42,25,-79,33,38,118,72,44,-127,1,121,15,-59,31,37,92,90,85,38,-81,7,-2,-81,-48, 
  /* [32][0][][] */ 43,-2,43,-21,53,4,-22,13,-26,-47,17,23,-108,50,34,-17,-30,-69,-55,14,-117,1,-5,-56,-36,-73,0,-127,-30,-37,55,-47,-28,-24,55,-49,-44,23,-5,60,58,-2,-33,-86,22,-54,44,-79,70,10,12, 
  /* [33][0][][] */ 34,23,21,-61,30,74,11,68,25,-23,36,-14,-17,6,-18,28,-68,-48,127,9,59,50,-36,-73,7,-8,-76,-32,14,41,-30,-68,51,-46,-44,-13,66,14,81,-3,20,-77,74,46,2,-37,-59,21,-69,-1,-76, 
  /* [34][0][][] */ -7,29,93,-56,-36,38,-28,-78,34,63,10,7,-78,-42,54,50,26,-10,-77,-53,18,-70,74,64,-12,-9,-29,-97,39,-76,-8,-3,-7,-51,39,89,19,58,50,-19,60,19,25,16,-78,56,127,-10,-47,46,-23, 
  /* [35][0][][] */ 19,-32,20,-19,-62,53,1,84,-14,106,-27,-27,-53,-3,73,58,56,-47,-87,46,-51,-17,66,-127,98,-23,-55,-25,13,16,-68,-55,34,-47,97,-20,-14,-44,-22,94,62,-34,-27,-29,-18,-60,69,3,60,59,-30, 
  /* [36][0][][] */ -36,12,15,1,-8,7,-42,12,-28,36,-82,-79,-35,67,-53,47,-22,-36,-106,-65,1,-38,-35,30,-57,22,-39,-18,25,63,127,10,107,72,45,4,52,-19,5,-15,-10,15,-8,29,19,7,30,-114,29,-37,-39, 
  /* [37][0][][] */ -27,79,44,-2,85,4,-47,13,47,0,41,-36,-45,26,88,-19,-52,-59,-70,-95,41,-58,-9,-73,-70,-9,32,-127,42,-20,-16,-20,-88,62,16,30,-29,21,-58,-31,-23,-6,6,26,-3,101,73,40,0,-38,2, 
  /* [38][0][][] */ -65,97,-5,-83,-25,-85,59,77,26,-127,24,46,-8,125,0,24,81,2,94,-67,53,51,-39,102,8,81,-11,-8,6,72,-21,-112,27,25,-107,73,44,18,38,-53,-66,-56,-28,-35,-120,74,-37,-17,23,-30,-90, 
  /* [39][0][][] */ 14,-2,-9,76,50,0,-32,10,92,-45,-13,55,14,-83,-11,-9,18,28,60,-16,21,-9,34,38,-5,21,-21,-57,-22,-18,-51,21,-26,13,-57,-43,-2,16,54,23,52,43,42,127,36,70,-23,19,-58,38,-38, 
  /* [40][0][][] */ 24,-5,2,23,29,38,-48,76,-28,-50,-32,15,-76,25,69,-77,82,-49,7,16,4,11,127,10,-62,25,-90,-17,-14,-43,-48,-50,-26,19,9,-83,-36,83,-24,1,26,40,-19,-18,-27,-27,-13,19,43,2,-41, 
  /* [41][0][][] */ -9,-46,13,-4,-10,59,-77,-41,-15,14,46,-25,56,-63,78,43,4,84,-53,31,-89,-14,-67,22,48,-26,-20,21,47,33,-3,-127,23,72,-72,-17,-10,-100,-24,84,44,53,14,-27,28,34,-11,87,63,-95,24, 
  /* [42][0][][] */ -1,-29,61,7,49,-19,57,-16,-14,80,-74,72,-54,15,59,-15,78,-32,-12,-87,-33,37,-72,17,12,4,-60,-78,-95,36,-19,15,33,31,-46,89,-29,40,42,-3,-47,-5,19,51,-35,68,9,-28,24,16,-127, 
  /* [43][0][][] */ -31,9,8,-13,-5,-33,23,48,-11,27,31,-9,12,-7,43,-32,-9,7,-8,-20,-80,-108,-19,-60,77,-8,7,-3,-67,7,34,80,-6,-49,-14,-33,-127,102,22,16,49,64,37,-11,26,-14,-30,-46,-36,66,-46, 
  /* [44][0][][] */ -8,-21,28,52,17,15,-75,-12,-23,-25,-11,-47,-87,4,51,-19,1,-9,-80,-37,-3,-33,23,48,51,29,-6,-30,127,-8,-36,48,-15,70,23,35,30,2,46,11,-105,28,29,-18,-37,50,-37,-9,10,-54,79, 
  /* [45][0][][] */ 2,-57,94,-53,-34,-61,-49,24,-26,22,53,-58,-110,-27,-49,15,-7,89,-29,-96,40,-63,-53,-26,-1,-39,-70,-127,-67,3,119,5,50,70,54,7,15,14,-50,-48,-73,-29,8,-7,33,29,55,44,24,-15,-53, 
  /* [46][0][][] */ 72,51,-46,-85,36,8,-71,127,-43,-12,-59,22,6,11,-57,-9,63,69,-3,26,11,40,-11,55,-57,-14,-24,-20,-26,61,72,65,-62,-120,62,-20,0,45,-6,-44,-20,-47,40,16,31,18,-19,17,-67,35,19, 
  /* [47][0][][] */ 65,-83,47,-16,-9,39,92,5,32,-21,-70,37,-85,92,83,75,-38,-29,-9,3,-29,-37,15,-25,-34,22,25,-77,7,1,40,-7,0,-3,56,20,-19,26,13,21,-88,127,57,-25,-41,-52,-10,-1,-54,13,20, 
  /* [48][0][][] */ -25,34,4,-31,3,-22,-4,16,-15,-10,60,30,14,6,-14,-27,88,-31,13,-50,-22,-40,-40,54,-11,127,-36,-45,12,-11,47,-29,10,-58,6,-1,17,10,-5,82,-36,-20,-63,-7,52,-29,20,24,-31,-3,9, 
  /* [49][0][][] */ -11,5,5,-5,-3,79,12,-1,44,21,-2,16,-19,26,18,8,-26,-36,8,15,21,-12,-41,-7,17,-10,-22,1,4,-19,15,-27,30,15,7,-17,-31,4,4,-2,-1,-4,26,11,-16,-18,10,-10,56,127,-3, 
  /* [50][0][][] */ -33,11,48,-1,52,-31,18,-104,41,58,-42,108,28,-127,-26,31,-30,-18,-46,-29,-5,-19,-10,-21,31,10,-43,-1,-64,-34,-28,-26,-17,72,5,44,-7,57,70,87,37,-50,-23,60,-25,17,-88,46,9,66,73, 
};
const TfArray<4, int> tensor_dimension36 = { 4, { 51,1,1,51 } };
const TfArray<51, float> quant36_scale = { 51, { 0.0038457410410046577, 0.0030741174705326557, 0.0038142015691846609, 0.0058148191310465336, 0.0029101683758199215, 0.0021718607749789953, 0.002376871183514595, 0.0040237135253846645, 0.0039838762022554874, 0.0032328551169484854, 0.0023842207156121731, 0.0015375660732388496, 0.003348831320181489, 0.0051322625949978828, 0.0025974742602556944, 0.0025809402577579021, 0.0044304491020739079, 0.0045803072862327099, 0.0022390321828424931, 0.0033431313931941986, 0.0032003913074731827, 0.0026142408605664968, 0.0032627230975776911, 0.002203378826379776, 0.0024252545554190874, 0.0031928312964737415, 0.003909252118319273, 0.0028759373817592859, 0.0031299698166549206, 0.0037667069118469954, 0.0044826343655586243, 0.0020667982753366232, 0.0033466878812760115, 0.0024445648305118084, 0.0026443712413311005, 0.00348072056658566, 0.0033902833238244057, 0.0037762564606964588, 0.0041727609932422638, 0.0058681773953139782, 0.0025688405148684978, 0.0015889194328337908, 0.0060483007691800594, 0.003115600673481822, 0.0037324402946978807, 0.0057657225988805294, 0.0026705057825893164, 0.0022301445715129375, 0.003848229069262743, 0.006210059393197298, 0.0034001825843006372, } };
const TfArray<51, int> quant36_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int32_t tensor_data37[51] = { -2196, 10229, 3348, 426, -5799, 8682, 3327, 4383, 1514, -1535, 420, 15276, 2755, 19527, 2652, 11080, 7495, -3325, -4072, 1124, 4065, -1422, 9293, 28489, -7635, 6488, 10225, 4967, 5551, 11741, 8444, 6955, 15955, 9004, -1425, -1741, -1779, 9544, 5490, -9873, -3884, 20342, 3817, 7543, 4467, 13340, -581, 792, 8236, -9654, -5293, };
const TfArray<1, int> tensor_dimension37 = { 1, { 51 } };
const TfArray<51, float> quant37_scale = { 51, { 9.0488028945401311e-05, 7.233217911561951e-05, 8.9745917648542672e-05, 0.00013681927521247417, 6.8474553700070828e-05, 5.1102608267683536e-05, 5.5926382628967986e-05, 9.4675611762795597e-05, 9.3738264695275575e-05, 7.6067182817496359e-05, 5.6099310313584283e-05, 3.6178025766275823e-05, 7.8796030720695853e-05, 0.00012075911945430562, 6.111703987699002e-05, 6.0728008975274861e-05, 0.00010424586071167141, 0.00010777193529065698, 5.2683109970530495e-05, 7.8661920269951224e-05, 7.5303323683328927e-05, 6.151154957478866e-05, 7.6769960287492722e-05, 5.1844210247509181e-05, 5.7064815337071195e-05, 7.512544107157737e-05, 9.1982401499990374e-05, 6.7669119744095951e-05, 7.3646348027978092e-05, 8.8628396042622626e-05, 0.00010547375131864101, 4.863054709858261e-05, 7.8745601058471948e-05, 5.7519173424225301e-05, 6.2220504332799464e-05, 8.189930667867884e-05, 7.9771372838877141e-05, 8.8853092165663838e-05, 9.8182616056874394e-05, 0.00013807477080263197, 6.0443308029789478e-05, 3.7386340409284458e-05, 0.00014231295790523291, 7.3308256105519831e-05, 8.7822125351522118e-05, 0.00013566405687015504, 6.2835431890562177e-05, 5.2473991672741249e-05, 9.0546571300365031e-05, 0.00014611904043704271, 8.0004298069979995e-05, } };
const TfArray<51, int> quant37_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int8_t tensor_data38[1*3*3*51] = { 
  /* [0][0][][] */ 39,3,24,-8,20,-9,-29,2,5,-2,-43,104,17,-48,127,127,-25,-87,-28,-66,-25,23,-9,11,10,-48,36,-127,127,105,127,127,-5,3,108,-18,-59,38,51,112,9,-14,127,-14,-28,-25,-105,60,54,-30,-39, 127,-13,-3,-31,10,2,10,52,-68,42,66,28,0,-80,-3,3,127,108,63,27,-76,30,25,49,11,127,25,-41,67,31,-78,-21,34,-29,-64,-67,75,-31,37,-71,-57,-5,34,-52,-116,-42,127,44,-29,-8,127, -22,21,-50,54,-5,-22,-58,-5,85,-55,-104,17,4,54,68,16,-45,127,-42,-4,-37,11,86,48,-77,82,127,-90,59,-65,6,21,127,127,-16,-23,127,-11,6,-127,-17,71,101,-38,-68,81,9,-29,35,5,-43, 
  /* [0][1][][] */ 67,-18,127,-20,-44,-25,57,0,127,3,-104,6,-82,63,-5,-12,-37,-44,127,-15,-45,67,1,41,-76,-37,70,36,39,-39,-38,-51,-5,-55,-68,48,49,-17,-28,17,-72,-16,110,127,19,-65,-2,-36,75,60,4, 3,-44,-41,-17,-21,-34,-77,127,-6,127,24,16,-58,127,85,50,5,92,-34,64,-89,26,-127,-67,-68,-27,17,-79,-44,127,-40,-89,-7,-16,7,127,106,-119,-18,-109,33,-87,17,6,-127,96,95,127,127,-8,-20, -11,127,-41,44,16,-31,127,-39,-5,-13,120,127,46,7,58,-56,42,75,80,-28,-22,127,114,31,88,-113,-19,-33,-18,-65,-42,-15,-29,-12,-21,-41,17,37,127,-57,71,-89,-15,-44,-55,66,96,-37,-31,-36,-34, 
  /* [0][2][][] */ -9,-47,-9,-37,-64,127,2,-26,2,-44,-106,-42,-71,-94,-45,9,-11,-33,-58,125,68,-45,21,-91,-4,-38,3,65,-35,-44,-45,-52,-19,105,7,106,-54,-19,-46,-95,20,-8,35,-5,11,-11,63,-127,-3,-127,26, -9,-43,-36,127,-51,33,-64,-9,-6,0,-68,-99,-127,15,-3,-1,11,80,-29,127,-127,31,-41,-27,43,-68,0,-43,-42,64,7,21,-12,-41,127,2,-20,-19,-8,-56,127,127,-6,-21,-108,127,3,-82,-19,127,-1, -15,-2,-59,2,127,-53,5,-23,-34,34,-127,-71,-62,123,-6,48,-21,97,-13,62,52,34,116,127,127,-102,22,-36,-10,-6,-27,53,16,0,-7,3,19,127,-26,-111,-30,-16,-74,-59,-108,65,2,28,78,98,-38, 
};
const TfArray<4, int> tensor_dimension38 = { 4, { 1,3,3,51 } };
const TfArray<51, float> quant38_scale = { 51, { 0.0073802964761853218, 0.010274599306285381, 0.007933485321700573, 0.0068892692215740681, 0.0092278262600302696, 0.01253240555524826, 0.007680804468691349, 0.007806447334587574, 0.0083055989816784859, 0.01083243265748024, 0.0074475137516856194, 0.010824870318174362, 0.0070169549435377121, 0.0054498538374900818, 0.0096722031012177467, 0.012691467069089413, 0.0088241472840309143, 0.0040004830807447433, 0.01240573450922966, 0.0066709904931485653, 0.0075570829212665558, 0.0092489654198288918, 0.005144710186868906, 0.0091183166950941086, 0.011211911216378212, 0.0088874306529760361, 0.011268574744462967, 0.00811766367405653, 0.0094050653278827667, 0.0050989659503102303, 0.0087429704144597054, 0.010878258384764194, 0.011751365847885609, 0.010647989809513092, 0.0088640758767724037, 0.0074811112135648727, 0.0092932255938649178, 0.0082558272406458855, 0.0088258730247616768, 0.0036696712486445904, 0.013180448673665524, 0.015866080299019814, 0.0043951608240604401, 0.010732407681643963, 0.0071400180459022522, 0.0037731400225311518, 0.0072143129073083401, 0.0085804983973503113, 0.0096548441797494888, 0.010745207779109478, 0.010115650482475758, } };
const TfArray<51, int> quant38_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 3 };
const ALIGN(16) int32_t tensor_data39[51] = { 109, 3780, -319, -1163, -426, -652, 4920, -1430, -390, -1820, 2901, 2771, 9188, -4478, 1417, -3628, -1158, -5569, 1284, -2125, 10683, -4988, -3098, -2086, 2950, 2389, -2881, 7338, -1157, -2564, 4050, 2691, 88, 1502, 615, -722, -561, 3485, -1568, 10662, -531, 287, -12586, 631, 9953, -4453, -3649, 1889, -6387, -6136, -1634, };
const TfArray<1, int> tensor_dimension39 = { 1, { 51 } };
const TfArray<51, float> quant39_scale = { 51, { 0.00017365404346492141, 0.00024175528960768133, 0.00018667025142349303, 0.00016210044850595295, 0.00021712532907258719, 0.00029488012660294771, 0.00018072481907438487, 0.00018368111341260374, 0.00019542586233001202, 0.00025488078244961798, 0.00017523561837151647, 0.00025470284163020551, 0.00016510482237208635, 0.00012823185534216464, 0.00022758125851396471, 0.00029862276278436184, 0.00020762700296472758, 9.4129012722987682e-05, 0.00029189963242970407, 0.00015696448099333793, 0.00017781372298486531, 0.00021762271353509277, 0.00012105200585210696, 0.0002145486359950155, 0.0002638096921145916, 0.00020911601313855499, 0.00026514293858781457, 0.00019100385543424636, 0.00022129566059447825, 0.0001199756734422408, 0.00020571696222759783, 0.00025595902116037905, 0.00027650274569168687, 0.00025054093566723168, 0.00020856648916378617, 0.0001760261511662975, 0.00021866413590032607, 0.00019425476784817874, 0.00020766760280821472, 8.6345207819249481e-05, 0.00031012820545583963, 0.00037331954808905721, 0.00010341555025661364, 0.0002525272429920733, 0.0001680004206718877, 8.8779765064828098e-05, 0.00016974854224827141, 0.00020189408678561449, 0.00022717281535733491, 0.00025282840942963958, 0.000238015316426754, } };
const TfArray<51, int> quant39_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int8_t tensor_data40[51*1*1*51] = { 
  /* [0][0][][] */ -49,2,-55,-19,60,-62,-3,38,-34,-19,-24,35,23,101,31,127,-6,77,-71,30,20,39,72,54,7,-13,-20,7,7,8,-40,-55,-7,-83,-42,-77,-35,-4,-52,60,1,-8,-30,-31,-60,35,36,-63,-94,17,4, 
  /* [1][0][][] */ 21,9,18,4,13,76,-29,34,16,-37,-8,53,-9,-28,8,-51,12,-127,52,-11,-6,6,22,-15,-34,-6,-32,-19,2,-10,28,15,-42,-49,-38,19,71,2,2,-23,33,66,-2,-53,11,-7,34,7,-67,-38,0, 
  /* [2][0][][] */ 13,-25,-76,-9,34,17,16,-27,-109,60,-30,18,54,41,-59,54,-9,36,-38,5,20,22,12,93,11,38,89,76,12,32,31,-23,-6,5,8,-12,1,27,-21,5,-117,-48,-71,-17,-79,127,-53,60,7,-69,42, 
  /* [3][0][][] */ -4,39,-70,16,20,59,-41,-96,-34,-60,47,-45,-39,18,-28,-64,-75,43,-13,56,127,13,-4,65,7,52,-26,-83,-17,57,79,-64,-3,0,12,26,-47,-104,0,-39,-69,-16,-42,20,27,18,3,-23,-49,-47,3, 
  /* [4][0][][] */ 14,16,-53,-6,-23,56,-67,33,87,45,20,-48,-3,24,-127,3,-70,-9,16,-29,-23,9,-19,54,-7,16,-21,-40,38,-59,-51,65,-9,-39,-18,1,17,20,12,3,-22,38,3,-33,69,39,13,16,-18,-105,25, 
  /* [5][0][][] */ 7,-42,-73,-17,86,-57,-58,-73,-55,-9,7,-48,82,78,-56,-3,36,18,-26,-110,4,-51,-20,60,112,-12,-50,-18,6,-72,-45,-37,47,-59,53,-68,57,-35,71,4,41,127,-88,-19,13,0,-60,-15,-1,-48,34, 
  /* [6][0][][] */ 67,63,-58,-48,-94,14,5,36,-37,-67,40,26,61,65,-38,49,-127,-84,6,-34,52,23,-76,-114,-55,-17,46,-47,-86,-2,32,-33,-113,-95,14,56,31,18,-38,81,94,17,-42,-6,61,37,37,61,-38,-97,23, 
  /* [7][0][][] */ 87,-36,-38,-20,12,-36,23,-14,80,-26,-41,-46,17,-74,-2,-59,42,-113,72,-81,50,31,-12,84,-8,107,-44,42,127,-8,13,-34,0,76,-4,-11,-55,-49,-19,-22,-12,-126,31,39,-2,33,-3,54,11,10,-46, 
  /* [8][0][][] */ -31,74,-19,11,-111,44,-33,26,-42,-31,-15,-37,60,33,51,66,91,-40,127,42,-4,-56,27,0,-55,-45,-24,-98,-22,12,105,85,34,22,-46,-1,17,31,1,-23,-17,1,31,-16,-5,-37,-28,47,22,32,63, 
  /* [9][0][][] */ -69,82,-99,89,20,-17,-9,34,12,77,-3,80,57,31,-26,-37,-61,-42,-16,-79,33,-30,-45,90,-46,-127,-77,-100,-55,37,-28,-40,103,-122,-11,68,79,122,82,-60,-68,71,-69,-72,-36,-42,-50,-38,48,-44,42, 
  /* [10][0][][] */ 55,2,74,82,26,-100,43,-34,8,-22,-30,-4,28,-10,-2,-54,-57,42,24,-1,61,-71,-18,-2,69,56,-34,-27,18,0,42,-50,77,22,90,-8,3,-47,82,-50,-25,12,-39,71,-127,-55,-10,-37,-44,41,-51, 
  /* [11][0][][] */ -46,123,55,-8,-55,15,-11,92,55,8,-14,-127,32,103,-19,-72,93,-62,68,19,-110,-79,-98,96,-89,18,-66,13,-43,37,-99,50,44,-40,9,7,-93,42,-10,51,-118,63,-83,-53,-5,-32,65,65,-39,-105,-12, 
  /* [12][0][][] */ 60,53,-4,16,-34,-47,47,-8,18,18,15,13,-18,-15,-50,-27,12,2,-39,5,-127,32,-43,10,84,88,20,-53,-40,-72,19,-18,29,8,9,-48,47,44,-41,-97,-27,52,22,-47,29,-20,43,-37,-5,-6,86, 
  /* [13][0][][] */ -54,-16,-32,-43,-31,55,-97,-35,3,-7,43,9,44,-10,18,-18,35,-51,-2,41,-30,19,28,-127,14,-18,28,24,-49,18,-34,26,-42,-99,23,13,11,20,-4,61,22,-45,-6,6,25,-18,29,41,34,26,-2, 
  /* [14][0][][] */ -56,64,-57,-26,-42,13,-45,96,-13,2,-95,-5,-23,-3,18,51,16,-7,8,45,-51,0,84,-3,-66,-60,17,-81,68,-30,59,-42,24,-12,-127,-26,-84,60,21,4,-60,73,81,-58,32,-3,3,27,14,-53,-58, 
  /* [15][0][][] */ -112,-6,-11,-14,-29,-6,57,7,13,11,35,91,44,-105,34,10,122,-53,-21,-4,-8,34,-46,6,10,42,-31,90,-109,33,-101,-15,-127,-16,3,22,-8,38,-40,-35,-43,21,41,7,-72,97,56,41,59,91,-32, 
  /* [16][0][][] */ 23,-69,47,127,-84,-30,48,-39,-57,-31,14,20,-17,29,-71,42,-84,-53,-38,36,-53,2,64,-12,-27,15,8,-17,31,-91,26,9,-49,-14,-21,43,5,-1,1,-33,-19,-54,79,77,16,3,-70,-39,-56,38,-8, 
  /* [17][0][][] */ 27,-15,-1,-21,-20,6,55,0,-73,43,-32,25,15,30,41,39,-37,67,-41,-17,10,22,67,-2,37,73,-10,4,-74,26,-18,17,54,46,-29,-32,11,-127,-86,-34,-49,-62,-30,-58,42,-2,95,-26,-25,15,45, 
  /* [18][0][][] */ 49,43,3,-42,-11,63,2,15,28,-24,-13,61,-127,-28,-72,-19,15,-42,-22,64,-5,-18,44,80,3,-15,-16,4,28,-46,2,55,-35,-49,7,18,44,5,-42,17,-26,-35,-6,27,-12,-22,-19,4,-43,-8,14, 
  /* [19][0][][] */ -60,-1,34,95,-27,83,80,22,0,-22,22,38,-9,41,-20,31,-127,43,67,-85,5,-5,-76,-24,20,-75,-38,39,84,-11,-28,83,80,-88,0,99,-15,57,14,-7,-48,76,86,-56,35,-61,-103,101,-14,-88,-49, 
  /* [20][0][][] */ 64,-32,-7,104,-32,33,5,51,60,-25,-33,-19,-28,76,-25,-127,-69,115,23,-93,53,-3,33,11,8,-26,-27,110,-92,-30,41,-14,35,-48,-7,17,-75,-27,77,6,6,23,20,-22,-55,-23,-38,-11,11,16,-35, 
  /* [21][0][][] */ 0,-10,-4,1,69,-127,84,-75,-21,-69,56,24,29,-26,43,-57,-9,27,101,19,124,-42,-64,-13,-4,-15,-21,33,-33,59,-3,30,-45,54,17,-31,33,49,78,102,15,10,89,15,-69,54,-21,6,5,41,-117, 
  /* [22][0][][] */ 1,-1,16,-7,36,7,44,32,-84,-31,24,33,-29,38,-72,-56,-25,-3,6,-61,19,43,-45,-12,127,-2,48,-1,25,-42,-55,42,69,23,13,20,30,16,45,22,40,52,79,39,0,-41,-40,-45,0,19,-9, 
  /* [23][0][][] */ 19,46,1,-10,7,-4,-13,-55,4,-9,48,-86,8,-62,62,-113,-5,74,-11,-30,73,24,89,39,-16,28,-8,49,-89,36,-2,76,-9,11,69,71,-74,-27,6,127,-10,66,83,-125,-38,-78,-8,46,109,-8,-21, 
  /* [24][0][][] */ -95,50,-25,-21,40,96,-52,-16,-37,-6,-116,17,81,-83,14,68,4,76,-98,55,-34,-127,75,-68,-48,-11,22,26,-78,48,-41,62,-9,-59,-35,60,-65,-79,-126,68,41,-96,124,-64,53,-25,86,17,-70,101,-4, 
  /* [25][0][][] */ 36,-70,-54,-42,110,-63,-43,15,103,-61,101,-17,6,127,-68,-18,-20,-19,69,-76,-51,-39,84,102,-83,-69,88,51,-29,-88,-53,55,84,-44,35,54,22,83,-89,27,40,-34,17,-27,-3,-22,-18,117,80,24,86, 
  /* [26][0][][] */ -27,-56,-20,-88,-1,-19,19,-43,50,-50,-33,-54,-78,-23,-9,7,73,-16,19,-7,74,48,-20,-20,76,-70,16,34,-7,-8,18,5,-18,57,-40,-46,55,-99,49,-37,127,-11,30,-39,-65,35,71,-26,37,39,-30, 
  /* [27][0][][] */ 38,-127,36,-96,-96,52,46,-72,73,-81,75,-21,8,-17,-21,-18,-75,-38,42,-18,89,-70,-43,-62,-42,-59,-27,-116,19,-19,-97,96,-69,46,-36,-38,10,-109,-23,-22,15,-8,-36,-22,-13,-42,-46,68,-34,-15,-62, 
  /* [28][0][][] */ -83,-9,-107,61,-15,-94,22,-3,16,111,17,-127,17,61,31,10,33,-14,-11,-2,-69,63,8,14,34,-47,-30,40,-73,-84,-102,-106,-74,27,-45,2,56,29,6,3,-89,-34,-68,-53,-58,3,17,-11,1,-43,-53, 
  /* [29][0][][] */ 62,4,7,-22,-5,-9,42,-44,2,-42,52,-60,-23,43,-54,14,-68,-2,-18,40,-55,20,54,4,3,25,-22,11,-66,-47,27,1,33,-127,81,96,-65,-30,-9,12,-12,26,20,67,58,-22,-45,-76,33,-29,12, 
  /* [30][0][][] */ -25,-29,-3,67,-67,-52,25,-52,76,-19,45,72,-2,-9,54,59,-38,56,4,-79,-53,88,56,29,-80,16,-20,-71,57,-5,88,26,3,26,-21,28,38,25,-42,11,7,-26,-127,57,71,-8,-91,-4,-13,-28,93, 
  /* [31][0][][] */ -36,-77,32,14,1,-38,-15,62,-72,-103,-53,22,62,18,-36,-11,-27,82,38,21,87,-46,1,17,43,8,36,-28,-96,-17,16,42,55,-13,93,2,-127,12,-3,35,11,-71,-7,-47,-60,-33,-51,28,3,43,-8, 
  /* [32][0][][] */ 18,79,29,80,59,-3,16,-18,11,-74,118,-34,29,14,-80,-30,-41,11,-74,-127,6,-50,37,-10,29,24,-43,30,-58,-73,-35,21,-26,-2,50,-42,-4,-58,50,-2,-22,7,-33,-38,51,-43,-13,5,-111,0,47, 
  /* [33][0][][] */ -40,37,107,-26,11,94,-3,24,32,-21,82,8,-108,-25,-25,127,50,22,-9,-28,-25,6,-68,26,43,-20,-70,-63,38,-25,5,-50,-8,65,-108,-43,-8,-12,44,-103,55,15,58,-55,41,-29,27,4,-32,-69,26, 
  /* [34][0][][] */ 27,50,16,-49,-127,-30,-80,-22,-1,-9,-32,52,-31,41,-66,40,63,-70,-71,-18,-34,-66,-82,-9,52,-56,124,-21,11,-2,-64,5,-36,-50,-89,46,-2,-82,-111,1,-13,19,-48,24,-68,-43,12,99,11,39,14, 
  /* [35][0][][] */ 26,-34,-21,-33,-22,112,43,-55,-65,-82,-29,70,29,-77,10,36,4,-7,-8,-30,5,81,-127,-61,-85,-22,44,14,21,46,0,-15,6,0,-14,-27,-29,-26,-60,23,25,-68,20,-24,35,-22,10,32,46,-89,26, 
  /* [36][0][][] */ -4,-14,76,-18,60,116,115,84,27,27,-37,-54,91,-24,61,-5,29,97,-46,-103,10,55,127,41,-12,-21,-69,49,20,19,-87,6,28,39,-36,78,38,10,17,39,-96,-32,12,6,-70,74,0,15,-9,24,-23, 
  /* [37][0][][] */ -2,8,-38,-109,1,-35,84,-17,-23,61,79,-47,-23,-38,14,48,63,-25,-34,-49,1,52,-45,32,-29,-34,-7,78,-21,26,-21,6,-28,16,-70,66,48,-68,7,24,-13,-127,-28,77,-27,43,2,-54,-34,-71,-8, 
  /* [38][0][][] */ 106,-51,33,-54,-74,-33,10,79,-79,-49,15,110,45,-1,-24,-24,-76,-89,-57,-36,-17,-12,-56,-38,-54,-127,-82,21,42,18,-8,75,-76,-23,34,-18,50,-89,-31,-43,53,-57,49,54,-122,-87,-54,28,57,127,-24, 
  /* [39][0][][] */ -127,-41,-48,-17,-9,-65,55,-10,-82,33,10,-21,42,-7,-35,-33,111,-35,17,-42,-39,30,-30,-30,20,-62,-3,27,-38,29,-1,42,-3,32,2,-33,-53,-50,-3,38,-2,27,15,61,20,14,14,-54,83,-21,-28, 
  /* [40][0][][] */ 30,-47,125,85,-85,-22,6,-53,-63,-127,-7,45,-68,63,72,15,-69,-111,-10,-49,41,-32,-27,72,33,-20,-46,39,35,50,40,92,7,-105,33,-94,54,10,-45,11,106,-31,46,-26,121,-9,-12,12,105,-94,66, 
  /* [41][0][][] */ -52,-36,-75,9,52,25,-99,-48,-17,16,33,-78,-103,70,-127,-15,-84,63,-51,80,49,-74,-31,-75,-125,24,95,-22,-44,-114,107,46,19,54,6,-89,18,-26,35,-23,50,83,58,15,-27,93,-16,-80,11,-20,80, 
  /* [42][0][][] */ 17,42,-18,-10,-28,-43,14,59,105,-90,46,-22,17,-10,-63,0,-36,-22,-60,-2,-10,127,-27,98,-5,-56,24,-89,16,7,-45,-50,43,-43,-67,-12,45,79,32,-80,90,74,33,-52,63,72,60,-33,-63,-19,-17, 
  /* [43][0][][] */ 8,-48,-116,-6,-22,2,37,37,31,-1,26,-16,11,32,17,-31,-76,75,51,-23,5,-59,-2,64,-86,-24,127,-2,-37,-31,97,26,11,-63,8,-73,2,-33,17,-3,56,28,76,6,-7,-26,-84,12,-11,11,86, 
  /* [44][0][][] */ -9,1,29,6,18,-3,-30,-14,-32,38,38,5,29,-25,-3,-62,-40,18,-22,-2,-69,6,34,-16,-30,-2,-27,-16,11,59,-30,61,19,-7,-53,8,2,-59,30,9,-45,-42,-28,-70,20,-114,93,-62,-127,-39,-11, 
  /* [45][0][][] */ 8,-27,18,-8,-2,-49,-3,-14,39,-23,-7,48,11,-19,-16,15,4,-67,29,-51,-1,20,10,-12,-7,-50,24,-49,-11,55,53,-45,59,-64,-127,-62,50,4,74,-17,32,52,61,-52,-9,-17,41,-45,-8,-7,-44, 
  /* [46][0][][] */ -30,72,-29,-25,-79,-41,43,58,-33,-114,13,19,-6,-2,14,39,56,-17,57,25,-46,-46,-106,53,-18,-47,-27,35,-50,76,-39,-22,14,-43,-47,-47,30,-54,127,-68,-35,49,-42,-3,-66,1,8,31,-92,12,3, 
  /* [47][0][][] */ 8,27,107,49,-82,2,19,-35,-35,89,-68,-20,-31,1,46,-104,16,7,-64,-19,67,-23,-16,30,-38,-58,-98,-46,-39,100,88,61,41,2,15,-44,55,-60,-6,18,0,22,28,-42,-38,-5,-111,127,49,75,-49, 
  /* [48][0][][] */ 8,22,-40,30,71,11,-36,-20,-1,-16,-64,-23,41,-3,-74,40,-4,10,1,-29,-71,58,-106,-65,-19,57,-5,-37,-54,-55,-27,-29,85,-58,5,-6,-3,55,-14,-39,-61,21,-51,-24,-50,6,11,68,-26,127,-29, 
  /* [49][0][][] */ -42,0,-8,-35,-43,-49,-43,-72,-21,-29,25,76,-3,-43,-55,39,29,-127,-78,-65,-4,-15,15,49,27,-56,31,-17,54,-43,-24,13,-46,-51,10,-1,-12,56,40,14,15,80,-55,42,35,31,78,-48,-15,38,-59, 
  /* [50][0][][] */ 39,113,-19,-49,-32,-91,14,28,66,-38,1,40,56,-6,12,-15,-58,6,77,127,12,85,-13,-40,-104,55,31,8,0,-12,-21,72,0,-38,-85,-53,117,-56,-25,-8,-13,-31,52,78,40,-80,-38,2,-27,-58,-127, 
};
const TfArray<4, int> tensor_dimension40 = { 4, { 51,1,1,51 } };
const TfArray<51, float> quant40_scale = { 51, { 0.0036422668490558863, 0.0034906619694083929, 0.0031754570081830025, 0.005823981948196888, 0.0042579318396747112, 0.0033877210225909948, 0.001723464229144156, 0.0036524389870464802, 0.0023009013384580612, 0.0032002783846110106, 0.005143619142472744, 0.0027690872084349394, 0.0028873423580080271, 0.0023902268148958683, 0.0051549207419157028, 0.004125822801142931, 0.0038011991418898106, 0.001810882706195116, 0.0044135428033769131, 0.0035942457616329193, 0.0039578955620527267, 0.0043235779739916325, 0.0066672940738499165, 0.0037025697529315948, 0.0030097253620624542, 0.002381111029535532, 0.0026935050264000893, 0.0029241412412375212, 0.0021912644151598215, 0.0040111932903528214, 0.004615243524312973, 0.0037706289440393448, 0.0034883900079876184, 0.0036308683920651674, 0.0068914224393665791, 0.003498132573440671, 0.001947114709764719, 0.0028327624313533306, 0.0033954782411456108, 0.0052292519249022007, 0.0017867083661258221, 0.0019769798964262009, 0.0033818718511611223, 0.0031363607849925756, 0.0020803420338779688, 0.0052474071271717548, 0.0040800129063427448, 0.0038097493816167116, 0.0041915462352335453, 0.0050849630497395992, 0.0040176156908273697, } };
const TfArray<51, int> quant40_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int32_t tensor_data41[51] = { 5550, 5842, -2216, 5851, 12026, 8911, 21034, -3009, 1779, 9037, -2812, 18295, 7042, 11264, 7863, -4565, 16710, 8204, 6705, -5226, 1217, -12781, -6042, -12919, 7641, -8406, 9235, 24599, 26837, 8524, -2910, 3714, 13699, 6353, 20110, 5776, -6583, 938, 17148, 2777, 7746, 23071, 6199, 84, 23580, 1938, 7530, -1125, 7254, 9008, -3509, };
const TfArray<1, int> tensor_dimension41 = { 1, { 51 } };
const TfArray<51, float> quant41_scale = { 51, { 8.5700397903565317e-05, 8.2133221440017223e-05, 7.471663411706686e-05, 0.00013703487638849765, 0.00010018663306254894, 7.9711084254086018e-05, 4.0552098653279245e-05, 8.5939740529283881e-05, 5.4138854466145858e-05, 7.530066795879975e-05, 0.00012102633627364412, 6.5154992626048625e-05, 6.7937471612822264e-05, 5.6240631238324568e-05, 0.0001212922579725273, 9.7078183898702264e-05, 8.9439978182781488e-05, 4.2609004594851285e-05, 0.00010384806955698878, 8.4570492617785931e-05, 9.3126953288447112e-05, 0.00010173124610446393, 0.00015687750419601798, 8.7119289673864841e-05, 7.0817070081830025e-05, 5.6026143283816054e-05, 6.3376588514074683e-05, 6.880332512082532e-05, 5.1559163694037125e-05, 9.4381022790912539e-05, 0.00010859396570594981, 8.8720684289000928e-05, 8.2079764979425818e-05, 8.5432198829948902e-05, 0.00016215111827477813, 8.2309001300018281e-05, 4.5814464101567864e-05, 6.6653235990088433e-05, 7.9893608926795423e-05, 0.00012304123083595186, 4.2040199332404882e-05, 4.65171760879457e-05, 7.9573459515813738e-05, 7.3796727519948035e-05, 4.894922676612623e-05, 0.00012346840230748057, 9.6000308985821903e-05, 8.9641165686771274e-05, 9.8624615930020809e-05, 0.00011964618897764012, 9.4532137154601514e-05, } };
const TfArray<51, int> quant41_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
const ALIGN(16) int8_t tensor_data42[1*3*3*51] = { 
  /* [0][0][][] */ 48,15,127,127,42,-50,26,110,-87,-18,-16,-11,98,56,-39,127,-20,103,127,-2,-84,-23,31,10,-35,127,20,39,0,15,11,127,-33,9,-15,-97,-98,-33,-51,-12,-60,76,127,-5,109,-75,-16,58,-48,74,-93, 40,-50,-25,68,52,112,-23,19,7,-81,-65,-21,15,14,-24,-91,15,-100,52,39,-95,-43,-63,-71,-32,-40,127,31,-71,9,-38,-65,92,81,-16,45,80,44,-6,58,31,127,49,19,65,68,63,-3,127,-95,28, 19,-57,-75,2,-31,-90,127,-10,-93,-46,9,-31,93,50,63,94,79,93,-37,91,-63,127,-104,-27,-52,-22,65,-8,-14,13,17,16,86,34,11,-13,-100,-51,-16,-25,103,80,-81,86,31,-27,-16,127,-94,-75,12, 
  /* [0][1][][] */ 38,6,32,-23,127,33,-35,127,127,-8,29,15,127,46,-68,124,88,-104,64,5,-71,-15,-8,67,-36,42,29,-61,73,22,113,-103,0,3,-39,68,-58,88,-55,113,-96,-36,-10,-92,6,44,-29,-60,-22,54,-18, -13,-111,-19,54,1,121,16,-29,105,-68,86,7,31,-97,-40,10,-5,-71,12,127,-86,-25,-8,127,11,-38,-14,127,11,28,-25,-37,127,-8,-43,-73,69,-43,-10,66,74,-31,10,0,127,127,33,103,60,35,-43, 32,-16,73,30,-49,-127,126,22,-19,-16,70,-15,-37,-127,84,-54,-26,-66,-34,6,-32,5,-74,-33,-31,-48,-22,-25,-14,8,-56,-10,14,123,60,123,-127,40,79,-82,127,-121,-77,80,-10,101,-19,81,-106,-84,45, 
  /* [0][2][][] */ 127,127,-59,16,79,-5,-48,-52,-54,-127,-64,127,-71,8,127,-42,127,-51,-89,-49,43,80,127,-91,-57,-76,15,-25,127,67,-86,-42,13,-127,-46,-5,-12,-96,-127,127,8,90,-18,127,15,-63,127,-35,9,127,7, -10,-38,-4,-41,-53,-10,-30,70,-74,-45,127,23,-36,-20,-31,-83,-36,-73,-20,-34,-16,15,21,110,127,58,-21,-17,7,127,127,-38,60,58,-7,-58,-56,127,-13,-33,-22,29,-64,73,-63,-12,-36,-50,-30,23,33, -20,-99,-47,-22,-80,102,-62,36,-50,49,49,-14,-45,-17,74,-23,-32,127,104,-18,-127,-6,0,46,-18,-37,-43,-20,-27,-1,47,-53,76,2,127,127,-17,29,39,-54,99,67,-30,-6,-71,-53,-78,-14,-38,-29,127, 
};
const TfArray<4, int> tensor_dimension42 = { 4, { 1,3,3,51 } };
const TfArray<51, float> quant42_scale = { 51, { 0.0078593092039227486, 0.0078545790165662766, 0.0093218600377440453, 0.0080421371385455132, 0.0066081038676202297, 0.005835268646478653, 0.01061865221709013, 0.010018709115684032, 0.010414916090667248, 0.0070158997550606728, 0.0050195921212434769, 0.010379022918641567, 0.008226051926612854, 0.021588148549199104, 0.0063525047153234482, 0.006212146021425724, 0.014127833768725395, 0.012418343685567379, 0.010627033188939095, 0.0063065867871046066, 0.0053344550542533398, 0.0067513263784348965, 0.0058852671645581722, 0.0065457536838948727, 0.0067931967787444592, 0.009655405767261982, 0.0092160291969776154, 0.0091587034985423088, 0.0094924131408333778, 0.0084354979917407036, 0.0065891272388398647, 0.0069408789277076721, 0.0069815879687666893, 0.005943740252405405, 0.0048470734618604183, 0.0066411001607775688, 0.0089336475357413292, 0.013970121741294861, 0.010341963730752468, 0.0061007142066955566, 0.0071945241652429104, 0.0063107055611908436, 0.0074968012049794197, 0.0088497847318649292, 0.010075178928673267, 0.006285238079726696, 0.0082802744582295418, 0.0047221132554113865, 0.013220435008406639, 0.0053990338928997517, 0.0062052072025835514, } };
const TfArray<51, int> quant42_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 3 };
const ALIGN(16) int32_t tensor_data43[51] = { -6432, 6119, 1493, -3310, 3343, -2548, -200, -3410, 3071, 13338, -2943, -1934, 564, 3824, -17, -2383, -1030, 4751, -301, -422, 15128, 2706, 1301, -1612, 2644, 2220, -2768, -1048, -1332, -5455, 973, 7839, -6711, -551, -4834, -2106, 1850, -1053, -469, 119, -7305, 1203, 2413, -4009, -3592, -4426, -904, 736, -4175, 2718, -4955, };
const TfArray<1, int> tensor_dimension43 = { 1, { 51 } };
const TfArray<51, float> quant43_scale = { 51, { 0.00018492492381483316, 0.00018481363076716661, 0.00021933788957539946, 0.00018922676099464297, 0.0001554847985971719, 0.00013730043428950012, 0.00024985065101645887, 0.00023573433281853795, 0.00024505684268660843, 0.00016507999680470675, 0.00011810805153800175, 0.00024421230773441494, 0.00019355416588950902, 0.00050795642891898751, 0.00014947069576010108, 0.00014616813859902322, 0.00033241961500607431, 0.00029219631687738001, 0.0002500478585716337, 0.00014839027426205575, 0.00012551659892778844, 0.00015885474567767233, 0.00013847688387613744, 0.00015401773271150887, 0.00015983992489054799, 0.00022718602849636227, 0.00021684775128960609, 0.00021549890516325831, 0.00022335090034175664, 0.00019848230294883251, 0.00015503828763030469, 0.00016331480583176017, 0.00016427265654783696, 0.00013985270925331861, 0.0001140487875090912, 0.00015626118693035096, 0.00021020347776357085, 0.00032870876020751894, 0.00024334032787010074, 0.00014354621816892177, 0.00016928292461670935, 0.00014848719001747668, 0.00017639531870372593, 0.0002082302380586043, 0.00023706303909420967, 0.00014788795670028776, 0.00019482999050524086, 0.00011110855120932683, 0.00031106907408684492, 0.00012703609536401927, 0.00014600488066207618, } };
const TfArray<51, int> quant43_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const ALIGN(16) int8_t tensor_data44[51*1*1*51] = { 
  /* [0][0][][] */ -80,51,68,20,23,76,125,-72,126,-16,-49,66,-55,-52,-18,-41,24,80,35,58,-27,26,21,-25,-19,1,-50,52,-8,-21,-74,-19,-94,-82,127,43,-5,64,0,-55,-40,-11,-17,-11,-60,-25,82,69,65,-45,9, 
  /* [1][0][][] */ -32,-5,-49,34,-32,-2,-53,20,-10,26,29,17,-80,11,19,-127,89,17,-22,-4,-62,-31,-86,-3,16,-1,-34,-33,-33,-88,-107,23,21,-11,10,-32,-44,-48,66,-96,26,25,5,11,42,-70,-12,-32,-37,-22,-122, 
  /* [2][0][][] */ 37,97,17,-21,-17,15,-30,-9,-28,-83,-13,-61,42,-22,17,13,-12,-3,9,12,-82,42,-12,28,21,1,-8,9,-26,21,115,-61,-47,-2,56,61,127,11,42,-12,47,28,24,65,6,-68,104,-49,24,54,-44, 
  /* [3][0][][] */ -101,35,-42,20,2,7,10,-70,-41,-80,55,-29,39,-6,-3,-127,-7,59,70,-6,-4,-17,1,-5,-4,91,8,-3,-2,-47,-19,25,-102,-32,24,9,1,36,-25,-68,100,11,-4,-52,-28,5,-4,53,-22,-13,42, 
  /* [4][0][][] */ 7,-47,-4,-8,-18,-25,-17,-82,19,-40,14,7,-12,-55,23,-32,-84,-19,-4,9,-127,-42,2,-54,53,35,19,82,-23,39,7,46,17,-14,-25,-22,-12,-11,-29,10,-28,2,-41,-24,-71,-7,15,-23,39,-52,-36, 
  /* [5][0][][] */ 41,28,64,104,57,-51,-38,-85,-23,-60,-94,-75,8,22,-37,-105,117,-124,-22,17,34,-23,-2,42,-39,-14,-83,9,87,4,-2,-40,-14,2,-5,-44,-18,2,-127,5,21,68,-74,-117,-59,58,39,82,20,39,18, 
  /* [6][0][][] */ -53,-37,-90,-95,10,-1,70,23,-32,7,28,-61,-37,-36,105,-20,50,-30,-87,12,-10,62,-55,30,52,-102,85,-33,-61,-8,-52,-53,52,-7,-19,24,59,-26,-8,-127,-23,-30,-112,89,70,80,-92,-56,-1,18,-5, 
  /* [7][0][][] */ 17,-27,18,-2,-8,50,-54,58,-12,-18,16,2,-41,23,13,-37,-63,4,21,24,-13,-6,127,7,52,56,-49,-11,-80,-86,41,13,-10,-127,-118,28,73,-65,16,-47,-126,41,-28,55,-3,-34,-49,-22,22,-18,-37, 
  /* [8][0][][] */ 59,17,9,-86,9,-50,-15,32,-4,-91,-60,125,46,24,18,-50,-59,7,53,21,45,127,-53,-73,-57,7,-47,-86,-22,-16,-93,49,-33,88,-39,47,77,-66,11,-22,12,112,22,16,-69,20,67,76,81,122,-69, 
  /* [9][0][][] */ 115,-65,-13,40,-26,-94,-4,-100,-21,59,-25,27,27,41,-64,-13,52,41,84,13,3,-17,-27,127,33,-45,-31,0,61,46,24,-32,-34,59,-35,-47,-8,21,5,-41,-85,79,-57,-48,-34,1,-44,58,14,-1,-47, 
  /* [10][0][][] */ -30,-11,-39,-76,-67,8,-6,58,-41,45,-6,46,38,12,-127,-42,9,5,-24,17,-48,-3,41,-13,-6,-7,-23,-17,42,-18,38,7,-46,13,1,15,-28,81,-49,21,-69,-22,5,-60,-20,1,18,-13,-40,1,8, 
  /* [11][0][][] */ 43,101,44,2,-38,-44,20,-40,-31,-121,49,-17,-91,51,-44,48,-20,-4,-31,17,-36,-63,-22,-38,64,25,-57,-3,0,-32,-18,-21,7,3,20,8,-61,-55,34,-52,-80,10,62,-4,-16,-127,8,28,4,85,-31, 
  /* [12][0][][] */ -5,43,-6,-24,-31,-47,22,-62,-67,-101,93,42,-48,10,-41,-33,-29,59,32,69,-111,-32,8,-65,-86,39,46,-34,-17,49,52,-17,111,-79,-61,28,-116,-90,43,35,-65,-4,-2,-12,17,-68,97,9,-127,-89,6, 
  /* [13][0][][] */ 26,-1,40,-57,-6,-63,-56,-25,-52,-107,-40,-9,2,-63,-51,55,-31,14,-49,23,-31,-5,-17,61,17,0,-45,1,107,25,8,5,-77,9,127,65,16,-18,3,61,67,66,37,-48,-106,-49,-40,45,-17,2,57, 
  /* [14][0][][] */ -41,10,20,15,-47,29,-127,-72,8,-33,-2,-66,-59,39,-72,30,-30,36,-112,-12,3,-24,-82,-54,-107,-27,81,-62,-44,-62,21,-37,-17,12,-15,29,16,33,6,-13,40,29,52,-11,57,47,-51,29,80,-45,45, 
  /* [15][0][][] */ -23,14,33,-65,-54,-31,32,-60,62,8,-35,6,18,24,3,-38,46,13,-8,-39,65,-4,36,-49,-63,91,14,38,-50,39,17,-127,-21,30,-37,-66,21,-11,110,12,12,42,-13,18,-39,7,29,-25,66,65,53, 
  /* [16][0][][] */ 47,-31,33,-32,20,4,-37,-127,68,-81,-50,36,-32,-6,-61,31,5,67,23,43,-38,38,-49,41,14,105,-65,22,-56,70,-39,40,59,21,-24,-92,-76,-72,-9,-10,-14,-24,13,-62,-48,2,13,-21,-38,35,-31, 
  /* [17][0][][] */ -8,-46,-48,-65,-62,66,44,65,22,17,-2,16,33,38,-1,31,-34,-31,28,51,25,24,-127,-48,-29,-87,-22,-34,-3,30,-18,18,-21,63,8,-55,-10,4,-40,-17,19,12,6,-1,12,-11,1,30,-43,64,9, 
  /* [18][0][][] */ 28,13,-101,-9,-44,-37,7,35,25,37,-90,-127,-10,28,22,-25,76,38,31,-43,23,-31,-45,49,49,36,6,-13,-68,32,-34,-83,-42,-30,42,-6,30,-18,-7,12,-9,0,-49,33,85,62,-88,33,-18,-44,-90, 
  /* [19][0][][] */ -22,-39,-48,38,-17,15,-115,31,53,-67,-37,-44,-32,-22,9,7,-18,70,-45,-81,-52,37,16,-21,52,-2,-34,59,47,-70,-2,-16,-72,15,-54,77,-44,22,32,-33,-8,127,-47,-8,-100,27,-18,45,59,20,42, 
  /* [20][0][][] */ -24,53,-9,47,57,73,-76,-45,52,8,-5,27,12,-20,-16,76,46,13,-127,78,-32,-62,-24,6,-2,41,-24,37,89,-102,-32,-29,-52,-30,-51,37,-98,9,-33,8,14,42,3,-27,-13,-56,17,44,21,25,24, 
  /* [21][0][][] */ 6,13,-73,-94,62,29,65,-14,-46,46,-47,44,-107,23,-99,-30,-34,-17,-37,-72,100,92,45,-29,-49,4,-16,-23,28,-6,23,53,-21,20,6,22,30,-39,42,16,-19,-80,-127,12,-91,-8,89,-11,-23,-12,23, 
  /* [22][0][][] */ 87,-7,55,61,7,18,13,-52,127,-9,-55,27,-44,-88,15,53,27,33,-43,94,41,49,25,-16,119,-1,68,-4,29,-91,31,-28,46,-27,77,17,-79,-2,-46,-124,-25,-106,-37,-2,-3,8,-42,-14,-4,63,-19, 
  /* [23][0][][] */ -19,72,107,-2,-28,65,3,34,79,-14,-30,54,16,104,35,-16,-43,76,40,-31,26,3,13,12,4,77,9,8,24,-54,86,43,-27,-15,3,29,-64,31,87,-59,39,14,-12,-127,16,-50,25,39,54,14,22, 
  /* [24][0][][] */ 9,-58,-52,27,53,-33,-21,18,-6,28,24,26,9,-52,-57,8,-11,17,-30,127,-25,15,-61,32,8,-5,-19,34,-61,31,-64,22,-14,-21,43,-80,38,-73,74,-59,18,-68,25,43,-29,1,-22,26,-33,-52,-49, 
  /* [25][0][][] */ 26,89,57,-127,-10,49,-34,-61,49,-66,58,-77,46,-36,1,43,59,55,-78,16,33,-127,-24,-17,77,9,-126,-99,-52,-19,12,114,-22,-47,-106,-89,55,-9,-67,-38,12,-46,60,-56,31,-51,-68,53,48,27,-17, 
  /* [26][0][][] */ -90,-69,58,-32,112,-14,-19,-43,68,64,-88,68,65,95,127,-23,-35,78,-14,100,-17,19,6,-11,-61,40,-58,108,67,36,17,6,-18,55,-36,-37,29,-23,-13,43,-1,48,-54,12,21,48,-24,62,20,50,-39, 
  /* [27][0][][] */ -37,-1,-38,-17,-35,14,28,9,-25,14,3,14,-74,-2,20,-12,48,-71,-47,-51,16,31,-17,92,-39,-28,42,-11,-38,-19,19,127,48,40,-19,11,38,-8,64,-7,47,-53,-35,-95,-36,35,-106,71,-30,-1,8, 
  /* [28][0][][] */ -40,-28,-34,0,-65,-41,33,-20,-35,-43,-12,-95,-1,99,-20,-55,9,127,-2,12,-33,-65,-76,19,-11,38,-38,-118,-62,46,-3,83,33,91,-39,52,-80,-68,-80,-66,71,-48,8,-56,-81,21,37,4,-63,-12,-29, 
  /* [29][0][][] */ 62,-90,-26,-23,-52,77,-112,51,-13,78,-71,62,51,-101,11,25,-31,46,-4,-36,100,44,75,-51,-68,26,33,97,-118,-53,-1,-57,-25,-60,-43,11,-45,-10,42,38,-127,52,-53,-35,23,-114,4,-8,79,58,11, 
  /* [30][0][][] */ -115,-25,29,-117,58,97,-30,31,66,40,-51,2,55,-61,56,-17,-77,46,-33,121,-23,38,18,-83,-44,-48,-111,-21,-39,-50,84,-22,19,-10,-111,-14,-17,-127,-29,-80,-40,-26,45,51,69,32,50,-47,-103,30,-13, 
  /* [31][0][][] */ -28,12,-43,-28,-49,127,49,-12,-24,21,0,50,-2,8,-74,-26,-30,-57,33,-20,26,-6,12,-13,20,14,42,2,42,-11,-25,-68,-61,55,23,25,63,-9,-13,87,58,16,-65,48,1,-41,-13,12,-46,-12,-34, 
  /* [32][0][][] */ -9,-29,16,-60,64,12,23,-21,-9,-1,-96,-14,11,36,-34,6,-55,-107,75,-13,127,6,-3,-11,7,-11,-88,112,83,16,-10,-2,-65,20,2,114,26,83,-13,17,-66,-5,60,-101,18,16,-23,-40,71,13,115, 
  /* [33][0][][] */ -54,-43,24,36,10,53,-41,15,-58,19,53,-80,-22,-62,-48,19,102,-36,6,-2,-38,12,-28,17,42,-11,10,71,2,-28,-7,58,127,-20,45,-3,1,43,-24,-76,-43,43,-43,49,-61,-68,-42,-36,-48,-53,15, 
  /* [34][0][][] */ 32,3,-41,25,80,-22,19,-77,36,-38,-55,0,-1,-10,-51,-81,-70,16,-66,39,-32,-34,8,78,127,-99,-90,57,-47,-4,-84,-63,33,90,28,-43,20,75,-29,-33,-51,2,-30,-17,-36,-75,-44,4,40,-4,-55, 
  /* [35][0][][] */ 41,-22,23,13,96,75,-77,30,-44,26,7,37,-35,18,-32,-46,-4,61,-30,39,-85,1,48,-51,-18,8,5,-57,40,-5,39,85,-97,-22,-53,-127,-30,88,5,-8,25,42,56,36,-23,52,-14,36,74,-6,1, 
  /* [36][0][][] */ -11,-20,-91,-40,11,29,-10,-86,127,-5,-61,-6,-36,-10,-29,33,70,-17,-46,34,-80,15,41,-1,26,13,20,64,-66,-104,12,21,-59,-97,-7,79,-78,52,22,-78,-17,-29,18,-10,-77,8,-6,114,49,54,-51, 
  /* [37][0][][] */ -2,3,-45,73,19,-75,-5,-49,-6,9,-28,35,-40,-93,32,22,-12,26,-10,-31,-21,19,66,91,-2,-34,-127,44,-21,-67,-5,-26,-36,15,49,50,35,-29,-18,-2,9,44,-25,-19,14,-70,117,57,-49,2,29, 
  /* [38][0][][] */ -23,-10,24,-65,-39,70,-28,74,2,35,54,-5,-28,83,22,12,-31,-22,17,31,84,-19,11,62,-9,42,-30,-13,64,-44,127,-20,24,47,-41,-40,-48,67,29,28,-28,8,67,60,52,1,18,-8,-63,-10,-44, 
  /* [39][0][][] */ 12,-6,-99,-115,-29,73,-127,-59,-60,27,-35,19,-63,72,-38,17,-61,30,4,15,24,17,33,31,35,15,-112,-73,18,-13,-35,-114,13,-47,-65,13,-23,4,30,-34,27,17,10,-48,-117,3,27,-46,-7,41,70, 
  /* [40][0][][] */ -23,41,-27,-65,-27,-99,2,-22,20,-32,37,18,-62,-10,-17,23,-35,74,9,-23,13,74,8,4,-28,127,22,82,2,-41,48,-3,-45,51,-38,0,2,-1,25,52,22,28,23,-62,-83,-6,41,-72,100,99,7, 
  /* [41][0][][] */ 4,28,-31,-66,-31,45,-41,-64,-82,0,-24,57,-127,20,33,-22,10,87,-34,-28,12,-43,-87,-30,-38,-72,-32,-50,25,-34,-14,-6,-126,81,-6,66,-7,37,-76,27,11,32,115,-7,-38,-106,-47,27,57,-73,-13, 
  /* [42][0][][] */ -43,-107,-35,-127,20,34,73,-5,-30,108,-51,99,19,50,-9,-110,29,48,44,43,24,1,24,-47,-3,41,50,-5,-93,-36,-25,21,-37,16,25,-16,62,-27,112,-27,78,4,39,49,44,-38,-10,-2,-46,-16,35, 
  /* [43][0][][] */ -41,15,58,-14,-26,29,-26,21,58,-10,-34,-1,66,1,-25,-48,28,-75,-18,-31,72,0,31,6,-78,-22,27,-41,-10,13,29,-33,-21,50,-11,53,-7,-23,-127,33,-48,18,45,-86,-22,45,-5,-9,66,4,-3, 
  /* [44][0][][] */ 109,8,-3,53,57,-1,-90,-6,28,21,-4,12,-25,64,3,86,67,-55,-28,18,-25,50,24,40,61,-30,24,-22,-11,4,-52,84,-4,-33,127,29,24,-35,52,-114,-108,21,-57,-61,111,-50,-36,19,-31,14,-58, 
  /* [45][0][][] */ -127,30,48,-45,-24,51,-17,11,53,-11,-23,43,42,-41,-24,-103,41,-11,67,56,-36,42,67,37,-7,8,-47,-69,5,-38,38,-27,-42,20,-42,81,3,-1,23,75,-16,-12,-66,-64,-2,1,68,15,-30,-8,82, 
  /* [46][0][][] */ -49,46,-65,-44,-5,-21,85,8,-11,-39,46,-63,-35,-18,43,3,-20,-12,-13,-26,53,44,4,-65,-35,-50,-26,-41,-31,-35,-2,16,19,-20,-16,47,-3,-37,-5,22,19,-6,127,-3,27,42,20,16,-25,48,-31, 
  /* [47][0][][] */ -89,12,23,35,7,-23,-9,-4,8,21,-72,78,-127,49,123,-118,40,50,-66,6,-39,-12,-32,85,2,-19,-22,62,83,-19,46,-34,-59,12,-8,20,15,86,-30,76,-19,-42,-5,52,-84,-31,36,-61,-76,-28,28, 
  /* [48][0][][] */ -83,-127,97,-25,38,-37,44,-3,-43,1,-27,39,80,-14,-50,15,-15,-115,-82,24,104,97,-53,42,-20,13,23,-3,73,57,17,35,-61,-105,-39,-13,-120,91,-33,98,-36,-95,59,96,15,28,-2,18,1,-13,1, 
  /* [49][0][][] */ -27,24,92,-127,10,28,-11,-83,0,-39,-76,-92,9,78,-70,-54,-77,-23,27,6,-51,-80,19,-73,-34,60,-16,-41,44,16,-70,-38,-80,35,-5,71,13,-53,-53,-34,-83,-74,-13,2,-71,76,13,-104,-35,36,-49, 
  /* [50][0][][] */ -43,-40,57,36,67,-56,-26,23,-67,21,-33,-5,40,127,31,-58,16,-18,91,12,16,-13,33,13,7,30,-22,61,-12,-57,1,49,-39,35,-12,-38,-26,-49,-15,-28,-7,-22,12,16,15,-88,-24,-36,-83,-14,-110, 
};
const TfArray<4, int> tensor_dimension44 = { 4, { 51,1,1,51 } };
const TfArray<51, float> quant44_scale = { 51, { 0.0033577375579625368, 0.0046585607342422009, 0.0032469043508172035, 0.0031226046849042177, 0.005399094894528389, 0.0022577408235520124, 0.0018481890438124537, 0.0030835755169391632, 0.0026293483097106218, 0.0025626278948038816, 0.0031830957159399986, 0.0042235464788973331, 0.0030924682505428791, 0.0018523966427892447, 0.0036748098209500313, 0.0033212522976100445, 0.0033991681411862373, 0.0048301578499376774, 0.0056725260801613331, 0.0042883777059614658, 0.0025974339805543423, 0.0050096330232918262, 0.0054613347165286541, 0.0027114502154290676, 0.0053180353716015816, 0.0033995907288044691, 0.0023408657871186733, 0.0052100406028330326, 0.0020444151014089584, 0.0025089371483772993, 0.0038881744258105755, 0.0038558370433747768, 0.0021136803552508354, 0.0039489059709012508, 0.0042814901098608971, 0.0049592289142310619, 0.0042162761092185974, 0.0043517271988093853, 0.002965074498206377, 0.0019869962707161903, 0.003719954751431942, 0.0044221784919500351, 0.0038094180636107922, 0.003269596491008997, 0.0036288958508521318, 0.0036421339027583599, 0.0035853709559887648, 0.0027429091278463602, 0.0021105913911014795, 0.0050512594170868397, 0.003489762544631958, } };
const TfArray<51, int> quant44_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const ALIGN(16) int32_t tensor_data45[51] = { -7502, 22144, -10826, 10737, 13985, 10050, 21460, 5034, 4998, -4533, 19038, 11331, 16835, 17097, 21901, 3040, 9374, 2377, 9561, 8440, 7369, 8898, -6146, -23066, 3859, 16548, -11530, 41, 27785, 14710, 9967, -2287, -20410, 3832, 11677, 1271, 12949, 2690, -8588, 14157, -329, 21896, -8669, 6226, -4385, 1131, 2881, -2477, 429, 24814, 3063, };
const TfArray<1, int> tensor_dimension45 = { 1, { 51 } };
const TfArray<51, float> quant45_scale = { 51, { 7.9005592851899564e-05, 0.00010961319640045986, 7.6397751399781555e-05, 7.3473049269523472e-05, 0.00012703753600362688, 5.3123316320125014e-05, 4.3486801587278023e-05, 7.2554721555206925e-05, 6.1867023759987205e-05, 6.0297126765362918e-05, 7.4896372098010033e-05, 9.9377568403724581e-05, 7.2763963544275612e-05, 4.3585805542534217e-05, 8.6466112406924367e-05, 7.814711716491729e-05, 7.998042565304786e-05, 0.00011365077807568014, 0.00013347119966056198, 0.00010090300929732621, 6.1116094002500176e-05, 0.00011787372204707935, 0.00012850199709646404, 6.3798826886340976e-05, 0.0001251302455784753, 7.9990371887106448e-05, 5.5079195590224117e-05, 0.00012258919014129788, 4.8103884182637557e-05, 5.9033816796727479e-05, 9.1486457677092403e-05, 9.0725581685546786e-05, 4.973365503246896e-05, 9.2915433924645185e-05, 0.00010074094461742789, 0.00011668774095596746, 9.92064960882999e-05, 0.00010239358380204067, 6.9766458182130009e-05, 4.6752855269005522e-05, 8.7528351286891848e-05, 0.00010405125794932246, 8.9633365860208869e-05, 7.6931682997383177e-05, 8.5385785496328026e-05, 8.5697269241791219e-05, 8.4361672634258866e-05, 6.4539039158262312e-05, 4.9660975491860881e-05, 0.00011885316780535504, 8.2112062955275178e-05, } };
const TfArray<51, int> quant45_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const ALIGN(16) int8_t tensor_data46[1*3*3*51] = { 
  /* [0][0][][] */ 95,56,127,127,-78,10,127,110,98,31,-12,-74,-108,66,-43,19,57,127,18,-119,57,-19,-24,45,-14,33,-19,84,127,98,-92,50,12,108,123,14,123,-36,-16,-40,-86,-2,78,36,127,-83,72,57,33,-87,-23, -49,-44,104,83,-93,112,16,10,42,127,-25,-20,-4,96,105,37,-82,1,127,-2,126,24,120,58,43,19,11,-18,-23,-40,87,-50,127,-22,42,127,82,25,-91,-19,-58,-47,7,-88,65,2,13,67,127,102,49, 123,-26,-20,83,-127,-127,11,127,-26,-69,19,-92,-19,-47,-8,97,42,122,-57,-22,-12,-38,119,-48,43,-3,-101,-118,-35,64,97,-83,42,-78,99,10,101,-74,-96,37,127,-81,127,127,-93,127,-11,69,-28,127,14, 
  /* [0][1][][] */ 38,97,79,40,41,-18,31,-58,-26,-81,2,-3,99,16,-59,-62,-22,-65,-21,14,83,-31,-32,72,-32,107,105,68,21,41,-57,127,30,84,-44,-9,55,127,18,103,-62,113,77,-18,-26,5,71,-127,86,-12,-1, -45,-60,34,19,-65,57,-8,-44,119,-52,-39,95,0,54,45,81,-24,59,125,-95,117,54,127,12,90,127,-31,4,-43,-45,32,-20,-8,62,74,85,12,105,-87,92,0,-76,-13,-28,-119,-33,31,-3,111,9,95, -11,38,-127,27,-33,-29,-10,37,20,-11,44,127,127,-23,63,48,83,91,46,104,-4,-127,-43,-65,-6,-18,23,-51,-31,-37,127,-84,22,-117,125,46,76,21,-88,122,60,-11,74,68,-83,106,-48,4,4,103,1, 
  /* [0][2][][] */ 20,127,38,-106,-18,-84,47,83,-25,32,-31,72,100,-127,7,-81,-127,-32,19,24,127,-76,-123,-10,-36,-10,70,67,15,30,-74,62,-32,60,-113,-65,-127,63,127,-34,-74,127,-50,-54,-27,-107,127,28,83,-83,127, -15,-127,11,-27,25,-29,2,-22,127,19,9,-4,-3,-95,-30,-105,51,-60,1,127,69,83,-58,127,127,-74,17,0,-44,-69,25,-11,30,127,13,34,30,54,-57,127,-24,57,0,22,-78,-83,16,-42,-18,-30,70, 127,41,-116,-7,-67,-42,-14,-36,-4,107,127,68,33,-62,127,127,115,126,53,105,22,-77,-22,93,7,-61,127,-127,-89,-127,124,-49,84,-1,127,-32,-119,28,8,-56,-22,-21,-4,21,-44,83,-30,125,18,-27,-22, 
};
const TfArray<4, int> tensor_dimension46 = { 4, { 1,3,3,51 } };
const TfArray<51, float> quant46_scale = { 51, { 0.006855520885437727, 0.0055189603008329868, 0.0083006517961621284, 0.0087743569165468216, 0.0053663118742406368, 0.005681727547198534, 0.010250719264149666, 0.013409940525889397, 0.0062127979472279549, 0.0097033130005002022, 0.011422906070947647, 0.0072665228508412838, 0.0077161774970591068, 0.0099329520016908646, 0.0078278928995132446, 0.0069063571281731129, 0.0059203114360570908, 0.0054815467447042465, 0.0048629124648869038, 0.0068123643286526203, 0.0065429466776549816, 0.0043483171612024307, 0.003388305427506566, 0.0093001192435622215, 0.0065545458346605301, 0.0059376931749284267, 0.0087461285293102264, 0.0042949034832417965, 0.008458663709461689, 0.009690064936876297, 0.0036264355294406414, 0.005732919555157423, 0.01438105758279562, 0.0059601478278636932, 0.00333028519526124, 0.0048415074124932289, 0.0047247447073459625, 0.0059496723115444183, 0.0054192063398659229, 0.018892830237746239, 0.0077583589591085911, 0.0047448975965380669, 0.0072708097286522388, 0.0079876957461237907, 0.0059413905255496502, 0.0058304173871874809, 0.0081623084843158722, 0.012119554914534092, 0.0062967096455395222, 0.0053146728314459324, 0.0076828333549201488, } };
const TfArray<51, int> quant46_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 3 };
const ALIGN(16) int32_t tensor_data47[51] = { 226, 280, -3418, -1045, 10671, 6633, -4166, -438, -5563, -469, -615, 75, -933, 3776, -1641, 345, -977, -626, -7242, -3639, -6113, 5216, -2424, -90, -1062, -1207, -5753, -704, 2068, 8552, -11285, -1421, -3490, -4991, -8603, -6560, -3997, -6125, 9039, -1709, -439, 93, -2620, -899, 6274, 6837, -6601, -2745, -4481, -5674, -3089, };
const TfArray<1, int> tensor_dimension47 = { 1, { 51 } };
const TfArray<51, float> quant47_scale = { 51, { 0.00016130637959577143, 0.00012985788634978235, 0.00019530946156010032, 0.00020645545737352222, 0.00012626616808120161, 0.00013368770305532962, 0.0002411933965049684, 0.00031552801374346018, 0.00014618349086958915, 0.00022831324895378202, 0.00026877425261773169, 0.00017097701493185014, 0.00018155711586587131, 0.00023371652059722692, 0.00018418571562506258, 0.00016250251792371273, 0.00013930145360063761, 0.00012897756823804229, 0.00011442146933404729, 0.00016029093239922076, 0.00015395169612020254, 0.00010231334454147145, 7.9724835813976824e-05, 0.00021882634609937668, 0.00015422461729031056, 0.00013971043517813087, 0.00020579126430675387, 0.00010105655383085832, 0.00019902738858945668, 0.00022800153237767518, 8.5327897977549583e-05, 0.00013489222328644246, 0.0003383778384886682, 0.00014023877156432718, 7.8359655162785202e-05, 0.0001139178202720359, 0.00011117046233266592, 0.0001399922912241891, 0.00012751073518302292, 0.00044453720329329371, 0.00018254962924402207, 0.00011164465104229748, 0.00017107787425629795, 0.0001879457850009203, 0.00013979742652736604, 0.00013718628906644881, 0.00019205431453883648, 0.00028516599559225142, 0.00014815788017585874, 0.00012505112681537867, 0.00018077254935633391, } };
const TfArray<51, int> quant47_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const ALIGN(16) int8_t tensor_data48[51*1*1*51] = { 
  /* [0][0][][] */ 75,-31,-17,80,16,49,-91,-18,30,-23,-77,52,46,-26,-92,-77,15,-93,-72,24,32,-57,-69,34,-1,12,69,-38,61,58,18,-71,-1,-26,-49,65,-111,-69,43,31,16,55,30,-31,-20,-119,-112,50,-127,-28,20, 
  /* [1][0][][] */ 53,-50,-18,50,-29,-87,-56,-2,-88,24,-62,-6,-30,51,27,-24,92,70,-1,-44,6,127,-12,-40,26,-55,-40,-36,89,31,2,70,-79,-75,-30,39,54,50,-44,-60,49,65,-26,-11,11,17,-65,27,-40,-74,47, 
  /* [2][0][][] */ -1,24,-33,-8,81,-26,11,-66,34,-67,-20,56,-19,92,-37,31,25,-14,-38,-10,45,70,-31,-6,-44,-32,104,-29,-36,12,-87,-50,-34,-51,34,-34,-44,-46,9,-33,-70,27,127,-27,3,16,-22,32,-37,27,-3, 
  /* [3][0][][] */ -76,-59,-52,-23,17,-54,-30,13,-7,-10,-26,80,-11,-24,22,-36,46,26,28,-7,-45,0,-17,-68,-29,32,-39,-99,-89,-5,-10,-51,-3,-12,19,-59,-69,-13,-12,17,34,5,-23,21,41,-49,-1,-53,-127,73,-38, 
  /* [4][0][][] */ 61,12,-2,0,21,-88,-3,31,42,-6,1,5,-2,12,25,-30,32,-8,-23,-65,-127,7,-41,-7,-46,33,116,14,36,-65,72,-38,-48,-46,-101,2,-4,-62,-32,23,4,38,38,23,-7,20,-23,-37,-17,-37,-9, 
  /* [5][0][][] */ -8,-17,36,-6,-8,60,-3,-23,17,127,-1,-27,3,26,-72,17,2,45,36,33,-35,-8,-6,-21,-4,-50,-24,54,6,54,-61,-10,69,-34,5,13,48,34,-17,5,-12,4,-9,-15,50,-35,-9,24,-66,32,2, 
  /* [6][0][][] */ 87,94,-26,-33,67,-9,-13,-23,-13,-1,32,39,-94,53,-12,45,-47,13,-23,-25,88,-58,-17,90,11,45,-22,26,5,-45,-55,-10,56,-25,-39,24,16,-89,-98,-26,33,-16,-81,68,36,-29,-34,0,39,59,127, 
  /* [7][0][][] */ 36,107,36,-40,-23,67,18,-4,-15,38,11,-20,39,18,-29,-21,-12,18,23,4,-39,-47,-18,4,79,-35,-24,-46,-127,-50,-74,-21,-23,13,7,-82,24,10,9,24,60,48,13,-4,7,25,-33,-17,-48,35,-96, 
  /* [8][0][][] */ 11,-70,-46,-29,49,-90,-32,32,24,-38,-13,-3,-43,-29,62,24,-37,-43,-12,-3,-21,85,-31,43,16,20,6,-20,43,22,10,63,-14,-96,31,10,34,7,29,-37,-45,-23,-12,127,18,45,84,-34,-83,27,-36, 
  /* [9][0][][] */ -14,-127,39,14,51,-31,-55,17,-21,-8,5,4,-21,13,-10,-7,-1,0,75,-17,-11,-58,7,-48,-15,6,-3,-27,-73,24,-3,-43,-23,34,36,-28,10,-14,60,9,-36,-49,-75,53,-34,13,-54,-22,26,29,-18, 
  /* [10][0][][] */ 43,-21,21,-127,8,-5,84,36,87,-32,38,42,40,-57,-118,10,9,-5,79,77,-44,124,6,47,-36,-62,-25,0,-4,-53,-66,15,51,-55,3,-36,68,-109,60,-14,-29,104,69,90,118,10,-11,8,-37,52,114, 
  /* [11][0][][] */ 16,-3,-45,14,41,26,-81,-80,-37,-22,-127,36,21,26,-9,51,-35,-32,-18,11,47,12,11,-10,-16,25,-38,63,47,-49,-33,-1,38,-15,-79,-44,38,22,34,22,-101,-57,27,-99,27,17,4,26,-43,-47,7, 
  /* [12][0][][] */ 8,50,-23,-31,-38,18,57,29,-5,32,-73,-57,-58,51,91,20,-62,71,53,-92,-127,16,-30,20,68,-25,21,-70,85,40,31,-65,48,92,-64,113,-34,-26,-28,-71,-66,-26,-35,-41,-19,7,100,1,20,-24,-17, 
  /* [13][0][][] */ 113,20,-34,-80,-20,94,46,-39,39,127,-73,34,-27,72,30,-49,-59,6,82,0,-6,-123,20,-27,-40,-58,-54,54,-11,93,41,-9,89,63,52,-4,-2,48,-59,102,-64,36,-21,-29,109,-25,90,-41,58,98,-31, 
  /* [14][0][][] */ 17,65,-55,-38,101,-31,-78,-22,-34,-73,-41,4,9,-46,-21,32,46,-16,-12,44,-42,33,75,-9,-54,27,-26,-127,-27,27,12,16,-9,-13,12,-2,41,68,-61,-83,14,-32,-59,-8,-21,52,-53,23,-88,31,68, 
  /* [15][0][][] */ -9,-4,21,15,22,-22,-29,16,-2,18,57,46,6,19,-2,8,-15,-31,-10,127,9,-29,33,-19,-4,-17,36,-2,-9,-34,18,-18,20,-33,5,-1,16,15,25,14,5,30,8,-33,-32,-33,-22,3,14,3,4, 
  /* [16][0][][] */ 14,-28,20,-1,42,44,22,-22,-46,-2,-67,-32,-33,50,-58,-8,-49,15,15,-37,39,-61,-16,45,8,66,-18,6,-5,-2,-127,-21,21,-64,-8,28,58,-46,-4,-39,13,1,-44,-19,2,-50,52,-24,52,28,-3, 
  /* [17][0][][] */ -120,1,-28,-21,-41,-30,-36,-47,90,-53,41,54,-92,32,-31,112,-98,-28,48,-28,-118,-55,44,-42,127,-1,-28,-47,-68,30,-102,-92,123,-25,-84,9,-56,-50,1,-35,-2,98,7,31,-8,-14,-92,-61,-120,-10,-93, 
  /* [18][0][][] */ 7,-6,-42,-21,3,-43,58,-13,18,-36,-127,89,-66,127,15,5,82,-32,17,-33,-12,49,30,32,-21,-87,-25,-34,-6,-18,4,33,5,-91,-81,-20,-26,-36,8,-12,68,-22,-4,49,-14,-106,52,-49,-21,44,-45, 
  /* [19][0][][] */ -32,-6,110,8,-56,-21,0,7,13,12,-60,14,127,-10,-78,67,-21,-63,-41,-72,-47,65,-68,-54,28,-34,-11,29,49,-104,24,27,-18,45,30,-89,-18,45,-24,33,-115,-36,-8,-30,-95,-36,59,-57,5,-98,-13, 
  /* [20][0][][] */ -29,-44,78,75,-60,16,-11,10,-82,-27,-87,27,-24,-9,52,-124,14,68,-43,-33,46,-27,-69,25,12,82,-90,6,4,-4,-127,91,16,-10,-93,50,-20,-14,-96,-5,1,-8,62,-67,-8,-10,21,-32,19,-1,14, 
  /* [21][0][][] */ 7,-14,12,127,-4,-4,-33,-54,-9,-23,45,47,-30,23,75,36,12,-51,83,-42,19,4,-7,10,26,10,-25,12,1,1,20,-44,49,-19,15,7,-7,-1,-5,8,-1,-123,43,5,38,15,51,44,-13,54,-28, 
  /* [22][0][][] */ -4,10,55,-33,-18,22,6,-60,32,-55,-36,-18,-53,54,-18,40,15,-38,9,58,12,34,-29,-14,-2,12,58,64,36,-67,1,127,36,38,-11,27,69,6,-4,11,-35,-9,12,27,-51,-78,60,-36,-11,68,56, 
  /* [23][0][][] */ 71,95,45,-29,-42,-1,-46,-14,30,-1,14,-55,-62,20,-5,30,-63,127,-40,-29,73,-57,-16,-43,72,-29,-5,19,-12,-44,-34,5,-75,51,35,66,23,11,-28,10,-57,-47,98,-21,25,-18,29,57,8,7,39, 
  /* [24][0][][] */ 71,-46,10,-11,87,16,-26,48,-12,-54,23,-15,-62,71,56,-14,-78,26,-12,-21,-16,-59,48,63,61,109,-46,15,15,-8,-3,54,28,-41,-24,26,7,-90,-31,-31,22,-10,8,-45,43,-17,81,-26,127,81,94, 
  /* [25][0][][] */ 16,52,-53,-17,35,-1,59,-49,42,53,-94,-77,-10,104,-79,-14,-9,99,-75,-33,73,-18,-50,-32,66,-47,5,55,88,-16,-65,-39,51,33,55,-59,42,31,23,16,34,11,73,-12,27,-39,36,127,32,81,11, 
  /* [26][0][][] */ -1,-11,-53,27,1,-29,-97,-91,-88,-27,1,-59,3,-34,-36,21,38,-12,39,13,-95,-73,-14,67,-84,45,17,19,-28,60,27,-79,4,-28,47,-61,-127,-16,-63,-33,-39,-30,-28,-18,-14,98,-9,27,-7,31,-69, 
  /* [27][0][][] */ -3,-127,-42,-5,2,2,-32,6,2,-15,5,12,31,-21,18,15,-33,-19,45,48,18,-1,-41,4,0,46,-9,-65,37,60,46,-11,2,32,-5,-3,32,-7,10,-75,-66,-33,-33,5,-29,12,2,-31,14,9,18, 
  /* [28][0][][] */ -62,38,-25,104,22,125,94,14,-92,7,-127,38,-16,5,39,-72,120,-50,58,18,82,-24,3,56,6,-77,42,-17,-67,-89,-38,13,50,-106,-91,104,-34,-109,46,76,-89,-33,-2,-6,44,-9,58,23,25,13,-50, 
  /* [29][0][][] */ 37,-61,-127,23,1,-38,-73,13,25,-26,-54,-32,57,-49,52,56,69,-125,30,6,42,-6,-73,4,13,43,-3,-16,-13,-58,-61,-73,-9,-79,-9,-15,-7,15,-61,27,100,-11,-12,5,36,54,-57,-4,-56,4,11, 
  /* [30][0][][] */ 45,-24,17,-31,-13,42,27,52,-52,-7,-86,-15,-18,27,-70,-113,-24,-42,32,-9,-22,-38,-5,57,-1,38,-36,127,-38,29,-23,36,32,49,-42,-93,-8,19,10,42,-57,2,74,-53,-42,-2,39,-37,-4,12,-27, 
  /* [31][0][][] */ 93,15,16,55,20,29,63,-127,24,38,-39,12,-45,46,-67,118,-40,-38,-35,-52,-7,-19,-16,-89,100,41,73,-16,-64,-30,-84,-67,-100,88,-2,19,-32,-68,-50,59,27,42,28,-8,-20,22,58,4,71,11,-21, 
  /* [32][0][][] */ -15,93,-15,-20,63,-3,-77,-11,127,15,29,64,-34,-60,-67,56,-55,-30,-56,39,89,14,-78,-70,57,-77,67,74,35,87,2,-8,121,-9,-102,-33,23,23,-126,-34,-44,-60,-124,-15,38,23,-72,-14,45,11,-19, 
  /* [33][0][][] */ -18,-23,45,-19,84,17,78,-31,28,42,-56,100,-17,48,20,-51,-63,-34,-2,-5,0,-27,127,-4,-31,62,83,30,55,-45,97,-7,-54,3,-38,-7,-19,25,25,-61,-27,-33,-12,32,-25,-22,82,78,-22,-39,1, 
  /* [34][0][][] */ -1,-21,-30,-47,-12,-46,-24,69,-74,-127,-72,-5,-65,-15,-59,11,11,-67,-2,23,-10,18,39,19,13,-16,1,10,26,0,-52,-21,34,71,37,33,-45,45,-16,108,37,-36,-65,-32,-15,18,3,20,-52,112,-65, 
  /* [35][0][][] */ -23,22,-50,-44,-9,-28,19,-60,1,40,-45,23,15,21,-29,-127,-25,9,7,2,-36,12,-56,-94,-12,-11,-97,-28,-32,-68,-104,-16,-18,-7,25,-14,9,35,21,80,-17,105,-21,-3,-60,-25,-53,-64,-2,-3,-45, 
  /* [36][0][][] */ 22,-61,-22,-51,-100,46,-42,5,-17,13,-99,-52,68,89,110,-78,73,-9,16,9,25,-36,-79,68,25,-71,47,86,45,5,53,1,-81,61,-79,-93,-17,92,86,11,48,127,-1,-33,26,-13,-47,22,18,-9,67, 
  /* [37][0][][] */ -14,-21,15,0,-92,-8,-38,-40,67,-70,45,-33,0,35,-35,63,-29,55,6,56,-10,7,-45,127,-54,-48,-9,-3,-4,-43,3,-7,60,-38,30,0,1,-92,12,-39,18,-17,0,20,27,-56,-50,5,-6,-29,-56, 
  /* [38][0][][] */ -23,-12,-21,-22,-40,8,10,-50,68,-9,-104,-16,-109,-8,-99,-122,-127,14,-1,36,19,-93,16,-28,-5,-75,4,-33,109,-53,-92,86,-62,-13,-40,25,40,83,10,-9,-88,77,-51,-72,66,2,32,-24,17,-19,16, 
  /* [39][0][][] */ -31,18,-61,8,65,-73,-3,15,-107,21,-4,51,127,-33,-8,3,-16,46,9,37,0,-16,-38,12,13,46,-66,-12,4,71,-10,9,44,33,-5,8,27,-32,49,15,-1,-10,37,34,8,-6,20,16,28,10,-50, 
  /* [40][0][][] */ 52,14,40,46,-4,-21,-47,40,-38,-19,6,33,-33,109,7,-7,-126,-14,-49,-24,5,6,40,22,-7,23,25,-24,21,-14,39,-127,13,-51,14,-1,3,-30,-121,-8,12,14,-40,29,0,6,78,17,25,-6,17, 
  /* [41][0][][] */ 5,32,-71,55,49,-38,-51,44,45,33,-19,17,-104,87,-37,79,41,-28,-31,-53,-37,4,9,1,86,-52,-18,-43,37,-20,28,-42,-21,-72,23,-59,79,-51,26,-127,-35,79,2,17,16,4,-5,-101,54,-39,15, 
  /* [42][0][][] */ -45,-19,76,-24,30,-14,-127,-10,66,67,5,-6,-34,24,-20,-18,-36,74,60,-61,58,-24,63,-22,-20,-48,25,-32,-34,-29,-13,-14,-8,-92,-9,-28,81,35,32,83,-34,6,3,38,7,-25,-62,-1,32,46,-77, 
  /* [43][0][][] */ 78,-34,-29,-16,48,34,51,-71,-43,-14,-41,10,-8,-27,-10,-64,0,58,-21,-3,17,-21,11,36,8,47,127,-50,66,-68,-36,19,34,81,-26,66,-75,-41,2,-41,-25,-4,102,-10,17,-78,9,80,48,13,93, 
  /* [44][0][][] */ -16,41,8,-42,-23,127,-22,22,7,7,-38,58,0,19,-28,-17,-41,-24,28,3,33,-18,-75,30,25,-33,-16,63,-3,-35,-26,35,-22,100,-2,-16,2,-23,-26,-70,-39,74,-10,22,-43,-18,-14,-76,-7,-14,-30, 
  /* [45][0][][] */ 54,-19,5,95,-52,18,-47,96,42,26,-64,-71,-8,80,18,-14,-38,61,10,57,14,32,-13,-38,2,13,25,16,66,-18,35,67,61,46,-4,-1,32,-15,-35,-9,-9,-4,-24,-63,127,-9,0,62,91,-43,23, 
  /* [46][0][][] */ -86,7,99,39,52,-55,9,-70,-9,-37,-15,-25,-50,78,45,25,16,82,-43,-5,25,26,8,127,77,-39,-15,45,65,17,76,-9,-10,47,-14,65,-40,-12,-111,34,41,-41,65,17,-33,-1,75,-1,53,-16,15, 
  /* [47][0][][] */ -48,-64,-32,9,-2,-64,-118,1,-50,-45,58,75,-84,-27,48,-17,-33,28,65,32,-56,46,-28,32,-12,-106,64,19,-122,22,-26,-127,-22,44,16,-60,10,-76,-31,-33,36,-37,-52,-64,28,31,-75,20,-35,-43,20, 
  /* [48][0][][] */ 35,8,-19,45,-26,-26,127,66,-58,29,-29,-73,-64,-19,-5,-20,-98,1,45,10,-70,-22,34,30,-55,-64,-3,31,-126,5,-28,43,-36,-56,-67,45,19,-40,15,30,-6,-36,113,-54,-37,100,45,-8,45,27,-8, 
  /* [49][0][][] */ -44,34,26,49,23,-9,-1,-10,13,-6,-31,-1,-3,-39,-52,-49,-45,12,46,-15,-106,-79,-18,13,-5,2,-64,69,41,-15,-22,3,64,-69,-40,33,-18,-21,-27,-49,-57,12,28,-60,5,-127,-52,-75,-8,30,98, 
  /* [50][0][][] */ 11,-80,-37,28,-46,5,127,11,-41,-31,-53,-81,-86,8,11,11,-1,-40,50,-50,-8,-39,-25,64,46,34,-79,-47,55,52,-84,-40,31,13,-21,-33,-66,53,28,-33,-74,-81,11,-88,3,-41,70,-17,100,-45,127, 
};
const TfArray<4, int> tensor_dimension48 = { 4, { 51,1,1,51 } };
const TfArray<51, float> quant48_scale = { 51, { 0.0041146171279251575, 0.0023659756407141685, 0.0060087237507104874, 0.0015449961647391319, 0.0047110826708376408, 0.0035104893613606691, 0.0030955416150391102, 0.0019597520586103201, 0.0030434818472713232, 0.0023882100358605385, 0.0031301160342991352, 0.0011504003778100014, 0.0015462818555533886, 0.0024973235558718443, 0.0018606857629492879, 0.0082005131989717484, 0.0021724901162087917, 0.002272485289722681, 0.0042467317543923855, 0.0015810059849172831, 0.0023340159095823765, 0.0051985173486173153, 0.0023338051978498697, 0.0024949030485004187, 0.0012816162779927254, 0.0025547214318066835, 0.0013067721156403422, 0.0081401094794273376, 0.0025822634343057871, 0.0017114242073148489, 0.0016896553570404649, 0.003458790248259902, 0.0033136464189738035, 0.0044959364458918571, 0.0035468630958348513, 0.0070004444569349289, 0.0043695513159036636, 0.0029525964055210352, 0.0014524854486808181, 0.0037435446865856647, 0.0054296385496854782, 0.0018339667003601789, 0.0048199784941971302, 0.0020092742051929235, 0.0074396310374140739, 0.0029269377700984478, 0.0026193233206868172, 0.0010569925652816892, 0.0025877866428345442, 0.003471568925306201, 0.0019956910982728004, } };
const TfArray<51, int> quant48_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const ALIGN(16) int32_t tensor_data49[51] = { 14602, 6833, 1140, 28734, 8451, -8147, -7163, 16760, 4662, 13411, -6907, 28692, 21596, -11831, 21032, -2473, 11391, 28495, 7872, 28775, 10349, -8937, -4239, 984, 4549, -9230, 40309, 3103, 3668, 24776, 12392, -2465, 4762, -7876, 12169, 17271, -7723, 15369, 29517, -7562, 1791, 16637, 10472, 1738, -1851, -18253, -20822, 44802, 12678, 14830, 9769, };
const TfArray<1, int> tensor_dimension49 = { 1, { 51 } };
const TfArray<51, float> quant49_scale = { 51, { 9.6814525022637099e-05, 5.567001790041104e-05, 0.00014138173719402403, 3.6352852475829422e-05, 0.00011084900324931368, 8.259974856628105e-05, 7.2836272011045367e-05, 4.6111814299365506e-05, 7.161133544286713e-05, 5.6193177442764863e-05, 7.3649789555929601e-05, 2.7068244889960624e-05, 3.638310226961039e-05, 5.8760553656611592e-05, 4.3780841224361211e-05, 0.00019295325910206884, 5.1117414841428399e-05, 5.3470244893105701e-05, 9.9923105153720826e-05, 3.720014137797989e-05, 5.4918022215133533e-05, 0.00012231805885676295, 5.4913063650019467e-05, 5.8703601098386571e-05, 3.0155677450238727e-05, 6.0111095081083477e-05, 3.0747578421141952e-05, 0.00019153198809362948, 6.0759139159927145e-05, 4.0268805605592206e-05, 3.9756596379447728e-05, 8.1383303040638566e-05, 7.796815043548122e-05, 0.00010578674118733034, 8.3455604908522218e-05, 0.00016471634444314986, 0.00010281297727487981, 6.9472858740482479e-05, 3.4176129702245817e-05, 8.8083404989447445e-05, 0.00012775619688909501, 4.3152158468728885e-05, 0.00011341126082697883, 4.7277040721382946e-05, 0.0001750501396600157, 6.8869128881487995e-05, 6.1631137214135379e-05, 2.4870414563338272e-05, 6.0889098676852882e-05, 8.1683974713087082e-05, 4.6957437007222325e-05, } };
const TfArray<51, int> quant49_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const ALIGN(16) int8_t tensor_data50[1*3*3*51] = { 
  /* [0][0][][] */ 77,-127,-17,-99,82,91,74,-127,127,-118,115,-15,29,-76,-79,65,-76,-127,87,-75,127,116,3,13,-109,-109,-72,13,-8,44,-23,127,127,28,-80,97,121,-127,2,-16,-83,73,127,-18,58,110,-38,-39,64,127,-45, 102,-97,13,-7,4,120,40,-34,93,5,97,-127,69,99,108,91,-56,-32,81,-111,110,67,-50,127,127,-80,-23,99,-28,-75,-21,9,-20,103,30,26,-81,-29,71,127,121,88,8,-91,-127,123,-21,62,57,89,-127, -5,9,11,18,6,14,-9,-10,14,-5,14,10,-7,-5,-20,-8,11,-21,-8,-16,-27,20,3,-19,-8,-11,-5,16,-10,19,0,-6,-10,-12,17,22,-8,-14,4,8,-11,-5,0,12,25,-19,-10,-22,-16,8,-8, 
  /* [0][1][][] */ 127,-43,-18,-113,123,120,59,-9,91,-92,126,-17,-33,56,-45,127,48,-116,127,-48,112,127,127,60,-64,-127,-127,37,-64,99,-77,79,63,68,-52,127,127,-69,60,24,13,127,108,-72,66,68,-13,-105,65,-4,-98, 34,-56,127,127,-121,127,-36,-85,74,53,127,-89,-67,127,127,12,92,47,61,-127,111,87,19,44,40,-23,-69,127,-90,42,-56,-37,-29,127,-127,-28,-54,1,49,60,127,83,-24,-83,-114,127,-127,13,58,72,-77, 14,21,-7,5,-24,28,11,11,-15,-17,-29,12,-12,29,-14,-7,15,-7,-12,19,-7,-11,2,-7,6,-11,-16,-13,10,-17,-8,-13,-10,-18,-9,-8,6,9,2,4,14,-11,-8,-9,-22,-8,-3,13,10,-11,14, 
  /* [0][2][][] */ 114,-61,-61,-49,127,76,-127,32,-40,-9,29,-16,127,36,-23,78,-24,-3,-11,-38,42,15,101,59,77,-93,-35,21,-127,57,-127,25,0,66,-46,125,47,-46,127,33,74,55,-28,-127,4,-65,-86,-127,0,-47,-107, 91,-76,94,-90,-83,34,-45,-78,108,127,119,18,-26,109,124,-67,-127,-59,3,-25,-65,-8,55,112,-109,30,-3,83,-63,127,-84,-72,69,117,-21,-108,-82,-2,43,49,117,80,90,9,-53,-25,-100,-1,-127,-45,-81, 21,19,-12,-20,22,-12,-7,15,0,-5,29,15,0,-15,-13,4,1,0,0,3,9,6,5,24,27,11,6,3,16,-14,-6,18,4,29,16,-2,20,-9,9,16,2,-21,-11,-10,7,0,21,21,-13,13,5, 
};
const TfArray<4, int> tensor_dimension50 = { 4, { 1,3,3,51 } };
const TfArray<51, float> quant50_scale = { 51, { 0.0036232646089047194, 0.0080109350383281708, 0.0055411849170923233, 0.014670184813439846, 0.0046360869891941547, 0.0068268338218331337, 0.015159838832914829, 0.0083903642371296883, 0.0067908838391304016, 0.017193004488945007, 0.0026581259444355965, 0.022687537595629692, 0.015813065692782402, 0.0054222019389271736, 0.0092730512842535973, 0.0040007536299526691, 0.012180537916719913, 0.0060946396552026272, 0.0037863303441554308, 0.0089890416711568832, 0.0046782582066953182, 0.0037183358799666166, 0.011771399527788162, 0.0059983008541166782, 0.0095914024859666824, 0.0093236947432160378, 0.012788357213139534, 0.0066327815875411034, 0.0093121509999036789, 0.01463939156383276, 0.015855675563216209, 0.0074324645102024078, 0.0075149941258132458, 0.003237586934119463, 0.0061079817824065685, 0.0032385722734034061, 0.0050705568864941597, 0.0085873343050479889, 0.017349518835544586, 0.0083304261788725853, 0.0033246346283704042, 0.007037850096821785, 0.0045136869885027409, 0.010174661874771118, 0.0028210775926709175, 0.0049507417716085911, 0.007304102648049593, 0.023065449669957161, 0.0091313179582357407, 0.0084259435534477234, 0.0076180365867912769, } };
const TfArray<51, int> quant50_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 3 };
const ALIGN(16) int32_t tensor_data51[51] = { -8415, 8976, -162, 11797, -5981, 859, 2401, 7676, -2564, 7380, -6157, 9879, -843, -10404, 3824, -419, 4549, 13186, -3280, 17882, -2914, -5024, -141, -8129, -344, 7091, 12668, -4416, 9901, -7545, 7518, 411, -4727, -16947, 14539, -10271, 7884, 10162, -6869, -1323, 7197, -9078, -11748, 11305, 32349, -2888, 4618, 12586, -222, -3457, 14620, };
const TfArray<1, int> tensor_dimension51 = { 1, { 51 } };
const TfArray<51, float> quant51_scale = { 51, { 8.5253283032216132e-05, 0.00018849258776754141, 0.00013038082397542894, 0.00034518082975409925, 0.00010908440162893385, 0.00016063138900790364, 0.00035670210490934551, 0.00019742033327929676, 0.0001597855007275939, 0.00040454129339195788, 6.2544138927478343e-05, 0.00053382443729788065, 0.00037207212881185114, 0.00012758122466038913, 0.00021818945242557675, 9.4135379185900092e-05, 0.00028660090174525976, 0.00014340328925754875, 8.9090128312818706e-05, 0.00021150686370674521, 0.00011007666762452573, 8.7490254372823983e-05, 0.00027697411132976413, 0.00014113649376668036, 0.00022568006534129381, 0.00021938105055596679, 0.0003009025240316987, 0.0001560654491186142, 0.00021910943905822933, 0.00034445628989487886, 0.00037307472666725516, 0.00017488152661826462, 0.0001768233923939988, 7.6178519520908594e-05, 0.00014371721772477031, 7.6201700721867383e-05, 0.00011930722394026816, 0.00020205492910463363, 0.00040822397568263113, 0.00019601003441493958, 7.8226701589301229e-05, 0.00016559647337999195, 0.00010620440298225731, 0.00023940381652209908, 6.6378299379721284e-05, 0.00011648804502328858, 0.00017186124750878662, 0.00054271647240966558, 0.00021485454635694623, 0.0001982575049623847, 0.00017924791609402746, } };
const TfArray<51, int> quant51_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const ALIGN(16) int8_t tensor_data52[102*1*1*51] = { 
  /* [0][0][][] */ 48,26,-11,45,23,-58,-5,45,-12,9,24,-9,-42,-11,42,23,-15,30,-28,4,-19,5,30,-52,-13,32,-81,22,20,23,-18,30,45,21,-32,-21,-26,0,17,72,-30,-59,-52,41,18,-21,39,-46,-4,6,127, 
  /* [1][0][][] */ -22,15,63,74,41,-15,-1,8,52,4,-18,62,-6,-67,-12,42,-3,20,-82,79,-3,-53,-42,14,36,-43,35,-6,12,-127,38,29,52,-40,47,7,13,30,16,-24,-22,-33,30,-22,32,-4,-13,53,16,24,-59, 
  /* [2][0][][] */ 39,-33,37,117,47,27,-34,66,38,9,70,120,84,62,-47,16,-45,-74,26,40,13,94,53,22,71,-31,-58,-32,46,33,127,-17,1,-9,74,34,29,-51,-38,-32,-25,69,36,13,29,43,-79,21,56,25,20, 
  /* [3][0][][] */ -77,-52,76,50,-127,105,-88,-43,34,-6,-5,-22,20,95,25,-14,-20,-46,-77,9,-90,59,-2,94,-64,-49,11,14,-30,18,-54,0,-22,-11,27,-82,-50,16,-5,-15,-37,67,-53,-67,-47,-12,71,-96,-62,-42,27, 
  /* [4][0][][] */ 20,21,-6,-22,50,-42,61,-14,-15,38,49,3,-60,71,-44,42,-49,120,21,-11,-42,-21,5,-3,-15,-62,47,-51,-9,9,72,35,-32,53,-14,17,-127,-18,69,-8,-35,8,2,-2,58,-3,-9,-37,-29,-37,-18, 
  /* [5][0][][] */ 31,16,-38,-62,33,36,-19,-15,-13,23,43,-50,-46,-3,-1,40,-2,33,-60,-52,-81,15,8,-21,-28,49,40,18,-18,-25,-22,53,-26,-7,22,39,87,22,55,-47,-4,-33,127,54,-58,-73,76,26,11,-75,19, 
  /* [6][0][][] */ -85,-61,-33,-8,63,-20,37,84,-69,89,60,35,60,34,-16,27,32,6,-42,-16,-69,-3,-97,-70,-44,-53,-42,-37,47,-37,-36,117,-13,15,-25,-127,72,-70,-12,72,28,-55,-39,-24,-70,-69,17,-126,-39,-56,13, 
  /* [7][0][][] */ -15,2,70,36,9,-8,62,127,82,-22,-7,-33,-16,-4,11,-51,23,-13,22,35,24,-11,-42,-69,-19,19,24,24,-2,-46,12,-15,17,46,-20,0,-8,-22,20,-38,-45,25,36,-1,-56,-5,20,11,32,8,-15, 
  /* [8][0][][] */ 21,29,-13,-35,-1,6,-2,-127,-97,-12,-110,-45,-9,-81,49,21,26,5,-57,-14,-51,49,-19,-85,-56,81,-31,-43,32,-9,3,-15,-17,-42,-40,56,11,49,46,4,23,-34,61,93,23,-41,100,12,-56,-80,18, 
  /* [9][0][][] */ -32,-4,2,-56,79,-45,-84,-7,-44,-32,-22,-23,-52,2,57,49,-51,20,-53,-80,53,-108,127,59,-3,114,64,-8,-15,-64,-126,-1,-5,119,50,60,2,11,81,-62,-2,-10,29,-18,-26,50,-84,-40,22,51,38, 
  /* [10][0][][] */ -5,18,-18,88,28,-52,-44,-28,116,36,49,97,57,-19,17,-5,18,22,-69,-109,-119,23,-17,14,-82,32,86,21,8,30,3,12,-28,-13,30,-15,10,25,9,40,-29,127,54,-23,16,40,-7,-41,-102,69,-22, 
  /* [11][0][][] */ 11,8,-31,2,30,-11,-14,-11,12,-56,-5,11,13,-4,-12,46,-7,7,-80,-28,2,-3,40,-8,-17,27,21,14,-6,-32,-3,-18,1,-38,-8,-39,-127,-18,12,0,1,-8,-44,-44,8,40,20,-39,-28,-21,5, 
  /* [12][0][][] */ -3,-8,28,-113,-3,-92,22,-48,-127,-3,21,-74,-38,-7,-6,115,-1,-34,26,35,-69,-93,20,-64,-83,13,62,-52,-49,13,65,-22,-6,-48,-73,32,13,5,-16,-1,-32,46,2,-14,-30,4,-14,-28,-15,2,49, 
  /* [13][0][][] */ -49,14,71,-7,-8,-1,42,30,127,-45,12,-56,-11,3,-46,1,36,48,41,15,25,36,-51,-67,15,-18,-42,-62,-71,-6,-14,23,23,-41,10,17,-43,-18,-28,-29,-38,62,10,5,-34,30,-20,11,-46,51,-25, 
  /* [14][0][][] */ -13,-2,-19,11,61,-21,-71,27,-37,43,47,-39,40,19,-127,53,-101,-80,8,-3,-13,-21,-15,5,-42,-52,12,-60,-90,-53,-19,84,18,-18,37,-10,-95,-100,68,29,-5,21,-19,-4,-20,1,-27,-84,-103,-77,-45, 
  /* [15][0][][] */ 102,-72,15,30,22,-51,-30,43,-71,15,-68,-65,-5,-2,39,3,68,-1,-19,16,28,-31,125,-127,63,96,25,-70,-24,7,-76,50,29,-22,-11,-24,44,6,-32,15,68,62,-78,-39,5,26,0,-21,-10,82,-28, 
  /* [16][0][][] */ 28,45,-33,35,-16,-8,20,49,127,-9,84,2,0,56,-25,-3,38,55,-9,71,-12,-10,47,-5,83,-4,-30,34,54,-40,-13,-40,-23,60,-8,-16,4,8,-13,-22,50,23,49,28,24,58,43,42,8,-29,28, 
  /* [17][0][][] */ 34,-102,-18,9,36,-26,28,73,-32,-48,8,-19,11,-21,-63,60,-5,30,4,6,106,-66,16,34,48,56,6,43,77,-29,-70,-54,12,12,8,-46,50,-7,4,-53,39,-6,18,-22,-30,127,-87,-24,-7,27,24, 
  /* [18][0][][] */ 9,37,45,114,15,32,-85,57,12,-127,-8,47,72,29,-55,-5,-42,-31,-53,35,-52,-17,24,-1,-26,16,-29,-10,-78,90,-7,-37,-23,42,-47,-39,34,-55,22,-104,32,-51,31,-51,58,-43,1,-97,-54,58,52, 
  /* [19][0][][] */ 27,-68,24,19,-46,-66,0,-63,18,47,-21,-74,81,77,-24,15,-12,57,40,26,24,-37,-47,27,-7,-59,-32,40,-34,-105,-43,-47,70,-26,127,-84,98,29,-22,-29,-70,104,-76,-83,-91,20,87,-70,19,-35,32, 
  /* [20][0][][] */ 2,-86,-17,21,0,-10,-32,29,29,-20,22,-45,127,29,9,-17,-80,-5,-50,-74,-52,1,21,26,-33,21,54,-9,-12,22,-22,-1,-3,-42,-17,-11,-116,-43,1,-87,30,91,-16,-13,-111,-40,-34,-8,-62,-45,-10, 
  /* [21][0][][] */ -26,-10,-10,-28,-10,23,-12,-31,-2,59,60,-20,22,-7,16,-60,-88,-44,47,-57,-17,-51,-60,-22,-84,17,16,34,-1,127,-28,-38,48,99,7,21,24,-26,-43,-11,49,53,-18,45,-8,-29,14,-70,-54,25,-14, 
  /* [22][0][][] */ -71,103,8,-22,27,66,29,-9,89,-53,-5,5,33,12,-53,-17,32,10,30,34,-29,94,40,-35,-26,-71,12,-43,-33,14,21,-12,-37,35,-35,-40,80,-2,-4,-54,-34,-57,20,65,110,-51,31,-24,127,-36,-71, 
  /* [23][0][][] */ -35,49,37,-51,9,7,-21,-61,-12,-30,25,57,-28,30,-86,-16,19,-13,-23,66,91,79,-56,56,127,17,31,39,-56,20,-47,9,-69,10,-12,-34,16,-62,-8,-50,-24,-71,50,-12,18,22,-47,16,33,91,-63, 
  /* [24][0][][] */ -50,-44,50,-42,50,-43,80,3,35,29,-127,21,80,22,-81,17,19,-48,40,-17,64,-51,-45,-39,54,-3,76,-22,-58,-13,-49,14,-21,-1,37,-60,-12,22,20,-118,39,-6,63,-11,-73,10,70,29,-36,-100,-18, 
  /* [25][0][][] */ 26,-127,-25,-55,-36,-28,-78,100,12,-44,-37,-3,24,-11,-24,-110,-58,71,56,-33,16,26,10,0,-44,28,48,-22,-97,-28,19,-113,-17,89,-56,34,-10,44,36,-93,71,49,10,-94,-10,-43,-4,4,-94,9,8, 
  /* [26][0][][] */ -9,37,87,79,-9,51,37,48,-22,127,-8,-23,-21,6,-35,-17,55,1,7,78,101,-24,-96,64,-18,-6,-53,-39,-125,-45,-67,-34,29,-78,-20,-91,-5,-107,17,-81,-5,-100,-46,39,-73,28,-37,-2,27,2,10, 
  /* [27][0][][] */ -49,-4,4,8,-56,13,54,-12,-7,-15,-59,-23,-107,-42,-19,-43,116,18,31,25,31,-3,-74,-64,58,-55,-7,-4,34,9,127,-52,-8,9,57,-17,-20,-14,-26,-89,-21,-1,38,-4,0,4,3,107,84,-4,41, 
  /* [28][0][][] */ 59,60,100,6,22,-21,5,-36,3,-35,48,-53,-127,82,30,83,59,32,13,-84,37,77,-97,-19,102,-16,-55,-32,41,-1,-38,24,-12,-86,-33,-40,-94,70,-5,-16,-36,-21,26,-12,-44,16,-2,-19,78,17,35, 
  /* [29][0][][] */ -9,7,6,14,-23,1,-1,34,127,-8,-10,-11,-12,12,-7,10,49,-5,15,-14,8,44,-37,-47,12,-25,19,-7,-44,37,19,-11,38,-40,-14,-9,21,12,24,-22,-33,36,-31,-5,16,41,11,1,0,23,1, 
  /* [30][0][][] */ 50,112,-15,-35,4,-36,2,-26,-49,42,42,-20,-18,-43,15,52,-32,-20,16,38,-31,-45,41,-85,-4,-42,8,9,13,-36,-58,6,127,9,-33,-9,-14,-22,57,11,-114,-19,26,23,36,45,38,-70,-32,-38,-12, 
  /* [31][0][][] */ 41,10,-30,11,-18,28,-76,73,56,37,-51,78,-48,-127,22,-84,16,-36,56,71,31,49,-62,-27,-39,0,71,52,-49,-78,41,-27,18,-88,59,82,56,8,0,-7,-28,-8,15,-4,12,-2,6,40,9,-37,55, 
  /* [32][0][][] */ 53,-40,27,36,56,-43,-3,-30,-42,110,2,-89,10,-82,-16,16,4,-72,-3,-80,38,46,70,-72,-6,-22,35,-31,22,22,73,48,60,-25,100,-6,-127,-78,0,29,115,58,24,18,8,82,31,-57,-7,-10,-34, 
  /* [33][0][][] */ 0,34,-19,1,14,-16,-34,-21,-25,8,24,5,2,-17,-48,0,-35,20,3,6,-14,2,-36,0,-13,-17,0,-15,-25,15,38,-13,-20,6,-19,-32,8,-35,127,-9,-6,17,15,-12,20,0,-28,-70,-5,-2,-20, 
  /* [34][0][][] */ -25,-104,-72,-1,9,13,13,1,13,5,-48,-54,13,-2,-41,24,5,30,-49,-32,-11,32,43,-30,-26,48,19,-67,-24,13,29,64,-49,5,-6,30,11,23,17,-4,49,67,32,127,-53,-10,40,11,24,-22,3, 
  /* [35][0][][] */ 78,-13,-51,-34,-4,-43,28,14,-33,35,31,-59,-120,22,-5,0,-4,39,-46,-9,-6,-14,41,-127,-26,8,-28,50,38,-20,-13,-1,11,-12,-76,-6,-40,12,-48,67,-76,-22,-42,47,-8,-4,15,-76,-2,-26,66, 
  /* [36][0][][] */ -10,-40,39,-20,-11,-42,-5,4,127,83,-39,-51,1,-16,-107,-11,20,62,18,-3,-24,-8,-30,91,69,-57,80,56,14,66,26,-19,-34,49,10,-21,-14,76,57,-5,-30,4,46,-99,116,-25,62,59,28,17,-13, 
  /* [37][0][][] */ -16,31,2,41,-52,13,5,-24,-62,-21,10,21,-20,-2,-14,-3,45,50,20,33,-23,28,-42,48,11,0,-50,-27,10,-47,7,21,-15,10,-35,-34,39,37,-18,-44,127,-10,37,-4,12,-15,-31,-65,28,-34,-9, 
  /* [38][0][][] */ -30,21,-50,11,-24,16,-37,-14,-28,-13,12,15,21,18,-26,16,-48,19,-33,-12,-26,-9,11,-22,-52,27,20,3,-41,-43,-9,12,-44,19,16,17,47,-81,50,-72,28,2,127,4,-29,-18,-6,-9,-20,-69,5, 
  /* [39][0][][] */ 18,30,-11,19,18,10,-12,22,-7,54,17,-35,6,48,-4,14,-46,-17,-46,-11,-22,-28,25,-7,-3,75,-18,90,3,-12,-28,-14,127,23,-16,-8,-10,-11,-15,84,-1,-3,21,-10,-17,32,-11,-28,-41,-64,7, 
  /* [40][0][][] */ 18,26,-11,5,13,21,-26,-5,-10,-57,-56,-21,8,77,-43,35,-90,-16,-31,28,-30,8,1,-21,-10,-31,-56,-19,6,-14,127,-10,-3,-3,31,-19,4,-34,13,-8,12,99,-11,7,11,15,-13,-72,-50,-37,-36, 
  /* [41][0][][] */ 14,-26,59,-15,49,5,-38,79,-39,-2,8,87,4,7,54,1,-36,-46,-29,-7,50,-32,-13,83,39,60,-21,-16,-25,75,15,-40,3,-57,24,24,-35,-127,13,-26,8,1,-16,-36,-66,82,16,28,-40,8,67, 
  /* [42][0][][] */ -114,31,40,-21,19,9,-36,-52,65,-62,19,-74,-52,65,46,79,-21,-16,26,-127,-33,100,54,64,8,-43,101,26,67,15,-40,-20,-48,1,37,8,50,8,50,-34,18,11,-15,-7,-5,-23,48,-46,-24,7,-44, 
  /* [43][0][][] */ -22,18,28,5,-40,5,39,-19,-33,43,18,-4,-24,5,24,-1,-49,26,0,16,2,-45,4,-12,10,-51,-12,-26,79,1,-3,-41,14,-7,-32,34,6,-4,7,-13,7,17,85,35,58,-12,-1,45,-7,127,-12, 
  /* [44][0][][] */ -17,62,-69,24,-25,37,-35,9,6,40,5,-15,13,8,-17,-26,107,-4,29,23,17,-5,-38,-38,24,-19,-51,3,-11,0,36,-8,-91,47,-68,-15,-16,-26,-46,7,15,-40,-40,-4,48,26,46,47,127,-18,-39, 
  /* [45][0][][] */ 87,-32,-39,-42,-52,63,-13,-77,-23,-22,41,26,-51,81,18,80,53,99,18,-88,10,87,127,35,47,61,-28,81,7,89,36,-6,70,-44,26,113,-4,2,-44,82,-29,-34,71,69,17,-41,29,3,-58,40,119, 
  /* [46][0][][] */ -77,58,-19,69,31,-57,27,-45,33,12,-7,18,60,-75,-74,-30,7,-9,77,-59,-50,1,-9,-87,-36,13,25,15,74,14,58,10,50,41,-2,-127,58,-81,-52,-68,80,40,32,11,51,-33,-30,62,-10,-75,39, 
  /* [47][0][][] */ 46,2,79,127,92,30,-19,66,-25,70,-90,-54,8,13,-92,-102,-65,97,-105,-62,0,30,-49,81,14,7,-42,74,47,17,-57,-28,-8,20,51,-89,43,-7,30,4,-50,-13,38,-84,-13,36,-32,-58,-78,-40,-58, 
  /* [48][0][][] */ -3,-53,-5,-46,73,46,-29,43,-83,-5,-83,-4,95,72,25,4,-43,-37,17,18,1,2,-38,31,-47,55,-7,-13,-44,-44,40,11,37,-9,13,-9,-48,-53,-10,-29,46,40,-29,24,-127,18,-61,-64,-54,-30,20, 
  /* [49][0][][] */ -17,-94,50,-9,48,20,5,26,-46,21,-40,127,19,26,30,-82,-37,88,-19,45,-7,-17,23,90,-40,43,-49,104,7,8,-24,-115,24,-57,-35,-51,101,95,31,-97,25,42,-40,5,-29,38,-46,33,-70,25,51, 
  /* [50][0][][] */ 95,127,-87,-82,6,-10,45,59,-39,53,33,-104,1,-53,-47,-27,-32,5,-63,101,25,29,-37,13,-47,115,-54,56,52,-16,-65,-2,24,-70,-57,69,-48,11,-7,112,-86,-57,23,56,-48,31,32,7,-59,10,-29, 
  /* [51][0][][] */ -8,-49,-34,-68,-30,-20,14,-35,-103,72,-11,29,-17,24,42,-4,-35,41,29,-20,3,33,34,-68,32,-48,5,-44,22,75,-44,28,-40,-13,22,80,14,13,1,6,-37,23,37,127,-4,54,59,28,-15,-125,-8, 
  /* [52][0][][] */ -45,32,-48,58,7,-40,-23,-79,-48,-76,-47,10,-9,-127,48,29,4,-31,2,-59,-40,-6,0,-66,-37,22,-60,-14,-1,-74,16,7,4,-69,29,-25,15,28,40,-9,42,12,-21,16,36,-48,31,12,-10,-25,24, 
  /* [53][0][][] */ 6,7,-32,-33,-21,-26,-13,62,27,-81,-76,-12,-99,-33,33,72,7,24,10,-23,-45,-22,-1,-127,-25,-10,-5,3,8,-81,23,38,-27,-29,-48,32,-71,35,-37,43,-118,9,-58,35,6,-93,12,36,7,4,71, 
  /* [54][0][][] */ 46,9,-42,-56,-53,5,22,-32,-54,41,-45,-74,-127,-83,-3,-14,1,1,-78,-39,-47,-11,27,-68,-34,42,-97,28,56,20,-55,38,-8,-51,-33,-6,-34,10,-60,40,-75,-9,6,17,-17,1,42,2,-29,-66,-23, 
  /* [55][0][][] */ -31,-127,-101,-46,27,-1,-40,25,-42,111,-44,7,47,-57,-28,-71,32,63,3,41,71,-63,-57,67,72,33,14,-15,23,-59,23,-3,-61,83,35,-14,25,-26,20,45,8,-62,60,-24,51,115,-80,91,44,-46,-34, 
  /* [56][0][][] */ 34,-49,-86,23,61,89,21,-40,1,-10,-38,-28,32,85,-19,57,-31,29,42,55,-12,71,-36,-31,-11,-2,47,48,-26,-19,-127,-17,11,6,31,-47,29,-24,-19,10,23,-96,-89,117,-16,55,20,-12,-53,-34,-14, 
  /* [57][0][][] */ -15,2,-9,-7,34,-29,-51,10,-19,-35,4,11,-14,11,-35,0,-51,36,11,-2,9,-16,-11,-13,-23,-25,21,1,-12,18,24,2,-29,9,-8,-12,-7,1,127,-20,-3,26,0,-7,-1,5,63,-32,-10,10,-27, 
  /* [58][0][][] */ 56,-31,-17,-34,-25,25,14,11,10,-30,14,24,-8,112,-48,25,21,-33,44,-40,-20,-55,-63,14,92,-29,27,50,37,-11,-20,-73,-46,47,50,-62,64,-11,38,-77,-36,76,30,-30,-68,123,-28,9,-13,-6,-127, 
  /* [59][0][][] */ 114,11,75,-19,24,16,59,-56,-23,41,16,-10,-54,-39,7,32,-18,-2,77,-120,-3,-16,-115,7,127,-39,24,27,107,69,24,-79,21,46,-125,-14,-10,53,-25,-10,-46,-28,27,0,8,3,1,-19,60,-4,-31, 
  /* [60][0][][] */ -58,-18,15,13,-1,23,-90,66,1,52,-35,-67,-15,-43,-43,-29,-73,-11,-49,-43,-91,-22,-38,-12,-111,27,-30,38,-22,34,-33,2,44,13,68,-70,6,-53,13,12,55,-39,-32,50,12,-69,60,-123,-127,21,4, 
  /* [61][0][][] */ -9,79,1,91,1,28,-100,4,-32,3,17,-77,63,-78,6,83,-4,49,-17,110,-22,54,13,1,-127,3,75,70,31,89,-38,30,-11,1,7,-99,21,-25,117,-45,-4,14,94,80,-38,-10,10,-49,-49,11,-7, 
  /* [62][0][][] */ 27,15,11,-24,73,-20,-85,-10,63,-9,37,127,44,54,59,-20,-80,27,27,-28,-14,44,18,-13,19,102,-1,-12,-22,29,11,-84,-78,-76,56,-48,-50,8,-34,-116,54,-27,75,75,5,50,-58,-21,-30,-20,70, 
  /* [63][0][][] */ 36,42,104,-54,-9,-51,59,96,16,45,-46,-28,-1,18,-74,-68,20,-37,127,49,38,-2,-21,-7,-9,42,68,-32,57,55,-14,-34,30,-51,12,-48,44,-53,32,-51,-39,42,-39,9,-56,-28,25,74,-30,110,11, 
  /* [64][0][][] */ 18,23,-11,-52,16,-8,15,-13,-48,0,-30,43,-87,1,26,59,-33,33,-66,-53,-29,-15,29,-28,-28,127,-76,27,40,16,-19,40,-52,13,9,50,-46,68,-24,54,-42,19,13,42,-126,-29,111,16,-34,-31,79, 
  /* [65][0][][] */ 67,127,4,83,36,2,-26,-1,-28,75,-44,45,-4,54,-21,-43,30,-9,19,-68,-37,29,89,13,27,-27,-32,-21,84,57,20,35,-23,40,80,-8,38,-19,-15,11,92,43,5,62,-56,101,17,40,0,3,18, 
  /* [66][0][][] */ -59,-9,13,0,-66,-28,56,-36,0,-50,24,56,-19,7,2,9,126,-9,-42,127,62,14,-52,64,-28,-36,47,-17,26,9,76,12,41,81,6,-7,124,-13,14,-41,-15,-25,0,3,44,-12,37,107,79,15,29, 
  /* [67][0][][] */ 77,32,-41,34,-80,-56,14,13,-9,-78,14,-53,-69,16,43,43,22,19,-20,33,-38,-40,79,-27,-23,-104,16,77,8,-8,11,108,87,8,-92,-88,-8,25,-2,127,-72,-41,-50,-25,-48,-39,66,4,53,-11,114, 
  /* [68][0][][] */ -11,-20,-18,-76,11,-25,-13,-101,16,62,91,55,-3,61,95,123,22,-98,37,4,-60,26,91,58,-54,-19,65,-53,-39,-64,126,7,-32,-63,-19,81,21,-57,23,3,37,-10,65,97,-68,27,-36,-69,-51,-21,127, 
  /* [69][0][][] */ -54,42,-10,-13,53,-31,85,-14,-2,34,-9,-5,-4,-38,19,48,22,-39,21,76,106,75,-14,3,-24,24,31,-35,-71,48,12,22,19,-23,-79,38,-44,-18,21,4,56,-6,-48,-127,-15,-31,-30,-5,-15,15,-30, 
  /* [70][0][][] */ -7,8,-46,10,-23,52,25,-84,-104,-23,-91,-6,-43,-32,127,25,41,-12,-58,-83,-89,48,-27,-47,-77,14,10,26,38,-46,0,-112,-3,7,0,-2,-20,102,115,-64,-27,-2,127,64,74,-42,43,59,-22,38,-59, 
  /* [71][0][][] */ -18,-65,-24,0,31,-49,44,21,36,-31,20,-33,48,127,-72,65,-97,-38,23,-55,-55,-78,-75,-42,-13,25,-116,21,-65,25,-49,-38,120,4,87,-91,-116,-110,35,-40,28,57,-37,25,-48,-20,21,-109,-55,21,-46, 
  /* [72][0][][] */ -56,-19,-9,33,41,-46,48,11,19,-45,-51,57,12,26,11,-22,-1,-127,86,54,90,-45,25,-12,3,35,-33,-47,-11,-29,34,-74,-27,9,-52,27,-34,15,-51,-34,-23,-43,-34,-54,-1,-50,-34,40,100,-60,38, 
  /* [73][0][][] */ 38,19,-11,-92,2,85,-58,-4,46,20,-28,39,-7,83,-13,-36,16,-45,40,29,6,75,22,-24,-7,-48,-26,-16,-50,19,70,-52,67,127,32,3,47,-5,24,-15,-33,-27,20,50,-11,-10,11,48,-9,-12,38, 
  /* [74][0][][] */ 58,25,26,63,-43,58,-41,56,-9,25,127,38,-69,-39,-5,-22,101,-70,50,6,-18,51,26,16,37,-21,-23,-15,29,27,25,28,-5,-19,4,22,-93,-121,-12,-9,-27,47,-58,10,-69,1,-36,-9,-89,62,4, 
  /* [75][0][][] */ 8,75,24,53,-3,113,57,16,70,-44,-18,8,-5,18,26,53,80,25,7,2,-10,23,-11,-18,-11,-18,-60,7,39,-4,41,127,-8,-21,25,9,-16,56,-13,-34,8,-2,-20,39,3,-13,35,57,95,53,21, 
  /* [76][0][][] */ 0,31,26,-33,-7,48,86,36,-6,122,18,-43,-10,-32,-2,-54,23,10,67,9,-6,42,25,-29,29,-34,-99,-30,-69,76,-66,0,19,-12,20,38,39,-25,47,-24,-127,-34,78,44,61,-59,49,58,-19,9,-48, 
  /* [77][0][][] */ -38,42,47,41,-23,-44,2,77,-22,46,-53,-86,-81,-27,12,-86,11,15,35,-28,-5,84,-94,8,97,-95,64,-26,11,-11,-15,34,19,-7,53,-61,28,127,-12,-61,113,79,23,27,68,-69,14,76,-23,-2,-85, 
  /* [78][0][][] */ -23,-66,-32,-65,-13,-48,-18,31,-40,43,41,-25,44,1,32,98,9,-17,23,-11,30,85,127,-11,-57,53,60,12,24,57,51,-28,21,1,-87,68,1,-10,53,-30,-16,-28,84,17,-29,13,29,-9,-48,-11,28, 
  /* [79][0][][] */ -2,-71,-5,84,-12,39,-73,21,-31,-43,-17,6,-56,-20,19,21,21,-31,-2,-35,73,81,-22,17,36,22,-3,14,-19,0,-86,-39,-10,-17,45,-17,7,-64,-32,-40,25,11,36,29,-6,127,-29,-48,35,40,49, 
  /* [80][0][][] */ -30,29,-66,79,-46,18,-47,100,3,-25,-80,-3,-52,16,-5,77,44,-23,9,1,30,87,1,-127,109,-7,29,-11,1,-68,50,3,-42,123,48,-4,7,31,-48,33,70,85,65,-29,-17,19,-36,102,116,86,-11, 
  /* [81][0][][] */ 127,-91,53,-64,-13,36,-98,-14,-81,36,-43,-20,-41,49,79,15,-32,57,108,-66,9,15,-57,-45,-1,26,-24,-14,-61,10,33,-31,-43,3,55,27,115,-9,-34,9,9,18,0,18,23,-54,100,2,-39,10,77, 
  /* [82][0][][] */ -2,49,50,37,19,-119,20,6,33,-42,43,127,-15,-44,-14,18,20,-40,49,16,31,23,30,-24,9,97,-3,-3,0,18,-20,-26,52,48,18,-59,75,10,-18,-25,43,-19,63,-52,-6,-9,6,-18,-32,-61,-21, 
  /* [83][0][][] */ 45,20,-14,43,-20,43,10,33,-7,-42,-80,-127,-48,-50,-7,8,-37,22,-71,-3,-11,1,56,12,-70,42,26,51,77,-69,8,79,4,-35,3,43,-29,25,49,63,19,-9,-17,23,10,2,63,-39,-37,-18,-21, 
  /* [84][0][][] */ -22,-27,52,-27,127,51,-69,-64,54,-18,7,-16,-76,27,54,41,-56,-122,-69,14,-89,-27,26,54,-57,64,23,21,-13,70,72,-30,-16,-35,48,16,-14,-63,34,-23,-109,-64,-5,80,57,5,49,-93,-94,19,6, 
  /* [85][0][][] */ -40,-12,-21,27,72,6,83,20,92,-60,-64,-10,-17,14,-69,-17,41,94,-31,-10,23,108,27,24,-52,26,34,41,69,7,25,127,-18,-52,49,-4,10,45,-43,-31,27,11,-29,55,59,-14,-19,44,-39,-60,-55, 
  /* [86][0][][] */ 86,87,-1,-4,23,20,11,54,-14,-11,20,1,-54,-21,-127,70,33,-60,8,69,96,34,-41,-17,34,-6,-17,29,-92,-33,36,-122,-11,77,61,-83,84,-4,9,-56,-41,48,22,-78,-20,-41,-4,-23,115,21,47, 
  /* [87][0][][] */ 122,-1,-1,-103,127,-66,-100,-46,-24,84,-37,-41,56,-86,-24,-17,-12,37,30,-58,46,-53,84,10,-85,-37,-61,-46,-12,62,46,-1,-108,38,66,77,30,104,111,5,-39,-86,-54,74,-31,-71,53,41,-85,75,11, 
  /* [88][0][][] */ 20,54,17,-42,-4,-9,18,-50,4,14,-17,29,-127,-5,64,24,2,9,17,9,4,-69,6,-29,38,0,-4,-2,37,36,-28,21,-22,7,-27,81,-75,35,-25,59,-93,-30,6,-14,-49,-11,20,4,80,-19,37, 
  /* [89][0][][] */ 5,42,14,-14,-3,-30,9,-32,12,-19,20,12,-81,35,70,41,-7,15,16,32,-38,-20,4,-23,-31,-4,3,-22,-2,49,-59,79,-22,-28,-48,22,-8,24,23,52,-15,2,-12,59,-11,-74,45,4,-40,-14,127, 
  /* [90][0][][] */ -43,15,-19,-75,-28,-20,-37,-39,18,-64,-38,-20,-71,-46,44,27,37,-7,-7,1,-49,42,-81,-77,-83,11,36,-50,47,32,-10,23,-127,-41,-90,52,-9,107,53,20,-124,-57,-3,38,-10,2,75,-52,-58,-94,61, 
  /* [91][0][][] */ 29,31,61,3,6,-7,66,-19,-14,3,7,-30,19,4,32,3,1,-42,71,30,21,19,-14,-29,8,-15,-49,-34,22,24,-56,-1,2,-11,-127,20,-5,50,10,1,5,-12,-55,-14,-54,8,20,5,-16,-21,-27, 
  /* [92][0][][] */ -114,-127,-42,-40,-5,55,35,23,9,-18,22,38,-8,15,39,-58,-36,9,1,-19,37,32,10,21,21,10,-97,-42,42,118,-11,-39,-40,-2,-18,-50,-36,44,55,-90,-6,23,-29,-8,-33,89,-61,1,-18,27,-16, 
  /* [93][0][][] */ -58,80,-76,12,124,50,7,7,-58,-14,42,86,3,29,-32,-4,-43,-30,-19,21,-48,11,-48,-52,-63,84,-76,-39,-7,26,-19,-38,-59,-66,65,84,-7,-40,5,9,30,24,41,127,-13,-9,-28,-16,-35,94,2, 
  /* [94][0][][] */ -25,127,17,27,79,86,2,-55,16,-52,-52,-18,-52,-13,24,43,-51,-19,-45,-2,-48,4,30,-9,-36,63,70,21,53,-125,48,25,87,-13,8,30,16,87,4,10,5,-35,-5,53,1,-3,8,-35,-28,24,-25, 
  /* [95][0][][] */ 26,51,10,13,8,14,9,-31,-95,35,53,2,1,11,100,53,-1,-6,-38,-83,-76,-47,54,-53,-48,69,18,-30,-1,-33,2,17,60,-42,-1,27,3,12,42,14,-91,-13,40,115,-17,-40,11,-5,-27,26,127, 
  /* [96][0][][] */ 103,5,70,-50,-3,-61,-50,-59,-95,127,25,7,37,8,6,18,-47,-21,-29,-5,-19,-67,44,32,-39,55,59,-12,12,86,57,-15,88,8,-106,22,30,23,62,19,-4,-8,65,2,37,-14,23,-24,-26,-75,88, 
  /* [97][0][][] */ 19,-45,-8,62,-66,-25,-14,46,4,30,-1,-98,-62,-56,96,21,-80,63,14,-8,17,50,-89,59,27,-17,107,17,-75,-34,23,55,-90,17,124,-7,-29,-127,80,-23,33,-2,18,-56,34,24,-66,-65,26,-70,-69, 
  /* [98][0][][] */ 76,-36,36,57,37,-81,-27,107,-31,60,-12,3,10,0,-40,45,-22,16,51,57,21,-14,-11,-52,8,-10,13,25,-92,37,41,8,57,-7,-53,51,57,-18,26,23,-87,-42,-127,61,-3,-36,83,43,-29,9,77, 
  /* [99][0][][] */ 66,-43,-25,6,77,82,7,-20,-45,42,15,-63,9,49,-40,57,-78,-24,-34,-5,26,-37,7,-34,-25,36,27,-10,10,-27,-127,-10,70,59,59,-89,-27,41,8,-20,16,-39,62,18,43,-9,0,-52,-28,45,13, 
  /* [100][0][][] */ 7,-1,-54,-6,-17,-53,20,-10,-22,10,35,-43,-127,-9,-4,-2,27,-7,-81,-2,-40,-17,72,-59,-33,-40,-16,25,46,17,-24,88,-1,-21,-51,-36,-11,-11,-25,79,-71,-9,-26,20,-23,-30,44,-53,-4,-40,53, 
  /* [101][0][][] */ 9,-18,-24,2,66,35,-30,35,1,3,-72,-45,127,-5,-40,-34,27,36,-2,-9,47,28,-46,-16,-12,-21,48,-10,56,-26,5,-2,1,-11,70,-42,13,-56,-1,-76,32,21,-12,35,-51,2,28,86,21,28,47, 
};
const TfArray<4, int> tensor_dimension52 = { 4, { 102,1,1,51 } };
const TfArray<102, float> quant52_scale = { 102, { 0.0042340611107647419, 0.0033994792029261589, 0.00081092189066112041, 0.0020472272299230099, 0.0037729453761130571, 0.0014132818905636668, 0.0014766814419999719, 0.0080375485122203827, 0.0016452790005132556, 0.0019327858462929726, 0.0037629024591296911, 0.0017153091030195355, 0.0021337452344596386, 0.0032586760353296995, 0.0031160463113337755, 0.00242022261954844, 0.0035813609138131142, 0.0053804665803909302, 0.0022578234784305096, 0.003232303075492382, 0.0024604359641671181, 0.0034569469280540943, 0.0026294342242181301, 0.0033178250305354595, 0.0015261562075465918, 0.0039903586730360985, 0.0020542985294014215, 0.0017360899364575744, 0.0016442997148260474, 0.0041315029375255108, 0.0028954069130122662, 0.0033979360014200211, 0.0021085389889776707, 0.0058619249612092972, 0.0036738794296979904, 0.0037893571425229311, 0.0032400237396359444, 0.0073694195598363876, 0.0011230517411604524, 0.0034852155949920416, 0.0066444580443203449, 0.0029928360600024462, 0.00363880954682827, 0.0041420343331992626, 0.0051755965687334538, 0.0010142300743609667, 0.0017062226543202996, 0.0036430961918085814, 0.0018907779594883323, 0.0023679947480559349, 0.002158469520509243, 0.0038456791080534458, 0.0027582829352468252, 0.0026273992843925953, 0.0028494410216808319, 0.0018563255434855819, 0.0041617108508944511, 0.0033799870871007442, 0.0016271712956950068, 0.0018011825159192085, 0.002079688711091876, 0.0018578075105324388, 0.0037436175625771284, 0.0050684483721852303, 0.0020579609554260969, 0.0027475450187921524, 0.0036217400338500738, 0.0028447685763239861, 0.0016535255126655102, 0.0020318753086030483, 0.0017250984674319625, 0.0017434787005186081, 0.0015858460683375597, 0.0030182758346199989, 0.0046137785539031029, 0.0014599753776565194, 0.0026329273823648691, 0.0018752777250483632, 0.0049608922563493252, 0.0029420314822345972, 0.0016733051743358374, 0.0034152367152273655, 0.0032239975407719612, 0.0030738119967281818, 0.0010541204828768969, 0.004514781292527914, 0.001304935198277235, 0.0012829512124881148, 0.0017328808316960931, 0.0032522298861294985, 0.0024565588682889938, 0.0031065403018146753, 0.0014792333822697401, 0.0014304622309282422, 0.0020833536982536316, 0.0023717761505395174, 0.0013039491605013609, 0.0029347257222980261, 0.005125709343701601, 0.0043920008465647697, 0.0029588032048195601, 0.0022667641751468182, } };
const TfArray<102, int> quant52_zero = { 102, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const ALIGN(16) int32_t tensor_data53[102] = { 730, -8680, -39485, 24057, -1467, -20918, 36313, -6378, 19168, 8667, -7381, 29439, 14129, -3266, 25301, -9594, -28692, -8444, 16201, 5178, 17722, 11196, -355, -1877, 20953, 16638, 13377, 5617, 5534, -6744, 17307, -3550, -896, 7267, -12489, 17836, -12724, -256, -32194, 1785, 2961, -8053, -5420, -9860, -3887, -33537, 16868, 15266, 13809, -646, 10424, 2871, 19468, 22060, 30002, -13858, -6696, 7080, 9472, 15587, 34429, -13544, -8634, -10941, 183, -33659, -19327, 4432, -28218, -9793, 18624, 18447, -4232, -6507, -5075, -38034, 6673, -1648, -3282, -301, -36187, 1327, -2427, 2272, -8076, -21889, 7634, -215, 16846, 515, 29912, 10133, 17834, 8715, -857, 6014, 15336, -1937, 590, 519, 17716, -5419, };
const TfArray<1, int> tensor_dimension53 = { 1, { 102 } };
const TfArray<102, float> quant53_scale = { 102, { 9.8884462204296142e-05, 7.9393204941879958e-05, 1.8938690118375234e-05, 4.7812009142944589e-05, 8.8115324615500867e-05, 3.3006519515765831e-05, 3.4487184166209772e-05, 0.00018771308532450348, 3.8424699596362188e-05, 4.5139284338802099e-05, 8.788077684585005e-05, 4.0060218452708796e-05, 4.9832593504106626e-05, 7.6104814070276916e-05, 7.2773764259181917e-05, 5.6523134844610468e-05, 8.3640959928743541e-05, 0.00012565820361487567, 5.2730381867149845e-05, 7.5488882430363446e-05, 5.7462297263555229e-05, 8.0735335359349847e-05, 6.1409169575199485e-05, 7.7486205555032939e-05, 3.5642642615130171e-05, 9.3192909844219685e-05, 4.7977155190892518e-05, 4.0545546653447673e-05, 3.8401827623602003e-05, 9.6489267889410257e-05, 6.762083648936823e-05, 7.9357159847859293e-05, 4.924391396343708e-05, 0.00013690243940800428, 8.5801686509512365e-05, 8.8498614786658436e-05, 7.566919521195814e-05, 0.00017210925580002367, 2.6228333808830939e-05, 8.1395533925388008e-05, 0.00015517811698373407, 6.9896246714051813e-05, 8.4982646512798965e-05, 9.67352170846425e-05, 0.00012087357026757672, 2.3686856366111897e-05, 3.9848007872933522e-05, 8.5082756413612515e-05, 4.4158208766020834e-05, 5.530337875825353e-05, 5.041001713834703e-05, 8.9813984232023358e-05, 6.4418374677188694e-05, 6.1361650296021253e-05, 6.6547327151056379e-05, 4.3353589717298746e-05, 9.7194759291596711e-05, 7.8937970101833344e-05, 3.8001802749931812e-05, 4.2065752495545894e-05, 4.8570131184533238e-05, 4.3388201447669417e-05, 8.7430387793574482e-05, 0.00011837117199320346, 4.8062687710626051e-05, 6.4167594246100634e-05, 8.4583996795117855e-05, 6.6438202338758856e-05, 3.8617294194409624e-05, 4.7453471779590473e-05, 4.0288843592861667e-05, 4.0718106902204454e-05, 3.703667243826203e-05, 7.0490379584953189e-05, 0.00010775258124340326, 3.4097021853085607e-05, 6.1490754887927324e-05, 4.3796208046842366e-05, 0.00011585925676627085, 6.8709727202076465e-05, 3.9079237467376515e-05, 7.9761208326090127e-05, 7.5294912676326931e-05, 7.1787399065215141e-05, 2.4618477254989557e-05, 0.00010544054384808987, 3.0476134270429611e-05, 2.9962708140374161e-05, 4.0470597014063969e-05, 7.5954267231281847e-05, 5.7371751609025523e-05, 7.2551752964500338e-05, 3.4546785173006356e-05, 3.3407755836378783e-05, 4.8655725549906492e-05, 5.5391690693795681e-05, 3.0453105864580721e-05, 6.8539105996023864e-05, 0.00011970847845077515, 0.00010257306712446734, 6.910142838023603e-05, 5.2939187298761681e-05, } };
const TfArray<102, int> quant53_zero = { 102, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const ALIGN(16) int8_t tensor_data54[1*3*3*102] = { 
  /* [0][0][][] */ 7,-21,-41,7,-6,-127,-22,-23,-11,-6,13,-4,5,-5,3,-19,-13,-6,2,-11,8,-16,10,-9,9,11,-12,-16,22,18,-10,12,-3,-4,-11,-1,17,-12,27,2,2,6,-4,3,-22,5,15,19,-3,13,-8,-6,-6,-6,-7,-6,-6,1,-20,-11,4,-9,3,-8,7,-20,-7,2,2,-6,13,-20,4,10,5,4,-9,-1,-2,-13,-21,0,19,24,-13,-13,5,-21,-2,5,1,-15,5,-1,-6,-4,-9,11,4,-11,-3,-11, -65,127,-101,-65,127,93,-127,-46,-82,116,127,-127,26,95,15,127,127,127,-113,127,-14,127,92,-127,-127,-76,-55,-6,120,-40,-71,-84,127,58,-37,-32,82,127,61,127,127,127,127,49,57,-1,-82,127,-127,17,-19,5,-67,-24,-11,127,127,-100,-127,122,-20,127,-20,-118,-32,127,17,-25,-57,127,127,-127,1,127,127,-11,-23,4,-104,92,46,127,127,-99,103,76,-127,-13,-63,-84,-47,-49,81,127,-127,-70,-127,127,-127,43,-32,-58, -7,-12,67,-7,10,-120,4,8,15,10,-7,-4,-11,-14,1,17,9,10,0,-14,4,0,-6,10,5,-14,-9,16,6,-11,-14,12,7,2,3,11,-24,11,-29,4,3,-4,-23,-12,-23,26,9,5,17,-13,3,5,-5,-1,4,6,1,-5,-14,-2,2,-15,-5,-27,7,-12,3,-7,-10,-15,13,-10,2,-8,3,39,14,-16,-19,3,-8,-1,-11,3,4,16,17,127,-1,-16,-6,-14,15,4,-10,-20,6,17,16,12,-4,16, 
  /* [0][1][][] */ -21,-12,19,13,6,-16,24,24,-3,-6,-5,6,4,-14,-2,19,-12,-17,7,14,2,20,-6,4,17,-11,-16,13,-16,-24,14,-7,-7,-9,8,1,-15,18,-48,-5,3,8,9,19,11,23,-10,-16,11,-2,8,2,-16,-7,-8,-17,-11,-16,-13,2,-1,13,-9,17,-4,-16,8,2,-3,19,-2,16,22,3,-7,-27,-10,-2,18,-15,18,-1,-19,-8,16,6,-11,26,11,9,4,-3,-7,-8,-2,18,4,12,-6,11,-9,-1, 127,99,5,-66,125,54,-74,-115,127,53,119,-17,75,127,18,-36,119,109,-127,-32,3,89,127,18,-125,-95,42,-127,-116,-111,86,-2,87,127,127,127,-110,96,0,13,102,61,121,127,-127,-127,-80,83,-106,127,127,-127,82,127,127,85,-26,-127,-124,-78,-3,86,73,-121,101,74,-72,127,75,111,24,-93,-1,83,118,-127,-127,45,127,127,-127,31,89,127,127,127,75,-32,127,127,96,127,127,89,53,127,22,102,-39,127,127,68, 11,-17,54,7,-5,-65,0,-6,-13,9,18,7,-3,-1,7,-3,5,-1,-9,-15,2,5,-17,2,-5,-15,-8,-10,8,11,17,-11,-18,11,2,6,6,2,19,-6,19,-19,16,22,18,26,10,-5,-21,18,-8,-5,-6,6,-9,-8,7,10,-12,-7,3,5,-6,-22,7,-18,-5,12,7,-15,4,5,-8,-16,3,-5,-3,8,11,11,7,-13,0,-7,24,-2,1,17,11,6,-8,12,-12,0,-3,3,0,-6,-16,7,-3,-14, 
  /* [0][2][][] */ 10,-20,28,-2,-16,54,-21,-12,2,9,13,4,11,1,4,-18,-3,-12,-14,6,-6,-1,12,-4,-20,-5,-15,7,8,1,2,-12,-16,-5,8,-8,-13,21,43,-5,21,-16,12,0,18,13,6,20,-17,12,0,-2,13,3,9,-4,10,-8,-17,16,-6,-12,11,16,-11,3,18,-3,-14,20,2,6,32,8,2,-18,-3,12,3,11,-16,13,-11,1,21,-9,9,124,-14,-17,13,-8,14,-15,-7,9,4,3,3,-9,1,2, -121,118,-127,-127,4,-11,-109,-127,-76,-127,-44,-13,127,-10,127,-46,114,74,21,-6,127,-117,82,49,-113,-127,127,-49,-127,-127,127,127,44,-33,120,-12,-127,123,-127,-20,-35,75,108,92,-91,15,-127,-25,55,77,60,-61,-127,32,-40,95,1,-24,-92,-127,127,-95,127,-127,127,53,-127,17,127,-54,37,-82,-127,70,108,-8,70,127,126,84,-99,79,38,-49,106,-1,-52,-12,89,124,-127,123,62,-4,-97,86,-27,69,-65,-23,-22,127, 20,7,-50,10,-26,-116,-25,-12,-7,-1,22,-6,-10,13,7,-9,-19,-7,-8,-9,0,-19,-14,4,15,-7,1,16,23,8,17,10,17,9,2,-2,-24,-6,15,1,-2,-3,-17,-15,3,-12,-14,-16,18,5,0,-4,14,8,6,-10,9,12,-1,14,-5,-4,-15,-16,4,19,-8,4,13,14,-3,-19,-36,-2,15,23,4,10,9,-14,-13,-12,-8,5,21,-16,2,-6,-5,20,-1,2,12,-12,-2,12,10,1,-14,-9,10,-14, 
};
const TfArray<4, int> tensor_dimension54 = { 4, { 1,3,3,102 } };
const TfArray<102, float> quant54_scale = { 102, { 0.0077147521078586578, 0.0057590147480368614, 0.011707085184752941, 0.011414915323257446, 0.0051785353571176529, 0.0070448955520987511, 0.018825327977538109, 0.0058137350715696812, 0.01166821550577879, 0.0071209762245416641, 0.004847818985581398, 0.027051309123635292, 0.022064037621021271, 0.0061947638168931007, 0.017195895314216614, 0.014209505170583725, 0.0053450060077011585, 0.0046098907478153706, 0.017597183585166931, 0.010419277474284172, 0.016635950654745102, 0.0047828829847276211, 0.0062296981923282146, 0.011779502034187317, 0.014062151312828064, 0.0044786445796489716, 0.0058584227226674557, 0.025657514110207558, 0.010733724571764469, 0.0070116333663463593, 0.011260500177741051, 0.0040991068817675114, 0.0072746062651276588, 0.006238237489014864, 0.010553617961704731, 0.011033180169761181, 0.0066426726989448071, 0.0037863135803490877, 0.055545642971992493, 0.0073554599657654762, 0.003371465252712369, 0.0091567644849419594, 0.0064357025548815727, 0.013475822284817696, 0.0095342546701431274, 0.010627414099872112, 0.0087216058745980263, 0.0042924312874674797, 0.011039081960916519, 0.0053897206671535969, 0.017197223380208015, 0.0057004685513675213, 0.0099490610882639885, 0.010238783434033394, 0.014742370694875717, 0.0099397776648402214, 0.0063473065383732319, 0.015549721196293831, 0.0088129583746194839, 0.0090063232928514481, 0.025385502725839615, 0.010452507063746452, 0.0058590774424374104, 0.0033726852852851152, 0.031612880527973175, 0.0093525247648358345, 0.011118769645690918, 0.01076941005885601, 0.036090288311243057, 0.014861384406685829, 0.0091057512909173965, 0.013484597206115723, 0.012373724952340126, 0.0090891551226377487, 0.0042244787327945232, 0.015249541960656643, 0.0066048605367541313, 0.0069081876426935196, 0.0029855929315090179, 0.0062323533929884434, 0.016969634220004082, 0.0053959698416292667, 0.0092550488188862801, 0.009290001355111599, 0.027886996045708656, 0.0077286968007683754, 0.020653760060667992, 0.013694881461560726, 0.014381574466824532, 0.010677946731448174, 0.012872385792434216, 0.0089661460369825363, 0.0080070002004504204, 0.01050094049423933, 0.011324254795908928, 0.010052962228655815, 0.016888871788978577, 0.0073882825672626495, 0.0026977881789207458, 0.0047154957428574562, 0.018138205632567406, 0.0088412035256624222, } };
const TfArray<102, int> quant54_zero = { 102, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 3 };
const ALIGN(16) int32_t tensor_data55[102] = { 1864, -2636, -473, 13644, -6244, -5402, 5450, 14159, 503, -862, 211, 4891, -937, -5767, -2936, -2410, -1200, -9577, 5357, -2629, -76, -158, 347, -3380, 10055, 12019, -4207, 7744, 1182, 9477, -75, -3485, -5837, 124, -3507, 1117, 7016, -3155, -435, -1770, -707, -2043, -7363, -3146, 9629, -1227, 7807, 2018, 5744, -4110, -1052, 9824, 47, 454, -768, -574, -3478, 6543, 9305, -976, 267, 1225, -6202, 17540, -115, 614, 9989, 1296, -1119, -1469, -2286, 5435, -400, -4181, -7575, -380, -495, -3915, 106, 695, 4310, -3475, -4613, 2357, -1710, -6541, -646, -232, -882, 2080, -49, 19, -1133, -45, 3139, -64, 3481, -5209, 10439, -9148, 783, -5106, };
const TfArray<1, int> tensor_dimension55 = { 1, { 102 } };
const TfArray<102, float> quant55_scale = { 102, { 0.00018152358825318515, 0.00013550622679758817, 0.0002754608285613358, 0.00026858624187298119, 0.00012184789375169203, 0.0001657622487982735, 0.00044294889084994793, 0.00013679376570507884, 0.00027454624068923295, 0.00016755238175392151, 0.00011406632984289899, 0.00063650141237303615, 0.00051915383664891124, 0.00014575915702152997, 0.00040460930904373527, 0.00033434131182730198, 0.00012576485460158437, 0.0001084680188796483, 0.00041405137744732201, 0.00024515946279279888, 0.0003914341505151242, 0.00011253842239966616, 0.0001465811365051195, 0.00027716477052308619, 0.00033087414340116084, 0.00010537987691350281, 0.00013784524344373494, 0.00060370622668415308, 0.00025255823857150972, 0.00016497961769346148, 0.00026495294878259301, 9.6449577540624887e-05, 0.00017116720846388489, 0.00014678205479867756, 0.00024832042981870472, 0.00025960424682125449, 0.00015629817789886147, 8.908973541110754e-05, 0.0013069562846794724, 0.00017306965310126543, 7.9328594438266009e-05, 0.00021545328490901738, 0.00015142829215619713, 0.00031707817106507719, 0.0002243354101665318, 0.00025005679344758391, 0.0002052142663160339, 0.00010099838254973292, 0.00025974310119636357, 0.0001268169580725953, 0.0004046405665576458, 0.00013412866974249482, 0.00023409555433318019, 0.00024091255909297615, 0.00034687932929955423, 0.0002338771300856024, 0.00014934838691260666, 0.00036587580689229071, 0.00020736372971441597, 0.00021191348787397146, 0.00059730594512075186, 0.00024594133719801903, 0.00013786065392196178, 7.9357305367011577e-05, 0.00074383249739184976, 0.00022005941718816757, 0.00026161811547353864, 0.00025339788408018649, 0.00084918329957872629, 0.00034967964165844023, 0.00021425297018140554, 0.00031728463363833725, 0.00029114648350514472, 0.00021386248408816755, 9.939949813997373e-05, 0.00035881277290172875, 0.00015540848835371435, 0.0001625455915927887, 7.0249247073661536e-05, 0.00014664360787719488, 0.00039928551996126771, 0.00012696400517597795, 0.00021776586072519422, 0.0002185882767662406, 0.00065616460051387548, 0.00018185169028583914, 0.00048597084241919219, 0.00032223251764662564, 0.00033839000388979912, 0.00025124580133706331, 0.00030287966364994645, 0.00021096815180499107, 0.00018840000848285854, 0.00024708095588721335, 0.00026645304751582444, 0.00023654029064346105, 0.00039738521445542574, 0.00017384195234626532, 6.3477367802988738e-05, 0.00011095284571638331, 0.00042678130557760596, 0.00020802831568289548, } };
const TfArray<102, int> quant55_zero = { 102, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const ALIGN(16) int8_t tensor_data56[102*1*1*102] = { 
  /* [0][0][][] */ -18,15,22,10,19,1,60,6,-64,90,11,-116,-20,-13,-57,6,2,8,-88,-36,-75,-12,-13,-6,-61,13,-1,-58,56,26,-30,19,48,-2,-2,-47,57,-47,22,-22,39,-43,12,7,-18,-5,-32,-127,-15,-29,-77,78,-4,-60,-74,24,63,50,-44,-87,-68,3,8,15,-45,-14,-38,-52,53,17,62,11,-7,13,-115,-37,-41,-12,-38,10,0,-2,5,-29,-57,15,42,10,-43,-68,-79,-104,-27,77,-47,-79,3,-87,44,50,-47,50, 
  /* [1][0][][] */ -49,-24,-7,5,-11,6,100,16,-48,12,-59,-55,-27,-23,-71,12,-52,14,-18,-114,-59,-11,-33,-5,12,-47,-23,-43,6,6,-65,19,39,16,-52,-49,-21,44,34,-118,7,-3,11,37,-12,4,-15,-19,20,14,-54,15,-71,-38,-57,11,38,-16,-14,15,-60,73,-24,-11,-86,3,-13,-24,-3,53,127,40,-7,7,19,8,16,89,-3,95,-59,90,-18,-52,-5,-22,-38,-4,-50,-66,-47,31,24,-7,-32,-87,-74,-11,28,39,-90,64, 
  /* [2][0][][] */ -41,-28,7,-49,-8,10,8,12,-89,-24,-56,69,2,-34,-82,49,-42,11,43,-33,-62,-26,-70,-8,-17,-30,36,-94,6,61,-48,-4,61,18,-11,-71,1,0,14,-35,30,-14,-7,33,-3,-22,2,-30,-86,13,-59,-2,-16,1,-55,-2,-11,-5,-15,12,-95,45,-80,-6,-51,46,-47,-87,-48,39,-5,-3,-3,-8,11,7,-30,39,19,58,-21,35,-127,-65,-66,-48,-60,15,-2,-63,-82,68,-4,2,-9,-76,12,12,21,-17,-76,66, 
  /* [3][0][][] */ -48,9,26,4,9,37,-11,-26,-78,38,-30,-101,4,28,-92,-52,118,1,-89,-46,-49,-59,45,21,-8,-78,-12,-78,-10,-127,-33,61,32,-38,-10,-46,-103,19,39,-13,-2,-127,1,85,-63,-40,-9,18,-36,-35,-54,-48,-41,-46,-29,-9,27,5,-35,38,-110,-22,17,-24,-51,9,-29,-58,34,-7,27,23,-21,-6,-60,1,32,83,-114,-3,-24,29,-5,-59,15,83,13,11,-84,-16,-76,-119,-5,21,-27,-41,55,55,14,5,-80,38, 
  /* [4][0][][] */ -59,29,-14,-12,21,3,-3,-127,-67,-28,1,-52,82,3,-120,21,-50,-102,-44,-10,-75,-55,39,-14,8,12,-29,-78,9,42,-77,-6,-41,11,15,-70,-30,-54,13,-54,18,-40,-23,18,-34,-8,-47,-21,20,-88,-91,78,-76,-17,-55,-59,-52,18,71,-30,-82,83,-18,-54,-68,-11,-21,-56,37,1,22,73,8,-47,-11,-16,-2,-56,30,-22,17,-66,12,-43,-15,11,20,-16,28,-8,-24,15,-118,-79,6,-62,-26,-3,-20,-61,-59,-93, 
  /* [5][0][][] */ -34,-29,0,41,-14,24,32,-79,-53,7,13,60,17,26,-31,-19,57,5,-41,-37,-33,2,63,12,-55,-28,-46,-46,-38,-85,-46,-2,-8,-15,-9,-29,1,-10,20,-4,-3,-13,11,-51,-24,-9,-32,51,-71,-4,-80,-33,-61,-32,-34,-28,-15,-127,-27,25,-61,30,-3,-1,-55,20,-3,-60,-32,18,20,-18,-14,-21,-50,15,13,72,-7,14,-43,43,8,-60,-38,113,-52,6,-64,-13,-49,23,-9,-19,-13,-49,-23,60,-52,-9,-49,20, 
  /* [6][0][][] */ -43,4,13,110,-39,-10,-43,90,-83,-5,2,-43,56,-56,-92,43,-101,-72,-80,-20,-113,-8,-70,3,-19,4,56,-113,10,8,-48,-22,40,34,-77,-108,-93,-5,-28,-21,-96,84,-48,11,-23,8,-48,37,-57,4,-94,7,58,-68,-80,30,-48,27,94,-55,-101,29,-28,-89,-74,-85,-102,-22,6,127,-5,113,11,-98,46,11,-1,46,-18,10,1,-3,17,-38,19,54,1,-7,-83,-14,-60,-7,-27,1,-42,-80,-1,37,-84,-25,-74,80, 
  /* [7][0][][] */ 0,34,-35,38,-69,15,-46,-9,51,-93,-64,89,-2,-38,-23,-73,-44,-69,47,-29,-60,-127,-17,-64,54,64,-38,22,-26,40,-32,-52,-8,-60,-22,9,73,-4,25,-62,-21,72,-82,-7,91,-10,8,-2,3,55,30,1,-23,5,-4,-59,-103,-5,17,-15,39,-1,80,4,4,27,69,-47,6,-82,15,-9,23,60,27,-22,-49,-6,-23,6,43,127,-44,-11,43,-43,6,10,16,-8,8,22,-11,51,-13,5,44,-13,-13,-33,-22,-32, 
  /* [8][0][][] */ -50,-1,5,127,-9,15,12,4,-62,25,4,21,-19,-5,-50,16,-61,12,-64,-2,-32,-10,8,-2,-46,32,31,-49,35,29,-64,6,28,0,-43,-63,-30,-23,12,18,-26,27,-25,-96,-81,-3,-10,26,-27,28,-47,-76,-3,1,-73,59,22,7,35,-4,-78,-10,-18,-31,-85,55,-37,-32,45,-29,-4,14,14,6,-55,-19,-76,11,17,-9,-31,22,1,-27,-5,19,34,-1,-43,-49,-59,-12,-5,21,5,-68,-63,12,-116,34,-53,26, 
  /* [9][0][][] */ -69,116,17,-21,-17,4,32,-66,-48,15,76,-50,-1,19,-67,-45,11,22,-71,37,-75,-49,-33,-27,1,21,49,-127,-16,-21,-60,-11,-1,12,17,-76,-5,-82,-5,22,-14,6,-7,-7,7,-18,13,27,1,-6,-90,68,-42,-20,-74,-20,21,19,-9,19,-46,4,-4,-60,-51,-47,-58,-56,-28,-47,53,-15,1,-102,-14,6,-1,10,-73,39,-9,17,8,-95,-19,21,-19,-18,13,-56,-26,-36,-79,-7,-57,-45,-27,23,-19,-19,-71,45, 
  /* [10][0][][] */ -48,8,6,-22,13,1,6,-6,-43,-13,17,-22,18,-4,-50,-7,-21,-20,-31,-2,-58,-14,15,-30,-127,12,1,-50,25,-14,-29,23,-17,-6,50,-37,-10,-24,5,-27,8,-10,-16,-7,10,-13,-1,2,-30,5,-43,-15,13,-7,-28,-21,-22,16,26,-11,-69,29,1,-17,-42,-8,-5,-17,-7,-10,7,39,2,-1,-20,-13,6,-27,12,-28,75,-16,7,-15,-34,11,18,12,12,-35,-38,9,-22,-26,6,-24,-7,-1,-15,-40,-28,-29, 
  /* [11][0][][] */ -35,-94,-7,-19,-5,28,15,-31,-78,-40,-15,-18,-112,20,-76,17,-74,33,-36,-3,-71,-43,-33,-13,-54,53,-8,-16,-42,-46,-54,-5,47,-4,93,-65,3,-34,37,-10,80,54,22,-80,-18,10,3,63,-127,-54,-47,-23,-20,53,-35,-52,35,39,26,-39,-55,127,-47,-78,-30,28,2,-19,-13,-23,21,-56,4,28,-24,25,-48,-43,-59,8,15,-48,-99,-19,75,6,34,0,34,-29,-69,33,0,29,23,-43,-48,9,35,43,-32,28, 
  /* [12][0][][] */ -40,17,-2,35,9,-7,-40,-127,-36,-64,9,-30,14,-7,-74,-10,12,12,-64,-5,-55,-35,37,9,19,23,16,-60,-31,-125,-40,33,-14,-6,50,-66,-7,-96,8,6,-27,10,-5,1,-28,18,24,34,-15,24,-30,-18,-6,-37,-43,-16,6,-13,12,24,-72,-5,12,-56,-45,-32,-56,-37,17,34,21,7,-16,12,6,-20,15,-3,-2,20,-55,9,-22,-36,48,35,24,2,-32,-42,-38,38,9,63,-4,-34,24,-49,-6,-8,-48,30, 
  /* [13][0][][] */ -38,32,-10,19,127,19,13,4,-28,27,17,22,-6,-18,-113,2,11,-11,-93,-5,-59,-29,-18,-30,-7,-63,-32,-73,20,0,-49,5,-63,123,4,-54,-28,-7,-8,-24,19,13,5,-15,-7,13,3,22,-8,33,-69,-16,-12,-22,-54,50,-64,-67,-28,-20,-49,13,-21,15,-65,-29,-29,-59,51,-4,2,-36,-4,12,10,9,4,2,-30,-37,-32,1,-7,-9,-7,25,-44,13,-44,-27,-18,-1,57,0,10,-50,-19,30,-9,-34,-70,10, 
  /* [14][0][][] */ -32,-21,18,-16,-12,14,-5,-10,-53,12,31,-9,20,-48,-79,17,-31,-1,-52,10,-60,-31,-49,-13,-2,52,34,-79,1,14,-48,3,48,11,-1,-50,0,27,10,-10,15,30,-22,14,21,-14,7,19,-34,12,-70,13,6,-11,-63,0,6,20,-7,17,-70,15,1,16,-70,48,-38,-53,4,-80,3,18,5,-127,15,-22,-13,-1,-49,23,44,-9,-93,-118,6,-4,-8,7,16,-38,-29,-55,-12,7,-20,-44,-5,43,-20,-21,-64,37, 
  /* [15][0][][] */ -22,9,0,10,-23,10,-39,-5,-34,-4,-1,-30,-14,-2,-43,-6,21,-12,-65,-17,-31,2,-18,-39,17,24,-3,-54,36,8,-36,-17,16,8,-15,-34,-9,-1,10,7,55,13,1,3,-13,-12,2,34,-19,6,-39,38,-8,1,-43,-2,17,-127,-11,35,-50,-3,0,25,-48,38,-24,-20,17,-35,25,3,5,-8,15,5,23,-22,-43,-39,1,-4,-4,-29,35,7,-43,7,-34,-16,-46,-58,-4,45,-40,-17,1,-17,-8,35,-44,-3, 
  /* [16][0][][] */ -30,32,13,-36,17,-3,2,-6,-47,7,-54,-44,13,-13,-49,-40,-10,12,5,54,-47,-9,21,-16,-127,-18,17,-63,50,17,-15,-10,11,6,-25,-47,-4,2,12,16,3,-16,20,-108,-12,0,7,-21,9,-3,-41,-3,-38,-43,-53,32,13,32,-55,-12,-59,28,-27,12,-52,-41,-40,-73,19,21,12,35,-4,14,-50,-7,36,-10,41,-18,14,6,8,-78,19,-14,-57,-1,-3,-38,-31,-3,-57,-55,-35,-33,-64,5,-17,1,-36,-4, 
  /* [17][0][][] */ -31,-68,27,-83,-15,13,-56,17,-62,49,-35,-31,-46,11,-99,-7,-32,-28,-37,-3,-54,-8,8,-31,29,63,29,-64,5,26,-72,-25,33,0,60,-69,13,-35,-5,22,79,-16,-5,7,15,-8,22,26,-92,-6,-104,5,-1,-22,-89,0,-5,-15,-17,21,-96,100,-65,-47,-63,62,9,-89,26,-40,26,-71,-35,-5,23,-12,-24,-25,-52,7,31,-14,-127,-107,58,-8,-34,21,-17,-63,-68,-97,52,35,-62,-67,-1,34,-14,22,-61,76, 
  /* [18][0][][] */ -73,9,-4,6,34,8,-44,-11,-49,-54,-48,-48,-9,-15,-98,-28,-127,-39,-46,-29,-40,-32,60,6,65,43,3,-79,21,-18,-52,34,-68,20,21,-60,97,-31,26,-5,14,-32,-20,-4,-20,0,-100,9,-15,2,-77,-51,-8,-69,-96,-26,17,9,116,48,-99,-5,-29,-10,-81,-24,-37,-78,-8,-14,47,5,-10,34,-17,1,-15,-51,-22,-27,21,-32,-29,-71,30,30,10,-8,-13,-56,-58,-21,-6,35,-22,-68,7,-47,-9,1,-81,0, 
  /* [19][0][][] */ -44,-1,0,20,-53,26,16,-115,-80,-84,30,-26,99,-4,-123,-21,42,60,-29,-3,-56,-8,20,-52,-98,0,-60,-104,-55,-86,-78,-26,66,76,28,-108,60,-14,7,61,127,47,-59,-36,88,-6,-77,-42,-50,-9,-68,58,-63,-68,-67,-57,-36,-91,6,98,-100,39,-4,-51,-43,54,-51,-75,26,59,-16,-53,-17,-39,32,-2,-12,10,-28,-48,37,53,11,-70,-2,85,-123,-2,-116,-4,-83,64,-32,-15,-70,-64,-83,-40,-49,-13,-52,10, 
  /* [20][0][][] */ -29,10,8,127,-40,28,41,-23,-48,13,-8,-44,18,-1,-59,93,-47,50,29,-57,-32,-21,-37,12,-50,-8,8,-28,16,10,-42,5,63,24,-71,-49,-100,-21,18,1,-32,32,-41,32,26,2,-15,3,0,-19,-30,-58,-42,-41,-42,48,-23,16,36,-19,-38,5,2,-30,-52,-49,-50,-42,30,62,-27,45,6,-27,48,-22,-42,61,-8,-3,-17,38,37,-22,-1,74,-38,-9,-44,-39,-34,3,-19,-21,-17,-34,-50,15,-69,21,-54,52, 
  /* [21][0][][] */ -12,18,6,60,-16,-3,34,-127,-42,11,-4,33,10,17,-54,47,4,41,11,-25,-33,-32,-1,13,-28,1,2,-44,0,-58,-38,-3,37,15,-12,-37,-28,-34,9,18,-3,20,-25,12,25,-22,7,-10,20,-27,-42,-20,-18,-15,-34,15,-11,-10,21,0,-39,11,-16,-21,-21,-38,-35,-33,7,28,-15,6,-22,-24,40,7,-14,35,1,15,-15,39,26,-38,-2,38,-35,-6,-39,-41,-28,33,-28,-14,-55,-51,-82,-7,-52,-1,-32,34, 
  /* [22][0][][] */ 7,-33,-21,-18,-60,5,47,11,8,-13,-52,31,42,-110,17,-98,18,-45,-11,-22,18,-49,-28,-3,0,-2,-30,79,-9,-5,19,-55,29,-49,-24,7,53,-23,20,-80,-45,-25,28,-25,73,-16,10,-45,7,-30,-8,-46,29,0,-17,-81,-111,0,-13,-71,-29,-9,42,-17,4,2,82,3,127,-87,-26,15,-2,-37,32,-22,-71,-69,50,-27,71,-9,7,-23,81,-109,-49,0,11,56,-11,2,-59,21,-1,38,16,-9,-33,-31,-16,-9, 
  /* [23][0][][] */ -56,29,-6,127,13,4,3,6,-51,35,-23,2,-18,-3,-86,18,-33,39,-30,18,-50,17,0,-11,-22,47,-5,-35,46,43,-51,-18,26,2,-10,-78,-45,-39,16,35,-25,31,-46,12,-42,-4,-10,4,-25,-1,-60,-40,12,19,-71,51,13,-113,-27,9,-85,14,-36,-17,-55,22,-9,-44,-1,14,7,-29,-4,20,-27,-1,-43,-18,14,-28,2,31,18,-23,41,8,-7,3,-46,-34,-63,-24,-17,62,-17,-61,-23,-2,-86,25,-51,33, 
  /* [24][0][][] */ -46,19,-6,-1,11,19,14,-31,-91,-107,18,118,64,-7,-90,3,19,-90,70,45,-78,40,-43,-109,30,-16,-66,-65,59,45,-86,-9,27,-1,13,-63,20,8,23,-13,77,-53,-42,-10,23,-10,-30,-70,-70,-10,-61,-53,-27,-17,-74,-53,-8,29,49,85,-94,-9,-25,5,-92,38,-17,-36,-15,-38,-24,-4,19,28,50,13,29,45,-67,-69,-24,29,3,-57,-43,32,-51,-22,-127,-66,-74,55,-24,54,-33,-78,-31,-30,-6,3,-56,17, 
  /* [25][0][][] */ -11,6,10,25,-28,-6,-20,12,-46,-5,15,10,31,-35,-67,44,18,17,-35,-8,-48,-14,16,-38,-11,34,43,-62,-11,-11,-39,53,-20,6,-46,-48,23,30,-15,0,-6,-17,8,-97,-54,-17,-14,-10,-42,4,-62,29,11,-32,-65,72,29,8,-21,9,-64,16,-34,57,-53,-9,-44,-9,31,-6,22,-39,8,-127,-46,-24,-26,-1,12,37,-17,9,11,-46,-15,64,-17,-6,-29,-38,-41,11,-44,-19,-56,-46,-2,41,-20,-23,-66,11, 
  /* [26][0][][] */ -49,19,-25,-36,7,14,11,-33,-44,-75,-86,29,21,39,-94,6,10,-9,-64,18,-99,-66,0,6,-127,44,-4,-73,36,22,-61,-42,-81,-11,4,-79,48,67,5,25,28,68,-68,38,80,-15,-21,2,-40,78,-58,-16,26,-17,-65,-29,46,9,-14,30,-85,-45,60,0,-45,-63,-40,-70,14,22,2,1,1,-5,-50,11,61,12,-21,-39,70,78,31,-63,21,13,-47,4,-29,-45,-70,53,17,44,-55,-24,-64,18,-33,-15,-59,-34, 
  /* [27][0][][] */ -52,-34,26,-22,25,6,-59,-20,-74,-52,-68,10,-28,0,-92,32,-116,-24,-30,35,-81,-15,12,4,44,26,50,-100,9,9,-66,33,-55,17,-4,-100,78,-59,13,15,14,-85,-34,33,-17,2,60,24,-20,-11,-66,-74,-12,-83,-79,-25,44,-11,66,52,-127,38,-84,-2,-82,-32,-51,-79,21,58,21,-23,8,37,-15,-11,-54,-35,-21,4,33,16,-100,-65,-36,66,-56,2,37,-77,-62,-17,10,8,-42,-86,-66,22,-7,49,-66,56, 
  /* [28][0][][] */ -12,29,13,13,12,10,-3,-2,-78,8,0,-39,-11,-11,-76,33,32,-16,-48,-22,-64,-21,-13,-39,-41,15,36,-81,26,-1,-50,16,24,-14,-29,-54,71,-16,-3,-6,22,-3,-11,-58,-15,-8,1,-1,-23,-17,-78,75,9,-43,-71,26,31,9,-21,57,-99,0,12,127,-61,-26,-59,-38,-9,-36,57,-20,-7,-27,-67,6,-4,-2,-62,18,4,-39,-4,-33,-38,71,-12,-5,-16,-41,-71,-54,-35,53,-89,-45,10,-91,0,46,-55,21, 
  /* [29][0][][] */ 6,-27,28,1,-2,-13,56,-127,-48,-7,26,-4,57,48,-51,29,-113,14,-1,-8,-117,7,-23,29,-6,10,-25,-55,-1,-15,-54,16,22,47,8,-23,-17,1,26,35,18,22,1,-6,-100,-23,-57,0,-8,-80,9,8,31,8,11,-11,30,35,18,-52,-79,-54,-27,-91,-29,-7,-70,-45,-13,51,8,30,5,23,16,56,-34,47,-13,-11,-57,25,2,-43,16,89,54,28,-107,-18,-59,20,21,23,-28,4,44,13,51,19,10,14, 
  /* [30][0][][] */ -44,-31,-11,-64,1,22,-17,-33,-68,-26,-21,22,-12,36,-56,26,-20,-9,-49,-55,-30,-35,-6,2,21,17,7,-50,1,-127,-83,-10,34,2,78,-74,2,-26,2,35,43,-16,27,-2,-15,-5,26,-1,-118,4,-35,-34,4,-13,-60,-14,-20,-11,-3,25,-85,89,-2,-25,-71,26,-26,-100,-34,35,-2,-25,5,-9,14,1,-21,5,-12,30,-15,18,-99,-28,25,-4,-6,7,-76,-39,-71,25,36,28,-3,-74,8,17,-9,-27,-58,42, 
  /* [31][0][][] */ -40,49,3,-13,-1,31,21,-3,-47,5,33,-73,-14,-19,-65,-28,23,16,-53,29,-71,-35,-36,-21,-68,1,51,-87,26,27,-23,-10,9,-6,15,-63,6,-10,23,11,32,-23,-13,-52,-2,-9,-28,-1,-1,3,-65,82,-34,-72,-67,24,-5,9,-13,33,-84,16,0,70,-60,2,-73,-49,22,-43,47,-16,10,-127,-55,7,9,-12,-45,25,-21,-6,16,-89,-40,48,22,-3,21,-22,-75,-52,-51,4,-66,-47,19,44,-6,0,-48,20, 
  /* [32][0][][] */ -38,16,14,26,-1,17,-74,19,-56,23,-72,-15,-51,-7,-77,-1,-9,-12,-27,16,-97,-59,37,-5,-124,15,12,-76,102,-7,-49,10,-24,-42,-19,-54,53,74,6,-8,21,-38,-49,-127,-87,-18,-2,22,-7,11,-60,114,-1,-18,-66,61,59,5,-34,-5,-85,34,-30,15,-42,-70,-6,-43,23,-16,-16,21,3,28,-32,-13,-4,-66,-39,-9,-53,-1,22,-53,22,9,15,-1,7,-80,-48,-19,-53,-46,-3,-53,-11,-15,-48,2,-61,-27, 
  /* [33][0][][] */ -30,27,24,-32,30,12,17,12,-50,-52,29,83,36,-41,-46,-37,-15,-35,-50,51,-71,30,-7,-65,-127,-29,-42,-27,71,37,-41,9,-9,3,-43,-68,12,10,10,2,37,-31,3,-2,11,-1,-77,-54,-40,8,-69,-28,75,2,-36,-68,29,49,-3,-6,-72,19,1,-10,-73,15,-1,-66,-35,-32,-12,10,-10,10,-71,-3,26,38,-51,-51,30,19,16,-15,-1,67,-50,9,-66,-50,-53,28,-40,-23,-24,-72,-30,-22,21,20,-67,29, 
  /* [34][0][][] */ -42,-18,20,63,-19,4,-48,61,-33,-15,-14,-17,28,-51,-71,51,-62,-71,-38,-18,-72,-19,-52,-11,12,5,66,-55,-2,14,-61,-14,-1,21,16,-79,-2,-4,-1,-14,-91,52,-79,10,-28,-2,0,24,-31,52,-78,4,40,-70,-80,19,-11,6,127,-28,-119,44,-6,-24,-75,-35,-36,-28,8,63,-1,44,17,-54,13,-10,-32,15,-19,24,16,18,-7,-21,-12,-22,36,-1,-22,-30,-34,-4,-21,11,-8,-55,-28,32,-26,-29,-92,27, 
  /* [35][0][][] */ -36,-34,-1,44,-4,15,67,100,-31,-10,70,-4,22,-75,-114,71,-39,-99,-92,-71,-72,-21,11,-28,-20,7,-48,-64,8,29,-102,6,38,24,27,-44,-32,40,35,-55,-22,7,-16,-15,22,-33,-123,31,-2,35,-59,44,-35,-85,-80,-15,-127,62,52,-11,-86,-25,20,-40,-72,-16,-100,-58,23,52,-14,83,0,-66,52,-12,10,56,-51,8,19,14,23,-63,49,75,-31,23,-91,-25,-33,-1,-27,-11,-36,-38,-26,14,-59,-69,-57,11, 
  /* [36][0][][] */ -6,-26,7,38,14,11,24,-56,-21,13,10,21,3,5,-38,12,52,0,-32,-28,-13,-9,53,11,-61,-33,-30,-19,4,-59,-35,19,2,-33,10,-27,-49,6,20,-27,-10,-31,13,-65,-6,-25,-23,40,-77,14,-50,-37,-72,-20,-57,0,12,-13,-38,12,-53,11,-1,15,-44,12,5,-58,-6,-42,2,31,-12,7,-57,8,28,54,-50,-4,4,49,-2,-41,-15,109,10,9,-127,-3,-32,-22,-11,-11,-6,-50,22,45,-4,-12,-50,46, 
  /* [37][0][][] */ -47,-23,-1,-22,8,10,9,21,-27,-86,65,-100,-14,-54,-101,39,-48,-56,-92,13,-86,75,69,-68,41,61,-28,-85,23,-21,-57,34,-57,24,-8,-55,31,9,10,-31,-4,-80,-13,-5,-23,-18,-127,-29,110,-34,-43,-17,-54,-59,-84,-48,-46,-39,64,30,-79,43,1,19,-57,-11,-20,-53,-26,-36,20,-11,1,-5,-9,2,8,-5,-5,-57,11,8,-16,-65,19,43,-22,-1,-46,-74,-63,-48,-53,2,-36,-69,-57,-27,-5,-20,-57,-16, 
  /* [38][0][][] */ -26,-2,19,-20,2,18,-3,16,-55,44,-36,-76,-32,-16,-35,-26,-22,27,-92,-41,-32,-6,5,-20,-28,-31,10,-77,-1,-11,-44,14,22,-3,54,-58,4,-10,18,-23,53,-32,16,23,8,5,-11,-13,-29,-5,-41,30,-25,-11,-41,-1,29,26,-21,16,-82,37,-42,-16,-54,20,-25,-17,15,-5,50,-35,11,12,-36,-5,5,2,-5,16,-7,-20,-77,-51,-10,-8,-9,1,-31,-24,-64,-127,11,21,-37,-32,1,14,3,40,-40,53, 
  /* [39][0][][] */ -49,9,-6,50,-13,23,-7,9,-35,17,-4,-21,-11,-24,-34,-16,-5,-15,-9,-2,-49,17,-6,-43,30,38,-25,-22,49,1,-47,0,-9,-16,-13,-52,31,0,13,-3,16,30,-56,-2,-34,-12,-26,-84,0,22,-31,-39,0,-37,-57,-14,-7,38,0,15,-72,-28,4,-5,-50,16,-23,-26,-21,-25,27,-16,-13,10,4,-30,0,-12,-50,-9,-21,50,0,-17,47,11,2,-10,-20,-23,-45,1,-21,127,-18,-58,-1,-23,-13,-7,-27,-4, 
  /* [40][0][][] */ -46,107,15,-33,-44,9,19,-72,-17,-24,80,-72,1,-47,-59,-17,17,17,-55,72,-22,-62,-78,-35,17,2,59,-73,-21,29,-52,-11,-3,9,25,-62,-56,-10,13,0,18,-12,-9,16,-32,-9,4,34,-30,25,-56,27,20,7,-44,-8,-27,53,10,45,-66,-36,-35,34,-51,-4,-27,-13,2,-55,51,-10,-13,-127,-19,-10,-15,-2,-63,50,-9,-19,1,-69,-5,70,29,-3,-88,-51,-29,-47,-69,2,-30,-15,25,-26,-20,-21,-63,3, 
  /* [41][0][][] */ -56,-49,-23,71,0,25,50,33,-41,-16,52,8,49,-10,-106,58,-18,-61,42,-68,-87,29,17,-18,-2,-10,-118,-50,-8,-9,-87,20,89,28,10,-65,-46,29,23,7,1,-59,-48,24,-22,27,-102,22,70,-30,-75,21,-75,-52,-55,22,-86,42,-21,27,-55,17,-1,7,-52,26,-15,-72,56,56,3,30,-23,-65,72,6,-16,86,-16,30,-127,34,37,-123,32,60,-74,12,-106,-61,-60,-33,-33,-52,-75,-68,-19,56,-97,-25,-52,-10, 
  /* [42][0][][] */ -8,3,16,14,13,-15,11,-45,-17,-1,16,6,-36,65,-6,21,9,-2,-20,-3,-8,-30,11,-127,0,8,-104,2,-108,-15,-8,-124,13,-9,14,-4,9,-57,-23,-7,-2,4,7,-3,-14,0,8,9,12,-113,-9,11,1,-13,-4,-10,13,5,-3,-51,10,9,-38,-31,7,-13,-12,-1,-26,21,-31,-11,-6,-2,8,8,-82,-103,-26,11,-4,-56,2,6,8,27,29,0,-31,-10,2,8,3,7,12,2,13,-1,-28,-72,-8,-87, 
  /* [43][0][][] */ -5,1,17,4,10,8,14,-25,-7,-13,27,-4,-11,34,5,22,-13,4,4,-1,-7,-15,11,-127,-26,12,-104,5,-61,-27,-1,-100,8,-13,-2,-8,13,-50,1,-6,0,16,17,-36,-7,-14,9,25,-2,-70,-9,18,-16,-3,1,-9,17,-3,10,-57,-6,13,-19,-41,3,6,-9,-5,40,17,-14,-11,-4,1,-12,8,-71,-90,-1,-1,-23,-46,1,-7,29,24,36,-1,-6,-11,-17,8,3,2,9,1,-4,4,-24,-70,0,-83, 
  /* [44][0][][] */ -67,-68,21,53,-28,23,-66,25,-75,-32,-9,-10,37,-71,-92,76,-45,-25,24,-30,-88,-4,-99,-32,9,33,78,-67,0,-3,-65,-12,46,16,-13,-115,59,-3,10,-19,-65,16,-82,20,-22,-7,54,10,-90,20,-102,37,5,-29,-73,27,34,-1,49,-34,-115,93,-3,17,-84,-35,-21,-56,-23,96,-40,20,-20,-50,23,0,-27,20,-2,39,7,38,-127,-112,-60,-45,-10,-8,-4,-71,-108,40,-40,3,-28,-101,17,52,-38,-31,-112,42, 
  /* [45][0][][] */ -31,23,-11,16,83,3,27,1,-32,31,11,-31,-3,-19,-84,0,15,5,-81,16,-53,-30,-7,-32,1,-42,-29,-53,29,-3,-30,11,-51,127,9,-43,-27,-9,15,-26,22,10,9,-12,-13,-26,-6,27,1,27,-62,-3,-36,-31,-35,46,-51,-43,-33,-18,-62,0,-15,10,-65,-14,-22,-48,3,2,9,-14,-1,13,11,10,-2,0,-21,-39,-6,2,-1,-52,4,-1,-14,0,-65,-52,-30,3,39,1,-51,-40,-34,29,-10,-25,-65,-5, 
  /* [46][0][][] */ -40,8,12,-6,-19,24,31,-58,-46,-6,-18,-60,35,-31,-74,-96,-33,-45,-48,-16,-58,-87,69,17,10,-37,39,-93,45,25,-36,87,-27,58,-5,-62,-32,-7,-11,-78,24,-17,-49,2,16,-13,35,-39,-4,57,-41,-5,-8,-72,-78,-15,-44,-54,9,-32,-68,12,5,-3,-70,-15,-32,-44,15,29,73,94,15,-22,-35,-20,17,-18,-14,-68,73,-8,-1,-33,-18,13,5,-1,17,-62,-26,21,21,-3,-7,-27,-31,-55,-18,-127,-66,-51, 
  /* [47][0][][] */ 5,-84,-30,5,-61,18,63,8,-2,-8,-34,34,39,-83,-11,-106,43,-33,-33,-22,49,-33,-81,-28,27,27,33,100,-53,15,-36,-15,-69,-51,-65,1,-6,2,56,-30,12,2,125,-2,69,23,60,-71,11,-33,-31,-95,57,23,-32,-63,-58,-4,-14,-36,-32,-46,43,-13,9,-24,79,-8,41,-105,-72,-4,19,-54,27,-36,-127,-30,67,-30,92,-85,24,-20,110,-62,-26,-15,17,67,47,18,-88,5,9,5,-28,-72,0,-87,-4,3, 
  /* [48][0][][] */ -40,44,4,61,34,28,-19,-34,-61,-19,-2,-13,-35,-20,-78,-9,25,54,20,79,-64,-4,-8,-60,-29,-83,-39,-86,43,-3,-51,-29,20,127,-10,-99,39,-26,6,28,90,4,-33,20,-9,-7,-40,-5,-94,4,-64,-38,-7,5,-100,13,50,-83,-57,17,-67,15,-24,15,-57,68,14,-75,43,33,-19,-38,-10,6,26,-18,-45,-28,15,-80,-14,30,16,-69,-13,-27,-24,-6,-40,-48,-88,16,21,23,26,-63,-71,8,-56,51,-71,46, 
  /* [49][0][][] */ -41,23,5,-29,39,-5,20,-29,-66,-38,-19,51,-13,-18,-51,-14,-18,-76,61,73,-104,46,46,-41,16,-45,-43,-99,55,29,-61,20,11,17,-49,-68,-38,10,21,8,5,-98,5,51,-40,-22,-127,-19,30,-43,-45,-12,-24,5,-43,-56,4,21,-7,-16,-68,26,-49,22,-58,18,-59,-78,29,-26,19,35,2,6,-56,-11,19,24,4,-27,-51,27,-35,-41,-7,-13,-80,0,-78,-40,-66,-15,-74,-69,5,-25,-58,19,-47,29,-62,5, 
  /* [50][0][][] */ -22,23,-15,34,116,19,48,20,-40,64,19,-63,-16,-29,-105,-7,24,-6,-80,-16,-57,-58,4,-18,-8,-55,-28,-74,-15,-7,-59,16,-57,127,32,-76,-50,-7,7,-83,16,7,4,-14,-12,-15,7,17,5,79,-69,5,-53,-58,-87,49,-83,-57,-32,-29,-69,7,-24,21,-61,-68,-25,-37,23,-8,18,-22,-17,25,16,-13,-28,-4,-42,-60,-11,6,-8,-68,-20,8,-20,-7,-50,-51,-41,4,82,-31,-46,-35,-16,29,-24,-74,-83,-37, 
  /* [51][0][][] */ -27,-62,-2,14,-39,28,76,-31,55,-60,-35,48,0,-29,-41,-127,-17,-10,-25,-3,35,-58,-61,-76,36,16,7,58,-12,5,-14,-33,38,-54,-59,-34,5,-48,18,-56,20,16,-21,65,90,21,10,-64,-17,38,-14,-91,42,6,-4,-68,-77,1,-6,-31,-11,-12,72,12,39,-4,73,-40,-16,-29,-33,-9,-4,8,21,-5,-37,-33,1,21,57,62,-33,4,70,-44,10,5,35,7,53,-7,2,33,-20,34,32,-62,72,-9,-23,2, 
  /* [52][0][][] */ -82,-17,-4,-52,40,26,-30,62,-37,13,42,-91,-17,-26,-86,54,-12,-5,69,-117,-67,33,-52,-16,8,21,11,-63,-5,95,-68,4,13,10,-36,-72,26,17,28,-8,-53,-34,47,1,53,-8,-29,21,51,-29,-63,-74,-76,-88,-74,48,9,-23,-22,-8,-59,-18,8,47,-64,26,-64,-77,31,-10,-29,47,-5,-19,29,19,-45,14,-13,-15,78,-76,19,-127,-53,-40,-56,13,-75,-99,-47,-82,-14,-91,-58,-63,-72,11,7,38,-65,-6, 
  /* [53][0][][] */ -34,-28,3,24,-20,21,-13,10,-41,0,-41,19,-9,-20,-43,13,-19,36,0,-62,-43,-7,8,-16,22,-40,0,-51,8,-4,-26,36,8,3,-45,-52,1,55,35,-73,-2,-45,29,-127,-46,0,8,-14,4,-11,-19,22,-17,-19,-49,42,48,-17,19,8,-36,26,-40,24,-52,1,-13,-37,20,13,15,12,6,4,-63,-9,-6,21,24,22,-48,33,-25,-30,-48,21,-31,12,-94,-24,-75,-15,0,-43,-52,-35,-29,7,14,54,-50,50, 
  /* [54][0][][] */ -37,7,-7,-40,-12,-1,-15,0,-51,-37,-44,45,50,-8,-73,-7,24,-4,-29,24,-62,-54,29,-11,-127,64,31,-57,51,27,-43,-20,-51,-6,16,-81,52,38,14,19,-2,21,-23,-59,3,12,-2,5,7,60,-69,-41,-9,-25,-83,27,5,-111,-44,7,-101,-2,51,2,-48,-72,-19,-78,-7,39,-3,1,3,4,-83,25,46,-10,3,-33,58,25,26,-54,-4,33,-61,11,16,-66,-74,39,0,13,-22,-32,-20,1,-47,-42,-51,-32, 
  /* [55][0][][] */ -42,-63,37,-73,-8,-5,-21,3,-49,-6,-40,-13,-91,-6,-38,-3,-97,4,-46,-55,-41,-37,-21,-5,-1,43,25,-28,-32,4,-57,-34,38,19,75,-56,29,-57,21,32,66,-4,-14,-12,14,13,-5,-4,-122,21,-28,-16,-34,-24,-61,-13,-27,18,-11,24,-75,127,-46,-47,-50,30,32,-78,-48,24,-8,-59,-1,28,9,13,-32,-24,-18,36,21,13,-120,-48,9,-14,-1,-2,-43,-26,-62,7,28,34,-37,-53,19,26,-12,8,-38,88, 
  /* [56][0][][] */ 44,29,-9,35,-34,9,50,-6,6,-124,-94,63,40,-62,36,-63,-36,-4,-8,-84,-32,-91,2,-106,15,-6,-37,116,4,11,66,-34,94,-48,23,18,58,-30,15,-42,-87,-20,-59,-30,105,-17,24,-75,-24,-28,25,-58,33,-10,-9,-79,-90,17,-15,-52,-24,-6,55,-20,3,19,78,0,-10,-82,-42,20,-2,9,33,34,-8,-19,87,9,127,12,69,-6,104,-67,-19,-6,8,12,-47,-25,-83,22,-65,41,39,58,-75,-14,-14,-2, 
  /* [57][0][][] */ -14,12,24,-5,35,-30,42,-127,-24,-22,-9,101,2,45,-41,22,35,-74,-9,4,-60,2,35,-12,7,-38,-18,-24,27,-90,-50,-12,36,-10,7,-36,-31,-20,-46,21,6,-44,-10,21,7,-8,-66,13,49,-31,-68,-27,-9,-51,-30,-70,15,-3,-6,16,-51,11,-15,-4,-41,-4,-74,-51,-22,1,17,-32,-2,-4,7,-14,-27,63,-28,-3,-45,23,8,-52,-5,9,-71,9,-39,-19,-28,41,-29,-14,13,-51,-33,68,-42,-28,-51,29, 
  /* [58][0][][] */ -70,15,3,109,1,13,27,1,-88,10,0,32,106,-15,-83,-50,-1,-23,103,-3,-83,33,-15,-61,-12,6,-55,-91,67,45,-56,23,48,13,-12,-68,23,-25,37,27,26,-56,-53,23,-15,3,-81,-127,-17,-5,-111,-63,-67,-75,-103,-15,-11,15,-2,59,-116,27,-44,-13,-50,50,-13,-68,23,-52,-28,-15,-3,10,40,-12,-53,-25,-10,-28,-24,62,22,-35,-42,-16,-50,-11,-17,-75,-88,-5,-47,123,-46,-95,-82,-33,-66,-4,-74,41, 
  /* [59][0][][] */ -53,31,-26,16,10,21,-30,-15,-36,-40,29,-35,-59,-38,-111,42,32,-60,-127,-24,-75,-3,-70,-64,34,80,-20,-105,46,19,-65,-21,7,-12,20,-73,59,12,3,29,116,36,-16,11,-8,-13,1,25,-58,31,-91,109,-43,-18,-70,-14,25,8,-2,80,-79,-36,-17,66,-75,36,-60,-43,-26,-60,42,7,-6,-95,6,-30,16,-28,-27,-26,-23,14,0,-100,22,32,-44,-2,-59,-43,-68,-118,-3,97,-55,-79,20,-120,3,54,-61,6, 
  /* [60][0][][] */ -47,-6,1,0,-18,8,45,3,-33,0,25,-40,24,-27,-61,-57,7,3,-46,-7,-55,-64,41,5,-4,-40,15,-61,11,12,-52,30,-10,55,-5,-48,-18,16,14,-59,3,17,-10,3,4,8,23,-1,35,41,-41,12,-10,-65,-75,6,-52,-54,-32,-55,-77,33,21,3,-76,-47,-23,-43,-10,20,58,56,-7,-13,-22,-8,-13,-4,-9,-37,45,2,3,-38,1,12,6,-12,-11,-62,-49,-6,50,-8,-17,-63,-26,-27,-31,-127,-57,-42, 
  /* [61][0][][] */ -34,27,11,29,105,10,23,18,-38,31,22,18,1,-25,-104,-7,12,-2,-81,-8,-71,-35,-9,-29,10,-52,-37,-84,0,-11,-45,15,-68,127,25,-44,-51,-9,2,-39,30,2,0,-27,-23,-24,16,16,-2,50,-90,-7,-15,-20,-73,53,-98,-62,-19,-18,-78,3,-19,16,-79,-31,-23,-56,16,-4,3,-41,-3,11,7,10,-15,-9,-40,-49,-31,15,-26,-17,-3,25,-45,0,-36,-39,-38,13,49,-5,-10,-56,6,29,-1,-25,-70,-22, 
  /* [62][0][][] */ -25,-7,-2,4,14,-14,-39,28,-40,-1,-46,-124,22,-21,-44,23,31,-24,-4,-46,-35,-70,50,-27,-106,18,32,-85,45,-20,-33,69,-69,-27,9,-79,33,57,5,-7,-13,3,-53,-105,-90,-1,22,16,-12,-12,-58,-4,28,-60,-63,57,49,-2,-36,41,-89,5,11,70,-48,-38,-74,-33,-11,-29,14,9,7,25,-54,-20,61,19,-69,-9,-46,-12,-12,-78,-23,36,51,12,-51,-54,-47,-78,-52,19,-127,-36,92,-19,-22,17,-62,16, 
  /* [63][0][][] */ -31,38,-127,116,5,19,-29,-112,-63,57,5,-31,21,-7,-50,49,-24,9,-63,41,-79,-7,22,15,14,38,27,11,-10,-50,-17,34,0,26,62,-49,-9,-122,23,89,-83,31,7,17,-69,-15,16,-61,-18,-41,-20,-48,-28,-38,-59,32,-20,-31,7,-4,-53,65,-14,-41,-53,-25,-2,-40,45,55,18,-66,4,-1,19,-11,-95,-97,21,-27,29,14,13,-12,40,-32,-43,4,-5,-21,-91,-14,-38,62,2,-26,-40,-20,-104,77,-54,46, 
  /* [64][0][][] */ -65,-79,-28,-49,-20,42,108,-33,-47,-71,-1,39,50,-12,-8,21,50,-127,77,10,-99,-9,-91,-1,22,22,-82,-23,-17,-20,-103,11,48,-37,-4,-27,-5,-105,83,-33,107,-48,8,-106,6,-49,-111,-37,19,-69,-5,-6,-27,-27,-23,-68,-18,-44,57,54,-120,16,17,-43,-57,28,-6,-60,69,-23,4,-79,-24,10,18,-10,6,-40,30,-90,-1,-72,-14,-33,49,31,-34,-18,6,-19,-58,-9,-5,33,-64,-67,41,52,24,11,-22,-6, 
  /* [65][0][][] */ -31,37,-8,30,123,13,-4,-8,-44,12,4,14,-20,-36,-87,21,20,-4,-74,-15,-56,1,-33,-58,-3,-64,-47,-77,27,-15,-39,-6,-36,127,-16,-63,-12,-25,12,-3,55,12,-8,-6,-7,-1,-7,34,-34,1,-54,-4,-42,-23,-50,47,-22,-53,-30,18,-91,0,-19,25,-84,35,-37,-44,20,-3,-13,-38,-8,2,27,-1,-3,-9,-14,-65,-30,8,-4,-15,-8,16,-36,14,-44,-11,-30,-10,52,1,3,-46,-17,66,-13,41,-81,16, 
  /* [66][0][][] */ -41,-19,6,31,-12,36,72,-34,-50,-8,36,-7,15,-91,-31,-58,-37,11,-75,12,-63,-10,8,62,26,-28,-19,-54,-38,-127,-44,54,29,-22,-2,-73,-23,-75,31,-112,-35,19,44,-13,-19,-4,6,4,91,39,-24,-14,-25,-107,-87,10,-37,14,-24,-24,-90,0,66,-53,-86,-52,-87,-28,37,-3,73,72,7,38,44,-1,-25,24,-1,42,-44,6,12,-89,55,-40,-30,6,-50,-91,-72,16,31,82,-39,-69,-22,-89,88,-11,-94,31, 
  /* [67][0][][] */ -58,49,4,100,18,11,3,-76,-65,12,-105,22,64,2,-84,78,22,33,-85,31,-65,-44,27,53,40,-38,-18,-100,99,-25,-62,36,-52,18,-16,-113,-111,-40,1,101,23,-28,-43,54,-127,-7,46,-75,-63,-99,-69,1,21,-65,-121,51,82,36,14,7,-90,17,-98,-22,-100,-81,-38,-68,64,9,39,13,-14,-16,0,-31,-39,-70,46,-3,-64,64,-18,-48,-57,36,-48,-6,-16,-75,-58,14,-84,5,-7,-88,-49,34,-118,16,-74,-22, 
  /* [68][0][][] */ -35,-5,14,21,-9,-31,127,24,-66,32,-36,-14,2,-37,-65,-45,-41,-11,-105,-74,-54,-24,-30,-15,24,-55,-27,-72,14,-31,-54,26,-17,-18,-56,-57,-41,46,-62,-113,-13,-20,-11,32,9,-3,-7,-21,35,26,-24,-13,-13,-60,-53,16,21,-23,-20,2,-50,31,20,10,-46,-10,-80,-17,-10,18,68,85,0,29,21,12,7,73,-6,79,-81,62,14,-49,20,-81,-37,17,-106,-33,-66,26,32,-8,-35,-68,-69,-33,-3,-1,-52,21, 
  /* [69][0][][] */ -23,31,3,18,118,34,3,-10,-36,-2,20,7,-24,-25,-87,0,23,-1,-84,5,-84,4,-29,-72,-6,-65,-37,-83,35,-14,-57,-13,-47,127,-24,-91,-20,-35,21,-15,42,7,7,-15,2,2,-36,36,-6,-20,-62,-29,-40,-2,-64,49,2,-46,-33,5,-88,-4,-24,18,-58,35,-28,-62,4,6,-10,-34,-5,-7,29,17,-14,-6,-4,-62,-24,5,-9,-34,-8,-5,-41,-8,-37,-28,-24,-11,38,7,29,-61,-27,56,-5,38,-69,23, 
  /* [70][0][][] */ -29,0,27,36,6,9,21,-85,-80,-23,21,-16,-19,127,-56,57,51,-5,-81,-13,-35,-44,33,41,-4,-22,-14,-36,-22,-58,-42,-7,31,-14,58,-38,15,-74,2,-16,2,-8,7,1,-26,-16,-5,19,20,11,-47,57,-31,-25,-32,-32,17,-2,-2,-30,-45,6,-2,-34,-29,-29,-20,-26,14,51,-19,-20,-15,-9,27,24,-7,-2,-23,24,-43,-23,-2,-24,9,50,47,15,-62,-36,-86,31,-6,10,19,-20,27,-4,-40,5,-38,26, 
  /* [71][0][][] */ -14,-14,3,19,-11,20,18,6,-45,36,34,-1,40,-42,-49,-1,-5,-39,-22,-40,-37,0,-3,-60,-59,38,-11,-17,72,23,-42,14,44,-14,-22,-69,57,-24,21,-24,-21,2,-10,-99,-73,0,-18,-127,-14,26,-45,-17,-40,-39,-31,20,20,34,-9,-15,-94,3,20,5,-57,24,-20,4,48,-33,17,-27,22,15,-87,20,11,-15,0,-2,2,29,-15,-16,11,34,15,-17,-28,-39,-61,-8,0,89,-11,-40,-3,-93,25,5,-52,15, 
  /* [72][0][][] */ -25,-24,-10,-1,-12,-4,121,26,-37,27,-36,-3,-12,-33,-68,-33,-42,16,-112,-71,-73,-30,-26,11,-3,-50,-43,-70,17,-12,-34,22,6,-8,-92,-63,-40,54,-48,-127,-8,-23,6,38,11,-12,-17,-21,44,37,-45,30,-35,-35,-49,19,-5,-12,-25,-20,-85,39,3,19,-57,-32,-60,-31,-20,14,74,82,7,1,34,11,1,55,-6,66,-80,72,16,-54,32,-73,-46,-11,-54,-56,-48,25,37,-15,-50,-63,-80,-48,-12,-27,-76,27, 
  /* [73][0][][] */ -57,14,-12,3,-28,21,48,-49,-54,-101,-51,12,33,-2,-120,16,21,-46,-76,-19,-74,-21,-35,-84,1,5,-6,-52,14,-13,-71,-31,-62,9,-40,-68,37,50,-18,2,103,38,-127,23,24,-17,-2,32,-83,75,-73,29,-17,-31,-101,-93,34,76,60,74,-58,-69,23,-11,-74,3,-12,-41,-5,-47,3,-12,4,-6,14,-5,21,40,-66,-32,37,68,19,-55,38,11,-17,4,-46,-5,-86,98,18,81,-4,-63,-50,-43,-24,24,-39,-26, 
  /* [74][0][][] */ -21,6,-7,-14,31,-3,32,6,-66,-85,59,75,3,-60,-63,43,-39,-80,47,58,-67,77,28,-101,46,-28,-42,-97,45,5,-30,23,14,-1,-33,-61,-22,18,-11,3,-5,-74,15,-5,-9,-12,-105,-15,63,-51,-62,-36,-70,-48,-32,-21,-12,4,53,29,-81,32,16,13,-58,51,-46,-59,12,-53,7,-31,0,27,21,-1,4,44,-40,-42,-32,4,3,-76,-70,24,-81,3,-127,-36,-55,-14,-43,-20,-21,-55,-65,-2,2,-9,-49,-4, 
  /* [75][0][][] */ -64,127,6,-22,17,20,26,-18,-37,23,4,-113,-22,9,-44,-81,49,-30,-59,6,-33,-55,29,9,37,31,12,-55,10,-94,-35,34,12,-18,-16,-70,12,-75,17,27,-6,-38,9,24,-94,16,31,32,-19,-15,-60,58,-2,-67,-70,-20,33,32,-14,64,-62,-19,-44,-97,-71,-84,-41,-30,-4,19,47,-24,0,20,0,-17,100,6,-56,2,-18,14,-11,-44,-27,35,58,22,-12,-48,-49,-55,-69,4,-10,-19,42,42,11,-8,-47,69, 
  /* [76][0][][] */ -55,40,-6,-51,42,14,23,-35,-68,-88,-10,120,69,-9,-84,22,1,-61,50,61,-70,25,3,-58,15,-6,-64,-77,55,32,-91,-25,73,-7,37,-74,37,18,21,6,89,-55,-3,19,-3,-5,-78,4,-70,0,-40,-39,-8,6,-58,-51,28,23,73,52,-85,-7,-35,-22,-36,74,-62,-80,-7,-29,-20,-20,-4,4,25,11,-15,66,-58,-58,-7,19,-127,-80,-30,-11,-52,12,-92,-93,-64,81,3,-9,23,-91,-109,-15,-28,-21,-68,33, 
  /* [77][0][][] */ -66,-12,11,-11,20,26,2,-6,-53,-60,67,68,19,-30,-60,55,-49,-54,-106,23,-34,54,43,-86,-15,-36,-66,-38,56,38,-46,53,28,11,-37,-32,12,23,29,6,-10,-50,17,-127,-103,5,-45,34,-60,-5,-49,-15,-32,-21,-67,-46,-12,27,75,-4,-43,25,-2,20,-41,79,8,-64,-3,8,23,-52,0,12,-26,14,-50,36,1,-26,-29,3,35,-54,-40,64,-69,4,-62,-33,-70,24,-21,-21,-51,-57,-49,5,7,23,-66,13, 
  /* [78][0][][] */ -10,33,22,15,-4,4,-34,8,-9,19,-15,-57,-12,-7,-33,-47,36,-37,-42,-58,-31,-52,46,-18,-46,7,35,-78,19,-48,-10,79,-34,-32,-14,-34,-22,28,16,-4,2,-10,-18,-127,-81,-6,19,14,-36,-10,-63,24,14,-36,-68,65,35,21,-41,65,-70,-5,-2,92,-70,-23,-59,-36,34,-14,28,-10,-14,4,-46,-36,18,19,-55,3,10,-44,-42,-29,-21,34,42,-11,-70,-44,-46,-65,-49,35,-112,-28,49,14,2,27,-50,43, 
  /* [79][0][][] */ -12,13,18,25,4,-6,1,-10,-36,35,-9,16,45,1,-67,46,45,56,-30,-28,-61,-20,9,0,-10,-6,-14,-87,3,-35,-26,14,8,14,-5,-19,-65,-1,-18,21,31,-41,-22,45,-23,-13,-15,-44,30,-28,-30,25,-15,-27,-52,30,-4,-9,-34,32,-51,21,5,-43,-47,1,-46,-57,26,-1,-4,0,-7,-127,-60,-32,23,3,14,49,-61,54,9,-46,-42,-20,-75,-16,-77,-34,-46,-49,-70,-45,-48,-65,-93,31,-56,-35,-31,19, 
  /* [80][0][][] */ -14,-23,-4,5,9,15,19,15,-36,-76,51,-82,5,-43,-92,31,-17,-105,-76,3,-71,65,50,-79,39,59,-11,-65,67,-1,-30,39,-19,33,-25,-24,30,-10,0,-6,-8,-99,10,7,-44,-8,-121,-42,93,-94,-65,-50,0,-48,-45,-46,-33,-127,11,25,-81,52,-25,34,-96,39,-21,-40,25,-24,8,-58,-12,19,-7,4,-18,2,-15,-44,-55,18,-10,-37,12,24,-49,-23,-48,-64,-28,-50,-47,31,-33,-63,-71,20,2,-32,-60,-18, 
  /* [81][0][][] */ -46,77,8,-43,18,9,14,-72,-23,11,-41,-127,-22,-32,-88,-28,-55,-117,-27,-5,-69,-43,45,-2,43,4,39,-107,39,31,-32,57,-5,15,-8,-42,-11,-32,6,8,11,-60,-23,33,-93,3,-51,-9,14,-43,-71,75,-59,-66,-82,-23,17,30,6,31,-103,23,-16,-66,-86,-24,-104,-59,-20,12,66,-9,6,8,-11,-12,114,-31,-25,-43,-76,0,23,-96,-2,43,-7,10,38,-12,-44,-77,-95,-43,-86,-40,19,5,-13,-18,-42,29, 
  /* [82][0][][] */ -57,-6,0,86,-26,-29,4,45,-37,1,23,-2,-50,1,-102,15,-69,-20,-68,-42,-99,-30,-49,-29,-80,31,16,-79,-29,26,-51,-14,13,-2,-8,-86,-22,-17,24,-75,-50,48,-54,-14,27,-24,-20,54,-16,40,-55,33,2,-11,-54,-16,-47,45,75,-59,-110,67,20,-127,-55,-54,-42,-31,55,26,7,97,1,-65,38,-7,-61,-35,-33,4,51,-102,13,-29,38,27,23,14,-24,-72,-68,42,-55,-26,1,-61,-25,-2,-11,10,-70,4, 
  /* [83][0][][] */ -33,79,14,-13,-28,6,-35,-35,2,-19,38,-33,-8,-18,-57,6,16,3,-59,-25,-30,-60,-63,-25,40,22,25,-62,-3,20,-36,30,20,-1,16,-40,7,33,4,-3,38,-14,9,21,-55,-3,3,17,-52,21,-42,46,-27,-36,-49,6,0,41,5,41,-43,-52,-47,37,-35,32,-62,-24,9,-40,37,-19,1,-127,-16,-6,-2,2,-26,35,-29,-32,-13,-31,-24,15,16,3,-58,-16,-31,-57,-45,38,-38,-38,11,-61,14,-19,-49,12, 
  /* [84][0][][] */ -81,47,12,-65,26,12,4,-39,-72,54,-92,-74,29,15,-55,27,42,39,69,74,-47,-36,24,37,2,-38,-16,-54,85,48,-60,-32,38,-14,-38,-108,3,36,17,35,41,-52,32,45,-40,-2,41,-57,-8,-62,-45,-36,-32,-108,-85,14,46,3,-60,-42,-66,19,-123,-19,-75,-44,-48,-99,127,58,-4,35,-2,-3,0,-33,48,17,18,-57,-7,49,-92,-64,16,-10,0,-15,-60,-57,-48,-39,-88,-108,-40,-77,-68,48,-25,0,-90,14, 
  /* [85][0][][] */ 10,-52,-57,-28,-41,22,37,0,-12,1,-53,44,41,-84,12,-87,23,-65,-9,-12,20,-20,-49,-7,10,5,-12,75,-25,-4,-1,-55,15,-88,-22,-1,36,10,23,-20,-51,-8,89,-5,65,6,32,-91,8,-54,-14,-64,24,25,-33,-127,-106,10,-24,-66,-20,-11,45,-14,3,-11,86,10,106,-90,-37,-11,6,-35,20,-5,-73,-55,54,-53,68,-2,-9,-31,66,-83,-63,14,16,61,0,11,-69,13,5,28,-6,-52,-26,-47,-5,30, 
  /* [86][0][][] */ 8,10,-10,0,-4,9,127,-5,-65,16,-43,-34,-15,-24,-66,-23,-34,21,1,-57,-62,6,-2,-18,-20,-58,-36,-76,-20,10,-28,4,21,7,-73,-29,-32,36,2,-89,6,-16,11,21,11,3,-23,1,-63,24,-55,-7,-26,-19,-49,9,17,-29,-5,-29,-104,21,-47,-31,-91,1,-25,12,-18,-15,99,-21,-12,3,-53,0,40,62,-20,51,-62,87,-28,-8,15,-20,-7,-16,-38,-11,-59,11,5,-2,-34,-74,-45,-15,37,33,-63,67, 
  /* [87][0][][] */ -27,109,8,-36,-38,-2,13,-41,-9,-19,89,-87,12,-12,-69,-36,18,17,-115,74,-29,-69,-76,-36,11,26,50,-88,-10,43,-34,14,9,19,41,-50,-35,25,-4,-4,27,6,-8,21,17,-10,-3,30,-51,18,-76,56,11,19,-79,-17,-32,50,-7,51,-94,-39,-38,39,-64,16,-53,-40,-3,-41,57,-10,-15,-127,-17,-20,-33,15,-53,59,-1,-8,2,-65,-2,25,17,-2,-70,-42,-27,-91,-77,3,-79,-50,-2,-15,-26,-23,-75,2, 
  /* [88][0][][] */ -25,-15,26,-19,-20,10,-42,-4,-26,15,3,-44,-25,-4,-63,-9,13,-12,-38,22,-34,0,-14,-44,19,49,-12,-62,43,17,-29,-42,14,23,-25,-41,10,-6,-1,3,80,-2,9,1,-16,-31,5,34,-62,-5,-48,40,-2,-53,-54,-4,25,-127,-10,21,-70,15,-42,-11,-59,63,-7,-36,20,-13,12,-15,-10,-22,14,-24,-10,-24,-34,-48,3,4,-95,-26,66,-14,-62,2,-48,-47,-33,-81,14,37,-32,-43,-18,2,-20,42,-58,20, 
  /* [89][0][][] */ 14,-85,-38,9,-31,9,57,11,-3,-14,-37,58,42,-127,4,-59,20,5,-26,-66,48,-51,-46,-38,7,14,22,103,1,-15,-27,-25,-30,-54,-34,-4,53,-34,15,-19,-46,5,59,-7,81,-13,23,-49,-4,-31,-16,-73,70,9,-30,-71,-81,1,-27,-127,-20,12,49,10,0,20,91,1,86,-113,-94,9,-2,-24,37,-9,-108,-74,59,-23,103,53,-1,-16,71,-100,-53,3,25,68,27,9,-46,30,-6,46,50,-39,-20,-20,-3,-22, 
  /* [90][0][][] */ -68,-9,-37,-10,-34,16,42,-4,-40,-14,39,-57,83,-71,-90,-68,-13,-53,-59,-52,-82,-90,83,2,21,-7,16,-92,8,26,-48,68,-37,71,12,-74,-31,16,33,-45,4,21,-33,-36,-3,-8,53,-28,56,36,-48,25,40,-49,-62,-15,-80,-103,-49,-67,-92,65,26,-31,-99,-56,-61,-52,7,42,84,43,0,-32,-37,1,14,-32,0,-71,98,-8,-2,-54,4,15,40,-1,30,-49,-59,-8,32,33,-32,-68,-20,-25,-30,-127,-76,-39, 
  /* [91][0][][] */ -77,21,-18,9,-11,25,-13,2,-114,-84,-117,-2,-52,-12,-78,46,20,1,34,72,-93,-15,-12,-20,-60,3,26,-65,67,88,-100,-60,-56,-10,-53,-112,86,40,31,17,30,56,-103,52,76,12,-22,36,-29,90,-78,-25,37,0,-97,-30,53,-40,-44,66,-127,-51,70,-2,-71,-9,-57,-40,8,-41,32,-48,-10,27,21,-29,35,5,-63,-26,36,95,74,-78,0,-32,-43,14,-50,-120,-101,58,-7,74,-39,-90,-104,16,-5,12,-55,-40, 
  /* [92][0][][] */ -52,6,-18,-32,-3,23,91,34,-117,9,-68,15,-14,-64,-99,35,-40,31,-27,-53,-74,-19,-38,1,7,-86,-7,-127,3,45,-72,16,37,21,-66,-47,-54,44,1,-108,11,-33,7,49,-18,-19,-3,-24,-46,3,-50,12,-69,-27,-77,1,7,-27,-4,44,-123,44,-105,-17,-103,36,-60,-62,-31,79,44,22,-9,-2,-2,-13,2,88,-5,86,-46,82,-97,-18,-62,-24,-52,-23,-58,-100,-78,57,6,-33,-23,-82,-39,-12,45,25,-81,62, 
  /* [93][0][][] */ -37,17,11,-16,33,5,-63,-39,-84,-60,-83,23,-25,-6,-115,16,-107,-30,-34,16,-111,-42,37,9,38,-8,79,-127,52,2,-74,67,-71,23,-21,-111,31,-84,11,23,-16,-98,-9,47,-68,-1,72,-10,-7,-41,-73,-73,-16,-53,-112,-16,40,-18,101,54,-110,25,-87,-6,-108,-54,-89,-83,23,62,25,-2,-22,39,-25,-51,-41,-34,-1,-46,-2,13,-99,-69,-25,44,-33,1,-6,-57,-82,-19,-14,-16,-41,-59,-58,-12,-21,53,-98,30, 
  /* [94][0][][] */ -73,-89,-4,-53,-36,5,-6,-4,-93,-63,-22,9,24,-44,-91,-31,-40,35,-87,-27,-72,-33,-70,-28,-81,28,42,-94,-40,-7,-64,-28,65,27,36,-106,40,-23,26,-9,56,5,9,-88,1,2,1,-9,-61,34,-37,-17,-77,-70,-77,-10,-15,25,11,9,-122,113,22,-36,-110,45,52,-105,-41,67,-23,-2,-12,-1,-74,-1,5,-4,19,26,17,41,-127,-80,-18,-18,-18,-4,0,-46,-115,52,13,34,-16,-92,-29,26,-3,4,-101,60, 
  /* [95][0][][] */ -50,-17,-23,12,9,-3,-24,9,-38,-89,36,-66,5,-44,-124,-4,-90,-52,-54,-40,-70,11,93,-55,66,80,-22,-92,25,-18,-47,51,-49,29,19,-68,51,6,19,-26,29,-53,-12,-18,-5,-12,-127,-38,77,-43,-75,-35,-59,-33,-85,-53,2,-51,82,33,-107,9,-25,0,-99,-31,-33,-58,-36,-15,57,3,-22,2,-27,-13,32,-42,-3,-66,7,2,-17,-66,46,29,-3,3,-49,-97,-60,-52,-34,56,-37,-72,-29,-54,-5,-23,-66,-14, 
  /* [96][0][][] */ -49,50,6,-14,-48,22,46,-51,-21,5,63,-14,32,-31,-95,15,36,-7,-75,-38,-84,-64,1,-17,-9,4,48,-55,16,66,-39,-1,-76,-2,-22,-86,-6,2,10,-39,8,5,21,2,16,-21,35,52,4,-3,-80,26,13,-28,-79,-2,-48,-127,-40,-8,-72,-12,-9,20,-60,-43,-12,-18,-1,-1,49,-14,6,-95,3,-22,22,9,-64,-24,-4,5,-24,-56,-9,72,25,6,28,-47,-40,-34,-32,19,-45,-47,19,30,-29,-65,-70,16, 
  /* [97][0][][] */ -92,9,-21,-1,0,13,26,-58,3,-66,-41,-74,47,-23,-67,-70,-78,-101,-38,-35,-66,-86,86,9,40,-2,50,-95,30,34,-38,127,-93,53,19,-66,-4,-44,33,-67,14,-59,-56,14,-36,3,14,-13,-16,21,-34,-42,-39,-75,-78,-28,-25,-54,69,11,-74,42,0,-23,-119,0,-56,-71,0,35,95,81,-1,7,-46,-31,21,-52,1,-83,79,-25,-8,-107,-18,-26,4,7,-15,-60,-44,-1,-31,23,-59,-44,-90,-45,-20,-110,-60,-69, 
  /* [98][0][][] */ -41,23,1,14,-2,-1,126,-21,-39,64,8,-8,-39,-45,-73,-16,-8,10,-70,-43,-50,11,-6,-17,-27,-55,-3,-70,-12,-29,-46,-3,12,-39,-84,-70,-27,-6,15,-84,8,4,-9,23,-3,0,-19,-31,-75,41,-68,-24,-47,-17,-78,28,25,17,-19,-36,-109,-11,-21,-43,-70,-7,-46,28,-20,-15,127,-30,-15,13,-39,-24,42,43,-40,29,-39,74,-28,0,10,-9,-6,5,-19,1,-74,-9,3,50,-44,-85,-15,-114,52,-19,-44,32, 
  /* [99][0][][] */ -3,3,11,52,5,21,-52,21,-68,-17,-4,-20,9,-11,-52,-23,-12,45,-38,-6,-50,17,14,-43,17,5,11,-75,9,28,-24,-6,22,32,-16,-24,-21,-20,25,18,-27,9,12,-119,-97,-34,-6,37,-7,-53,-54,-18,-15,-7,-39,51,26,-127,7,-12,-94,18,21,26,-47,37,-63,-54,-5,-10,34,-50,-6,19,-37,-18,-51,-23,8,-11,6,10,7,-49,7,-9,-58,-7,-7,-43,-54,-10,-21,37,-92,-45,-29,-1,1,35,-56,-20, 
  /* [100][0][][] */ 17,-27,-2,-42,-33,12,26,13,-7,-71,-63,58,74,-40,19,-101,5,-38,-8,-17,0,-69,-43,-54,-5,-14,-53,98,-40,8,18,-39,49,-52,7,-12,11,3,31,-61,-33,-33,80,-17,95,-14,19,-43,13,-70,-14,-37,20,5,-16,-97,-90,9,-26,-41,-22,0,35,-25,-7,-20,84,16,95,-64,-26,-14,-11,-25,22,-3,-56,-45,58,-49,127,-90,-16,-32,76,-51,-20,1,11,56,-18,9,-95,-2,16,42,23,-11,0,-40,0,-5, 
  /* [101][0][][] */ -21,-59,8,54,-15,18,-19,-62,-35,23,8,49,-12,20,-45,27,37,9,-7,-57,-19,10,61,-3,-43,-14,-27,-53,0,-53,-46,42,-5,-3,-3,-30,-68,27,22,4,-27,-64,21,-127,-68,-9,-76,61,-84,21,-66,-11,-40,-27,-80,-1,23,31,-5,23,-49,25,-16,57,-68,33,8,-39,1,-45,41,13,-19,9,-82,-16,20,24,11,1,-26,28,11,-64,-27,70,-60,0,-84,-9,-41,-15,-7,-21,-16,-59,-32,20,-4,8,-57,26, 
};
const TfArray<4, int> tensor_dimension56 = { 4, { 102,1,1,102 } };
const TfArray<102, float> quant56_scale = { 102, { 0.00017716732691042125, 0.00015959185839165002, 0.00023366561799775809, 0.0001794021954992786, 0.00020038557704538107, 0.00021417578682303429, 0.00015896021795924753, 0.00027474845410324633, 0.00021859162370674312, 0.00023444480029866099, 0.00035829245462082326, 0.00015088338113855571, 0.00025133506278507411, 0.00017306329391431063, 0.00021566863870248199, 0.00029849851853214204, 0.00027319998480379581, 0.00017537067469675094, 0.00020310741092544049, 0.00015412690117955208, 0.00020391627913340926, 0.0003195066237822175, 0.00016869943647179753, 0.00021411267516668886, 0.00022686028387397528, 0.00023139682889450341, 0.00020657826098613441, 0.0001646337186684832, 0.00018878628907259554, 0.00011611533409450203, 0.00020533478527795523, 0.00019976505427621305, 0.00021806247241329402, 0.00021989957895129919, 0.00019557567429728806, 0.00018425894086249173, 0.00023233481624629349, 0.00019715637608896941, 0.00023403346131090075, 0.00027512537781149149, 0.0002322801883565262, 0.00017086621664930135, 0.00067115132696926594, 0.00069346744567155838, 0.00015538449224550277, 0.00020289284293539822, 0.0002203145413659513, 0.00018589185492601246, 0.00017184797616209835, 0.00022412120597437024, 0.00016252469504252076, 0.00026724583585746586, 0.00020583884906955063, 0.00023060564126353711, 0.00024532063980586827, 0.00017913496412802488, 0.00023997978132683784, 0.00028013516566716135, 0.00017730089894030243, 0.00015817719395272434, 0.00024603705969639122, 0.00019054541189689189, 0.00021719039068557322, 0.00017939471581485122, 0.0001493230665801093, 0.00017324650252703577, 0.00017103362188208848, 0.00014357559848576784, 0.00018318850197829306, 0.00018402437854092568, 0.00021786168508697301, 0.00024020698037929833, 0.0001971266174223274, 0.00019847777730319649, 0.00023228248755913228, 0.0002015898353420198, 0.00018932179955299944, 0.00021776702487841249, 0.00023924313427414745, 0.00023941221297718585, 0.00018820767581928521, 0.00018469608039595187, 0.0001997218350879848, 0.00026516470825299621, 0.00017461403331253678, 0.00018234734307043254, 0.00021414595539681613, 0.00017578764527570456, 0.00022214447380974889, 0.000171612438862212, 0.00016457067977171391, 0.0001731735683279112, 0.00015533584519289434, 0.00015750886814203113, 0.00016518161282874644, 0.00017146821483038366, 0.00020499606034718454, 0.00017337569443043321, 0.00021029627532698214, 0.00023249301011674106, 0.00017789073172025383, 0.00023047594004310668, } };
const TfArray<102, int> quant56_zero = { 102, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const ALIGN(16) int32_t tensor_data57[102] = { -5312, -3162, 13693, -189, 20339, -4215, 929, -50968, -7365, 1972, 13039, 4356, -4251, -4695, 5345, -4573, 17059, 2933, 14683, 568, -5262, -2152, -50170, -13396, 10803, 533, 12390, 17469, -2539, -69295, 8077, 2784, 6256, 14096, 1065, 773, -2861, 14756, 2093, -8499, 4722, -6156, -5079, -2779, 6236, -4736, 12086, -54265, -9491, 17881, -4906, -43549, 20958, 4864, 14337, 6909, -74672, 3627, -6971, -10382, 3167, -5236, 6759, -16863, -27515, -8369, -6178, -357, 4029, -3952, -6723, -2009, 3322, -1288, 11923, -3807, 14037, 1693, -2512, 4018, 8267, 15890, 4792, -1223, 26393, -48485, 1353, 888, -718, -76648, 5362, 2219, 11598, 24626, 16473, 12195, 4605, 19936, -1454, -3029, -58841, -9659, };
const TfArray<1, int> tensor_dimension57 = { 1, { 102 } };
const TfArray<102, float> quant57_scale = { 102, { 4.1686430449772161e-06, 3.7551026252913289e-06, 5.4980146160232835e-06, 4.2212282096443232e-06, 4.7149546844593715e-06, 5.0394305617373902e-06, 3.7402405723696575e-06, 6.4646696955605876e-06, 5.1433326007099822e-06, 5.5163482102216221e-06, 8.4304110714583658e-06, 3.5501973343343707e-06, 5.9137664720765315e-06, 4.0720774450164754e-06, 5.0745561566145625e-06, 7.0234946178970858e-06, 6.4282348830602132e-06, 4.1263688217441086e-06, 4.7789981181267649e-06, 3.6265153084968915e-06, 4.7980302042560652e-06, 7.5178031693212688e-06, 3.969398676417768e-06, 5.037945356889395e-06, 5.3378889788291417e-06, 5.4446313697553705e-06, 4.8606652853777632e-06, 3.8737348404538352e-06, 4.442030331119895e-06, 2.7321254947310081e-06, 4.8314068408217281e-06, 4.7003541112644598e-06, 5.1308816182427108e-06, 5.1741076276812237e-06, 4.6017808017495554e-06, 4.3355043999326881e-06, 5.4667016229359433e-06, 4.6389736780838575e-06, 5.5066698223527055e-06, 6.4735386331449263e-06, 5.4654165069223382e-06, 4.0203817661677022e-06, 1.5791796613484621e-05, 1.6316880646627396e-05, 3.6561057186190737e-06, 4.7739495130372234e-06, 5.1838715080521069e-06, 4.3739260036090855e-06, 4.0434820220980328e-06, 5.2734403652721085e-06, 3.8241105357883498e-06, 6.2881372286938131e-06, 4.843267106480198e-06, 5.4260153774521314e-06, 5.7722504607227165e-06, 4.2149404180236161e-06, 5.6465833040419966e-06, 6.5914159677049611e-06, 4.1717858039191924e-06, 3.7218164834484924e-06, 5.7891074902727269e-06, 4.4834214349975809e-06, 5.1103620535286609e-06, 4.2210522224195302e-06, 3.5134839890815783e-06, 4.0763884499028791e-06, 4.0243207877210807e-06, 3.3782494028855581e-06, 4.3103177631564904e-06, 4.32998558608233e-06, 5.1261572480143514e-06, 5.651928859151667e-06, 4.6382733671634924e-06, 4.6700656639586668e-06, 5.4654706218570936e-06, 4.743290446640458e-06, 4.4546304707182571e-06, 5.1239298954897095e-06, 5.6292501540156081e-06, 5.6332287385885138e-06, 4.428416104929056e-06, 4.345790330262389e-06, 4.6993372961878777e-06, 6.2391695792030077e-06, 4.1085654629569035e-06, 4.2905257942038588e-06, 5.0387284318276215e-06, 4.136179995839484e-06, 5.2269288062234409e-06, 4.0379400161327794e-06, 3.8722514545952436e-06, 4.0746722334006336e-06, 3.6549611195368925e-06, 3.706091092681163e-06, 3.8866264731041156e-06, 4.0345462366531137e-06, 4.8234369387500919e-06, 4.0794279811962042e-06, 4.9481477617518976e-06, 5.470423730002949e-06, 4.1856642383208964e-06, 5.4229635679803323e-06, } };
const TfArray<102, int> quant57_zero = { 102, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const ALIGN(16) int8_t tensor_data58[128*102] = { 
  -13, 40, 12, -18, -19, 2, 25, -19, -50, -38, 0, -23, -24, -11, -15, -25, -18, -33, -8, 15, 12, 11, 2, -24, 36, -7, -14, 19, -35, 11, -5, -34, -25, 19, 19, 36, -19, 44, 0, 25, -33, 17, -30, -62, 52, 27, 9, -5, -45, -6, -30, -64, -78, 39, -2, -22, -26, -11, 28, -1, -1, -8, -45, -53, 10, -19, -50, -39, 9, -11, -47, -2, -24, 26, -20, -50, -5, -55, -48, 51, 55, -13, 1, -49, -1, 5, 46, -39, 27, -13, 6, -30, 50, 14, 14, 58, 53, 30, 32, -25, 13, -37, 
  -49, 42, 47, -28, -61, -5, 22, -49, -39, -41, -22, 11, 24, 0, 8, -27, -48, -39, -54, 24, -10, -14, -12, -38, 32, 10, 13, -16, -45, 12, 40, -26, -43, -18, 0, 21, -28, 28, -48, 0, -32, 10, 6, -10, 43, 14, -18, 2, -45, -41, -10, -54, -39, 24, 10, -8, -51, 25, -7, -40, -8, -16, -27, -61, -11, -15, -18, -19, -5, 3, 31, -30, -4, 34, -27, -68, 32, -59, -34, 22, 37, -29, 2, -21, -5, -1, 6, -30, -21, 0, -15, -20, 62, -16, 26, 3, 30, -3, -10, -40, -7, -23, 
  26, 4, 26, 24, 30, -28, -53, 9, -9, 41, 13, 38, 11, 3, 10, 12, 64, 42, 28, -25, -53, -51, 19, -47, -35, 21, 13, 2, 26, -12, 44, 49, 4, 6, -27, -19, -7, -12, 41, -12, 43, -36, 12, 42, -59, -21, 29, 8, -28, 24, 22, 55, 78, 28, -28, 54, 28, -27, -71, 18, 29, 2, 11, 22, 5, -7, 43, 3, 28, -21, 14, 17, 33, 3, 18, 37, 1, 32, 34, -4, -47, 40, 1, 46, 44, 25, 4, 63, -1, 28, 44, -31, 3, 6, 8, -4, 13, -1, -12, -26, 33, 25, 
  20, -8, -49, 1, 2, 24, 46, 32, 26, -28, 12, -29, 20, 9, -4, 31, -37, -33, -10, 21, 34, 57, -35, 36, 36, -38, 4, -17, 14, -1, -55, -29, 5, 24, 23, 2, 33, -23, 2, 16, -29, 18, 11, 12, 4, 12, -14, -12, 25, 6, 2, -39, -104, -23, 38, -49, 11, 32, 46, -8, -27, 18, 26, 33, -10, 27, -14, 38, -8, 32, 5, 22, -22, 3, -23, 0, -22, -3, -7, -12, 19, -31, -12, -26, -28, -29, 15, -40, 18, -33, -33, 29, -42, -3, -22, -1, -31, 6, 25, 22, -39, 13, 
  58, -14, -50, -1, 10, 41, 60, 22, 38, -29, 18, -52, 7, 16, -20, 39, -46, -23, 3, 21, 59, 77, -19, 53, 36, -61, 10, -13, 41, -5, -63, -35, 18, 49, 29, 16, 35, 25, 23, 30, -51, 33, -14, -1, 23, 21, -30, -42, 36, 29, -12, -38, -116, -18, 44, -63, 27, 44, 68, 23, -28, 23, 9, 33, -7, 41, -34, 33, -19, 36, -17, 43, -19, -23, -21, 13, -46, -11, -18, 7, 43, -10, -5, -48, -37, -25, 32, -64, 30, -20, -40, 35, -32, 26, -21, 17, -55, 14, 41, 29, -41, -6, 
  -16, 17, -25, -2, -42, 31, 26, 5, 24, -35, -19, -26, 45, 29, -18, 8, -57, -43, -47, 35, 24, 58, -31, 22, 31, -18, 0, -38, -21, -5, -30, -40, 18, 6, -5, 5, 30, -38, -54, 6, -48, 11, 37, 10, 29, 21, -8, -11, 18, -1, 8, -40, -75, -13, 47, -44, 6, 38, 37, -29, -27, 15, 23, 8, -3, 38, 0, 28, -8, 22, 27, -14, -11, 9, -30, -24, -6, -21, 11, -10, 2, -45, -18, -39, -39, -48, 14, -54, 6, -36, -38, 38, 1, 3, -13, -44, -9, 2, -6, 20, -44, 24, 
  5, 3, 4, -5, -9, -2, 6, -13, -10, -2, 6, 0, -4, 8, 5, 2, -12, 8, -2, -8, 9, -8, 3, -6, 2, 8, -3, 8, -7, -9, 5, -11, -12, -5, 6, 6, -5, -12, -13, -12, -4, -4, -14, 7, -9, -2, -10, 2, -7, -1, -4, 6, -10, -9, 6, -3, -10, -1, -13, -14, -11, -5, 5, -11, -12, -1, 1, -7, -14, 1, 8, -1, 3, -2, 6, 1, -9, 2, -3, -8, -9, 9, -10, 6, 0, 5, -11, -7, 7, 9, -13, -12, 2, 3, 7, -6, -1, 7, 9, 6, 4, -14, 
  -16, 5, 63, 1, 7, -18, -63, -22, -42, 32, -1, 42, -5, -15, 25, -10, 43, 42, 13, -22, -55, -60, 29, -47, -50, 55, 8, 19, 6, -1, 46, 49, 3, -36, -33, -21, -17, 5, 19, -34, 57, -19, 16, 29, -42, -19, 30, 17, -40, 5, 24, 52, 95, 39, -42, 65, -3, -44, -59, 18, 46, 12, -12, -1, 2, -15, 40, -15, 19, -20, 10, -15, 30, 25, 29, 17, 49, 31, 24, 8, -34, 17, 6, 28, 49, 28, -18, 66, -19, 41, 44, -41, 43, -8, 34, -11, 41, 7, -36, -24, 46, -3, 
  35, 6, -36, -1, 46, -25, 19, 16, -25, 38, 26, 2, -21, -9, -7, 30, 59, 31, 63, 1, 10, -1, 25, -1, -1, -10, -5, 49, 37, 1, -15, 26, -11, 45, 29, 11, -14, 55, 47, 48, -5, 21, -43, -27, 8, 2, 44, -4, -14, 49, 2, 29, 17, 2, -10, -7, 24, -20, 28, 50, 22, -4, -18, -12, 8, -22, -22, -3, 18, -6, -27, 26, -3, -18, 32, 41, -18, 11, -27, 19, 57, 37, 14, -7, 21, 32, 36, 12, 40, 6, 43, -10, 1, 45, -13, 69, 9, 38, 34, 17, 23, -14, 
  49, 5, -28, 7, 80, -5, 33, 20, -10, 46, 60, -2, -43, -25, 2, 42, 44, 33, 60, -1, 39, 20, 24, 14, 4, -1, 2, 43, 25, 12, -21, 10, -19, 55, 52, 9, -14, 75, 72, 46, 1, 25, -49, -40, 31, 6, 59, -3, -11, 77, 2, 41, -4, 14, -14, -15, 16, -10, 42, 61, 11, -16, -48, -23, -5, -10, -39, 8, 19, -12, -51, 40, -1, -15, 26, 40, -24, 2, -37, 38, 70, 62, 11, -20, 36, 25, 53, 5, 57, 24, 80, -33, -18, 50, -8, 81, 5, 47, 66, 26, 18, -29, 
  28, 12, -7, 16, 40, -20, -25, 11, -22, 42, 23, 25, -26, -3, -1, 23, 65, 43, 54, -17, -17, -5, 3, -26, -22, 16, 30, 33, 40, 4, -2, 34, 13, 15, 2, -5, 7, 8, 51, 24, 28, -22, -6, 16, -60, -4, 29, 8, -8, 32, 22, 46, 33, -4, -22, 30, 13, -31, -36, 33, 21, 7, 5, 33, 2, -6, 36, 2, 18, -14, -4, 33, 28, 9, 5, 41, -7, 25, 4, 14, -29, 49, 15, 18, 29, 11, 26, 17, 18, 25, 35, -7, 0, 13, 5, 16, 19, 15, 24, -4, 16, 15, 
  26, -13, -49, -6, -7, 26, 69, 30, 41, -38, 16, -39, 2, 9, -12, 32, -36, -28, -17, 31, 49, 54, -21, 34, 37, -60, 8, -9, 8, 8, -56, -58, 4, 43, 37, 39, 29, 34, 5, 26, -52, 35, -31, -30, 41, 32, -14, -27, 41, 16, -15, -35, -104, -7, 38, -65, 16, 45, 70, -3, -30, 17, -3, 21, -12, 22, -33, 25, -18, 31, -14, 28, -20, -9, -20, -2, -34, -11, -26, 13, 52, -17, -9, -52, -23, -22, 23, -71, 36, -20, -32, 29, -26, 24, -25, 37, -31, 4, 51, 28, -27, 7, 
  18, -4, -64, 2, -12, 38, 56, 22, 37, -25, 8, -40, 0, 27, -30, 29, -55, -51, -8, 26, 64, 72, -22, 25, 46, -53, 4, -8, 0, -10, -57, -35, 15, 37, 24, 14, 39, 3, 11, 34, -42, 25, -8, 7, 28, 19, -13, -21, 43, 7, -13, -30, -120, -24, 52, -76, 17, 56, 55, 5, -41, 9, 18, 14, 10, 41, -38, 24, -15, 33, 8, 41, -23, -14, -26, 1, -36, 0, -12, 11, 30, -37, -25, -27, -36, -25, 19, -58, 28, -34, -33, 32, -46, 5, -35, 15, -41, 10, 37, 20, -43, 20, 
  26, -3, -56, -7, 18, 30, 68, 18, 20, -29, 14, -41, -19, 13, -16, 25, -27, -36, -6, 11, 61, 66, -12, 44, 42, -41, 1, 11, 11, 2, -46, -46, -7, 40, 30, 45, 25, 51, 17, 43, -50, 22, -27, -48, 41, 22, -13, -35, 27, 31, -13, -51, -105, 3, 42, -47, 14, 39, 63, 5, -33, 7, -20, -8, 12, 23, -58, 11, -4, 36, -23, 18, -15, -1, -9, 6, -37, -12, -36, 26, 53, -11, 11, -49, -29, -19, 41, -73, 34, -27, -13, 39, -27, 14, -12, 55, -19, 33, 53, 37, -22, -14, 
  -4, 10, 2, 9, 9, -6, 7, -12, 3, 0, 9, 12, -1, 3, 10, -11, 1, 0, 2, 10, -13, -13, 7, 0, -12, -5, -1, -7, -2, 8, -5, 1, -9, 10, 5, -9, 0, -1, 5, -11, -7, 7, 0, -6, -9, 0, -11, -10, -3, -10, -3, 8, 1, 1, 0, 7, -7, -9, 2, -4, -10, 0, -2, -5, 10, -12, -6, 1, 9, 7, 0, 8, 6, 0, 0, -10, 5, 3, -13, -1, -4, -5, -6, 6, 8, 1, 0, 5, -4, -14, 3, -12, -11, -2, -10, 4, 9, -2, -11, 11, -11, 4, 
  -16, 41, 47, -14, 11, -15, 8, -28, -38, 12, 14, 41, -35, -14, 18, -22, 27, 30, 16, 1, -11, -10, 47, -25, -2, 41, -5, 54, -12, 7, 38, 40, -24, -10, 17, 12, -26, 78, 33, 20, 10, 8, -26, -38, 20, 3, 43, 41, -47, 10, -13, -2, 82, 43, -10, 39, -37, -32, -15, 16, 43, -19, -47, -44, -9, -24, -20, -39, 17, -21, -33, -17, 17, 31, -4, -34, 30, -16, -53, 29, 39, 20, 19, 7, 54, 45, 35, 28, 3, 23, 71, -35, 46, 29, 32, 64, 53, 46, 29, -19, 64, -31, 
  -58, 13, 34, 3, -91, -11, -52, -36, -49, -72, -63, 26, 46, 0, 25, -64, -24, -14, -71, 7, -66, -40, 8, -59, -3, 32, 19, -14, -49, 0, 39, 2, -28, -62, -49, 1, -31, -45, -97, -51, 8, -12, 37, 40, 5, -5, -22, 6, -56, -68, 16, -46, 49, 10, -9, 34, -57, 10, -58, -52, 12, -10, 4, -44, -12, -32, 26, -31, 16, -3, 35, -48, 9, 27, -22, -80, 36, -34, 16, -19, -51, -52, -20, 3, 9, -2, -40, 18, -57, 13, -46, -27, 41, -28, 37, -53, 8, -46, -78, -64, -3, 6, 
  41, 19, -12, 14, 60, -9, 7, 21, -29, 45, 33, -4, -40, -8, -3, 20, 66, 33, 47, -9, 4, -4, 12, -1, -16, 2, 13, 40, 29, -6, -16, 12, -13, 41, 30, -4, -16, 52, 59, 34, 20, 9, -39, -26, 4, 10, 44, 8, -18, 50, -1, 32, 27, 15, -31, 3, 35, -27, 12, 46, 24, -6, -19, -3, -8, -9, -20, 0, 8, -17, -27, 33, 20, -8, 33, 20, -17, 13, -10, 31, 58, 40, 10, -5, 32, 21, 49, 6, 31, 19, 52, -24, -16, 30, -11, 67, 12, 38, 28, 20, 24, -15, 
  -37, 4, 35, 11, -74, 16, -37, -16, 14, -57, -56, 11, 42, 34, 10, -35, -44, -27, -76, 24, -30, -4, -20, -32, 20, 9, 18, -33, -45, 3, 32, -8, 7, -49, -39, -11, 14, -55, -68, -55, 3, -24, 50, 38, -2, 0, -44, 3, -1, -59, 26, -35, -6, -6, 20, 3, -26, 29, -51, -48, -1, 15, 33, -13, -11, 12, 37, 3, 8, 14, 54, -44, 8, 29, -20, -43, 37, -28, 28, -24, -53, -66, -11, 3, -11, -2, -38, -6, -47, -16, -55, 22, 26, -39, 30, -66, -10, -37, -53, -24, -12, 24, 
  44, 9, -27, 7, 44, -15, 35, 21, -7, 48, 52, -15, -21, -23, -10, 27, 52, 19, 43, -15, 33, 19, 11, 8, 9, -7, -1, 36, 26, -6, -31, 0, -22, 35, 32, 15, -5, 69, 55, 50, -9, 26, -44, -41, 19, 8, 30, -4, -13, 44, 1, 43, -5, 12, -17, -6, 21, -8, 34, 50, 25, -13, -28, -1, -1, -2, -22, -8, 14, -4, -31, 32, 6, -7, 17, 26, -24, 2, -38, 19, 49, 38, 18, -1, 30, 27, 53, -10, 46, 20, 64, -15, -12, 49, -3, 68, 15, 52, 57, 15, 36, -37, 
  -58, 24, 43, -47, -77, -38, -43, -24, -42, -66, -40, 21, 17, -1, 21, -43, 1, -6, -66, -5, -40, -30, 2, -47, 9, 12, 19, 4, -57, -4, 53, -16, -17, -38, -28, -9, -42, -24, -83, -36, -14, -39, 31, 26, 26, 3, -9, 20, -31, -39, -13, -40, 62, 26, -37, 24, -43, -23, -39, -46, 0, -16, -25, -40, 7, -38, 11, -45, 22, -34, 27, -40, -3, 39, -16, -76, 40, -41, -14, -32, -32, -66, 1, -5, 13, 18, -27, 8, -29, -1, -19, -25, 42, -30, 37, -34, 20, -16, -71, -35, 15, -31, 
  10, -21, -56, -26, 37, -26, 45, 42, 18, -6, 26, -31, -15, 37, -54, 0, -9, -27, 38, -12, 36, -12, -3, -4, -22, 10, -24, 0, 54, -3, -27, 29, 40, -5, 45, 17, -12, 36, -40, 19, 16, 0, -14, 13, -51, 30, 42, 9, -4, -2, 36, 25, -30, 2, -7, -14, 35, -24, -5, 9, 42, 47, 14, 23, -2, 21, -20, 26, -13, 16, 18, 34, 6, 5, -11, -24, -44, 1, -3, 12, -9, 56, 40, -30, 24, 11, -28, -22, -37, 9, 53, -33, -35, 2, -59, 30, -1, 25, -36, -18, 0, -11, 
  8, 9, 0, -8, 10, 3, -9, -3, -6, -8, -10, 4, -12, -4, 6, -5, 8, -6, -5, -13, 9, 5, -6, -5, 1, -1, -5, -2, 7, -11, -14, -4, 2, -1, -4, 7, -8, -8, 9, 9, -2, -5, -3, 6, 5, -7, -9, 2, -11, -3, 6, -11, -6, -4, 2, -9, -14, -13, 2, -10, 10, -12, -4, -10, 8, -11, -8, -7, -10, -11, 1, 5, -2, -13, 7, -7, 3, -5, -9, -13, 5, -10, -4, -9, 4, 6, -3, 6, -9, 5, 3, 5, -7, 3, 4, -6, 8, -3, -11, 3, -2, -8, 
  17, -19, 37, 20, 5, -6, -51, 9, 33, 43, -13, 34, 28, 15, 23, 12, 45, 32, 25, -11, -26, -24, 0, 12, -45, 20, 22, -2, 27, -9, 40, 26, 32, -11, -15, -37, 19, -54, 14, -10, 60, -26, 44, 51, -52, -7, 4, 18, 27, 15, 25, 55, 73, 11, 7, 42, 37, -16, -55, 20, 27, 29, 39, 60, -8, 8, 57, 25, 19, 12, 52, 3, 30, -3, 11, 27, 16, 52, 56, -9, -62, 19, 0, 37, 16, 17, -22, 60, -31, 13, 8, 19, -16, -22, 0, -39, -2, -12, -12, 36, 6, 51, 
  52, -22, -26, 14, 70, 12, 19, 28, 35, 39, 43, 9, -17, 3, -14, 28, 51, 22, 60, -12, 34, 20, -4, 42, 1, -7, 0, 35, 45, -3, -33, 11, 17, 41, 20, -13, 5, 28, 82, 26, 11, 26, -13, 0, -9, 1, 38, 5, 39, 45, 7, 62, 20, -7, 15, -5, 55, -1, 29, 52, 17, 3, 8, 48, 2, 14, 11, 31, 0, 18, -14, 24, 14, -32, 21, 59, -6, 44, 6, 4, 32, 44, 26, 8, 11, 8, 37, 9, 52, 6, 30, 36, -45, 19, -14, 43, -10, 31, 33, 54, 15, 2, 
  38, -10, -15, 29, 26, 7, -32, 35, 50, 54, 8, 14, 16, 23, 6, 32, 31, 30, 24, -14, 8, 10, -4, 46, -44, 4, 12, -9, 53, -2, -23, 20, 25, -7, -24, -35, 15, -46, 36, -4, 53, -10, 19, 63, -83, 8, 30, -3, 52, 34, 39, 75, 62, -9, -9, 0, 27, -4, -15, 39, 30, 27, 38, 68, 6, 39, 60, 31, 5, 27, 22, 29, 42, -7, 8, 61, -13, 52, 38, 1, -66, 46, 0, 56, 10, -2, -20, 52, 3, 11, 7, 42, -29, 0, -21, -42, -13, -10, 6, 39, 8, 39, 
  -52, -12, 47, -8, -36, 19, -32, 27, 39, -66, -27, 26, 50, 45, 10, 28, -38, -20, -37, 33, -6, 9, -50, 18, -16, -6, 16, -33, -39, 4, 57, -11, 21, -31, -12, -23, 24, -84, -76, -18, -17, -23, 56, 57, -17, 6, -43, -26, 39, -32, 23, -11, -27, -29, 29, 30, 10, 25, -17, -55, -18, 33, 48, 46, 5, 22, 55, 20, -14, 26, 52, -2, -1, 36, -26, -12, 28, 11, 64, -84, -53, -31, 0, 12, -65, -61, -44, -4, -27, -44, -52, 45, 8, -28, 15, -73, -33, -47, -60, 2, -66, 31, 
  0, 5, 9, -8, -8, -4, -8, -3, 5, -1, 4, -10, -6, -7, -6, -8, 3, -9, -3, -1, 3, 9, 3, 0, -8, -6, -4, -4, 7, -4, 13, 13, 2, 2, -10, -4, 6, 10, -1, 3, 3, -10, 5, 3, -8, -11, -2, -11, -7, 4, 5, -5, -10, 6, -6, -2, 9, -9, -6, 6, -5, -13, -6, -4, 8, -9, -4, 2, -6, -3, 1, 2, 11, 2, -12, 7, -4, 0, -7, -3, 2, -11, -10, 11, -8, 1, -8, -9, -9, 2, 2, -5, 0, -8, -5, -4, 1, -9, 7, 2, -9, -10, 
  17, -11, -63, 17, -3, 12, 28, 28, 39, -31, 4, -47, 24, 23, -16, 28, -31, -30, -6, 19, 35, 41, -37, 32, 29, -42, -2, -35, 20, 4, -63, -35, 34, 29, -3, 1, 37, -51, -7, 15, -23, 12, 26, 25, 5, 11, -9, -27, 25, 7, 0, -18, -104, -39, 42, -59, 27, 28, 37, -13, -26, 19, 34, 43, -5, 33, -4, 36, 0, 18, 11, 28, -6, -17, -16, 13, -30, 12, 10, -8, -13, -11, -2, -9, -50, -40, -12, -48, 12, -31, -43, 18, -38, 6, -32, -35, -44, -14, 10, 31, -42, 23, 
  2, 6, -11, -2, -7, -1, -4, 11, -3, 4, -8, 7, 2, -10, -2, -14, -9, 9, -8, -9, -3, -8, 9, -5, 2, 0, -14, 0, -11, 3, 6, 7, 7, 0, -11, -5, 6, -3, -3, -7, -7, 1, -12, 0, 8, -1, -10, -4, 11, 3, 4, -9, -13, 8, -3, 1, -12, 7, -5, 9, -2, -12, 0, 5, 2, -2, -10, 0, 6, 9, -4, -9, 4, -2, -13, -4, 0, 3, -11, -9, 2, -1, -13, -14, -7, 7, -5, 10, -12, 8, 1, -10, 8, -14, -5, 7, -4, -5, -3, -7, 6, -5, 
  7, -14, 52, 23, 11, -3, -57, -13, 29, 33, -12, 45, 22, 22, 14, 9, 50, 50, 16, -11, -43, -36, 23, -30, -43, 41, 11, -21, 33, -9, 52, 47, 30, -24, -33, -36, -6, -62, 18, -47, 62, -12, 53, 49, -62, -4, 23, 33, 20, -7, 36, 60, 94, -2, -20, 62, 15, -9, -64, 4, 26, 19, 31, 47, 1, 2, 67, 14, -2, 4, 39, -3, 34, 5, 29, 38, 25, 53, 62, -10, -62, 28, -14, 62, 29, 21, -43, 80, -16, 21, 5, 24, 4, -17, 21, -62, 19, -31, -30, 10, 27, 50, 
  -45, 9, 46, 6, -59, 21, -24, -22, 21, -48, -55, 2, 41, 23, 6, -21, -50, -14, -65, 17, -39, -8, -12, -10, 10, 14, 20, -49, -23, -3, 36, -18, 7, -32, -24, -17, 25, -56, -78, -34, -1, -22, 39, 33, -7, 2, -25, 1, 12, -44, 16, -33, -21, 10, 19, 3, -24, 22, -33, -57, -20, 19, 43, 5, -7, 28, 39, 10, -15, 13, 55, -27, -5, 25, -29, -41, 34, -13, 20, -33, -43, -47, -25, 2, -17, -25, -38, 1, -39, -19, -49, 18, 36, -43, 19, -54, -8, -36, -49, -8, -29, 42, 
  -44, 37, 22, -28, -29, -12, 16, -42, -32, -33, -18, 3, -1, -10, -5, -19, -37, -15, -30, 15, -12, -1, -9, -18, 22, -5, 4, 2, -37, 11, 35, -10, -26, -3, 17, 30, -23, 48, -44, 6, -43, 7, -13, -54, 51, 22, -1, 8, -44, -23, -8, -68, -59, 23, -13, 8, -27, -2, 4, -27, -4, -19, -27, -56, 4, -21, -31, -23, 4, -20, -13, -30, -20, 37, -31, -47, 10, -51, -31, 27, 51, -19, 2, -28, -14, 12, 39, -21, 9, 2, 1, -21, 42, 9, 25, 44, 30, 9, 24, -41, 3, -33, 
  39, 3, -9, -2, 58, -10, 17, -5, -30, 44, 30, 11, -47, -16, 8, 14, 55, 47, 61, -9, 16, -10, 33, -5, -2, 4, 18, 51, 27, -9, -7, 31, -9, 32, 26, 8, -10, 65, 72, 28, 5, 11, -38, -30, 20, 9, 55, 4, -11, 35, -7, 51, 59, 15, -20, 19, 18, -36, 8, 52, 30, -3, -30, -17, -5, -14, -22, -19, 20, -14, -33, 24, 11, -11, 29, 28, -16, 8, -15, 28, 65, 42, 21, 1, 31, 38, 49, 14, 20, 14, 58, -12, 3, 26, -5, 76, 33, 41, 42, 8, 46, -11, 
  -46, 32, 37, -39, -68, -27, -23, -28, -35, -48, -35, 19, 19, -11, 3, -49, -31, -20, -49, 26, -37, -28, -1, -39, 8, 2, 17, -1, -59, -1, 33, -23, -31, -29, -8, 4, -37, 12, -71, -14, -33, -25, 31, 14, 22, 12, -4, 10, -41, -36, -11, -48, -29, 24, -16, 21, -46, -4, -23, -34, -10, -22, -19, -58, -5, -36, 13, -28, 7, -14, 13, -31, -9, 32, -32, -56, 20, -48, -28, -12, 16, -50, -3, -7, -8, -2, -5, -19, -16, -11, -23, -23, 39, -12, 28, -4, 2, -11, -31, -55, -7, -37, 
  43, -31, -6, 12, 37, -13, -41, 38, 45, 50, 24, 21, -3, 0, 4, 46, 62, 37, 33, -12, 6, 14, 15, 42, -41, 0, 9, 5, 40, -9, -9, 36, 23, 0, -13, -20, 23, -25, 62, 17, 40, -5, 21, 53, -89, -3, 22, -18, 49, 25, 23, 63, 45, -4, -6, 5, 52, -6, -19, 53, 28, 8, 8, 55, 2, 14, 59, 31, 6, 5, 3, 41, 24, -7, 20, 67, -18, 47, 25, 0, -66, 39, 6, 40, 13, 10, 2, 25, 0, 9, 27, 38, -29, -9, -15, -34, -6, 0, 21, 59, 0, 41, 
  -8, -4, 12, -6, -1, -2, 9, 9, -9, -13, -10, -3, -1, -1, -9, 8, 0, -6, -6, 6, -12, 5, 4, 7, 8, 5, -13, -10, 4, 9, -9, 3, -13, -10, -6, -3, -3, 4, -3, -14, -16, 9, 2, -6, -10, -12, -10, -7, 5, 2, -11, -7, -7, 0, -5, -9, -6, -12, -3, 2, -8, -9, -7, -12, -2, 10, 10, -5, -3, -1, 1, 8, 0, -1, -8, 3, -10, -9, 2, 8, 3, -10, 9, -11, 5, 3, -10, 3, -7, 7, -10, 9, 7, 5, -13, -3, -6, -2, -7, 6, 0, -5, 
  42, 2, -30, 20, 60, -11, 15, 17, -12, 64, 48, 16, -37, -19, 5, 27, 59, 53, 53, -25, 1, -13, 12, 2, -11, 8, 5, 54, 38, -1, -19, 21, 11, 36, 28, -9, -12, 51, 81, 28, 30, 21, -26, -16, -25, -15, 53, 4, 1, 49, 3, 65, 40, -3, -32, 27, 50, -36, 12, 50, 23, -1, -25, 17, -3, -4, 15, -4, 2, -11, -23, 22, 10, -13, 43, 55, -4, 29, 0, 26, 25, 60, 6, 18, 47, 18, 43, 20, 43, 6, 72, -12, -26, 38, -4, 62, 9, 35, 44, 23, 24, -10, 
  -37, 46, 30, -24, -37, -18, -5, -48, -49, -52, -20, -1, 14, -8, 16, -48, -50, -29, -40, 12, -10, -5, 12, -35, 14, 18, 12, 3, -39, 1, 42, -5, -18, -17, -11, 17, -5, 17, -57, -11, -25, -14, 11, -10, 44, 20, -22, 11, -44, -45, -18, -51, -16, 27, -2, 11, -35, 4, -5, -26, -15, -10, -23, -49, 1, -22, -12, -37, 18, 1, 24, -22, -1, 31, -22, -56, 33, -58, -16, 9, 16, -26, 1, -29, -5, -7, 17, -13, -11, -2, -1, -25, 66, 4, 9, 6, 25, -3, -16, -38, 1, -15, 
  42, -30, -50, 21, 2, 34, 29, 28, 47, -11, 6, -48, 16, 29, -10, 31, -28, -28, 4, 28, 45, 58, -33, 23, 18, -56, -9, -12, 43, -10, -47, -36, 21, 36, 18, -2, 31, -35, 17, 11, -25, 11, 7, 13, 8, 9, -23, -22, 47, 26, 9, -17, -100, -30, 35, -44, 39, 34, 51, 11, -44, 19, 27, 43, 3, 17, -20, 46, -14, 27, 5, 21, -9, -9, -14, 20, -27, 14, 18, -18, -1, -23, -16, -16, -38, -27, 4, -48, 20, -18, -54, 31, -49, 17, -26, -22, -66, 7, 34, 17, -50, 24, 
  2, 11, -59, -8, -9, 41, 57, 26, 16, -30, -5, -33, -3, 31, -27, 22, -52, -37, -11, 27, 50, 52, -28, 40, 52, -48, 16, 2, -20, -1, -54, -43, 14, 32, 43, 34, 16, 30, -1, 33, -64, 24, -30, -31, 62, 30, -12, -10, 38, 9, -21, -58, -95, -13, 34, -73, 8, 50, 58, -5, -37, 8, 4, -6, -9, 24, -49, 4, -11, 27, -15, 14, -29, 3, -21, -22, -23, -22, -20, 18, 38, -26, -14, -54, -37, -21, 17, -62, 27, -15, -21, 24, -6, 14, -22, 35, -23, -2, 48, 23, -36, -3, 
  36, -9, -39, 10, 15, 21, 74, 17, 29, -14, 9, -31, -2, 9, -25, 37, -29, -30, 4, 22, 66, 50, -27, 39, 45, -44, -1, 5, 14, 4, -53, -52, 17, 36, 50, 31, 12, 36, 14, 30, -56, 34, -23, -23, 40, 30, -20, -17, 41, 16, -17, -39, -100, -17, 31, -46, 31, 41, 68, 6, -31, 2, 2, 2, -9, 22, -50, 24, -3, 31, -16, 22, -32, -17, -29, 1, -24, -9, -20, 24, 45, -7, 0, -40, -21, -32, 40, -60, 35, -14, -9, 18, -20, 16, -12, 30, -39, 11, 48, 27, -23, 4, 
  41, 7, -15, 2, 59, -12, -20, 2, -12, 49, 24, 22, -33, -20, 9, 18, 47, 52, 50, -21, 0, -16, 16, -2, -36, 12, 18, 41, 29, 10, -4, 33, 9, 29, 7, -16, -15, 33, 68, 20, 18, -5, -32, 1, -36, -11, 40, 17, -4, 38, 14, 59, 55, -2, -35, 27, 36, -34, -7, 53, 32, -1, -17, 30, 5, -3, 11, 10, 1, -29, -23, 19, 13, 4, 25, 31, -7, 43, -9, 16, 21, 57, 10, 26, 31, 12, 23, 21, 28, 18, 60, -12, -21, 29, -6, 49, 2, 16, 30, 26, 32, -12, 
  30, -30, -21, 29, 27, 6, -15, 36, 48, 46, 6, 17, 4, 14, 3, 47, 46, 35, 30, -26, 15, 2, -1, 48, -34, 18, 17, -17, 35, 3, -17, 30, 29, -4, -22, -17, 16, -39, 39, 7, 30, -13, 23, 65, -70, 11, 14, 3, 61, 35, 34, 54, 52, -3, 7, 9, 42, 6, -11, 45, 13, 10, 30, 71, 3, 27, 42, 20, 12, 15, 14, 34, 27, -16, 10, 61, -13, 69, 43, -14, -46, 48, 11, 34, 22, -9, -10, 44, -2, 14, 4, 34, -40, -18, -22, -36, -8, -1, -10, 36, -2, 50, 
  -22, 45, 42, -21, -2, -31, -12, -43, -54, 10, 11, 30, -9, -14, 22, -28, 28, 18, -2, 3, -39, -33, 47, -32, 3, 54, -3, 59, -16, 2, 49, 48, -21, -25, -3, 10, -22, 79, 19, -7, 13, 5, -13, -32, 33, 10, 33, 32, -38, 7, -1, 16, 108, 50, -25, 52, -33, -31, -23, 10, 40, -22, -26, -47, -8, -19, 3, -18, 21, -31, -10, -16, 29, 29, 7, -37, 25, -29, -24, 28, 32, 25, -1, 21, 60, 53, 43, 44, 1, 45, 60, -39, 52, 23, 26, 77, 59, 32, 5, -21, 58, -32, 
  24, 6, -56, -9, 9, 42, 64, 20, 26, -19, 6, -45, -1, 24, -25, 29, -36, -46, -3, 28, 55, 51, -8, 44, 38, -52, 0, 6, -6, 2, -37, -48, 2, 26, 27, 26, 23, 27, 4, 41, -53, 31, -29, -19, 32, 36, -15, -22, 23, 11, -17, -34, -109, -9, 35, -54, 20, 28, 45, 7, -31, 13, -4, 9, -6, 35, -44, 16, -2, 19, -30, 11, -34, -7, -15, -13, -33, -9, -31, 10, 54, -13, -3, -33, -27, -23, 32, -69, 26, -14, -23, 34, -32, 3, -17, 27, -22, 10, 35, 16, -33, 9, 
  -39, 34, 33, -17, -45, -7, 10, -44, -56, -57, -3, 17, -12, -13, 3, -37, -37, -22, -42, 25, 5, -1, 10, -35, 36, 10, -7, 8, -34, 1, 29, -6, -44, -4, 7, 36, -26, 45, -44, 11, -38, 12, -9, -53, 44, 7, -12, 4, -27, -30, -11, -60, -39, 33, -9, 9, -47, -1, -4, -35, 1, -12, -22, -55, 5, -14, -27, -26, 16, 2, -4, -13, -20, 39, -40, -49, 30, -66, -24, 22, 48, -49, 1, -37, 4, 12, 25, -27, -12, 1, 9, -30, 62, 1, 24, 34, 32, 17, 3, -23, 9, -33, 
  -54, 37, 50, -3, -46, -17, -32, -34, -50, -32, -20, 37, 17, -12, 33, -27, 4, 7, -43, -2, -56, -45, 42, -50, -5, 36, -2, 16, -34, 5, 49, 32, -36, -27, -14, 2, -29, 17, -57, -25, 23, -12, 7, -5, 19, -6, 15, 38, -34, -28, 12, -13, 89, 46, -19, 45, -47, -19, -57, -17, 27, -8, -14, -37, -9, -21, 32, -32, 14, -14, 8, -31, 31, 38, 0, -58, 41, -35, 0, 0, 1, 3, 8, 31, 33, 41, 11, 47, -13, 22, 46, -35, 43, -19, 32, -1, 65, -5, -36, -31, 56, -16, 
  2, -3, -8, -3, 8, -10, -11, -9, -11, 9, 4, -6, 4, -8, 0, 3, 4, 5, -4, 3, -11, -8, -6, -6, 5, -9, -7, 2, -10, 7, -10, -10, -6, 5, 4, -13, -10, -6, -3, 4, 2, -10, -4, 4, 0, 1, -6, 1, -10, -6, -1, -5, 6, -9, 10, -10, 7, 9, 2, -1, -7, 0, 7, -14, 5, 9, -6, -9, -10, 4, 8, 4, -1, 7, -3, -13, 2, 5, -2, 7, 9, 7, -13, 9, 1, -4, 4, -12, -4, -10, 4, 10, 9, -3, 3, 9, -11, 10, -5, 6, -7, -11, 
  22, -8, -37, 2, -7, 43, 68, 34, 26, -26, 17, -32, -13, 24, -11, 37, -33, -31, 4, 17, 51, 60, -24, 45, 50, -51, -1, 0, -2, 10, -43, -38, 2, 47, 29, 34, 22, 40, 16, 31, -45, 19, -38, -29, 27, 38, -9, -20, 32, 9, -19, -46, -117, -6, 47, -46, 25, 36, 64, -1, -18, 4, -8, 6, 9, 18, -49, 15, -7, 42, -12, 32, -18, -7, -11, 1, -40, -24, -40, 23, 47, -20, -1, -42, -25, -22, 24, -68, 28, -24, -18, 32, -31, 11, -32, 33, -42, 22, 36, 26, -20, -14, 
  23, 26, -32, -2, 46, -20, 43, -7, -44, 33, 26, -23, -33, -6, -6, 1, 46, 12, 36, -2, 7, 2, 32, -8, 21, -10, 2, 57, 8, 7, -46, 3, -27, 34, 25, 22, -24, 78, 68, 48, -24, 27, -48, -61, 42, 22, 44, -1, -28, 47, -12, 19, -15, 11, -29, -6, -7, -17, 40, 59, 29, -7, -45, -44, -4, -9, -31, -24, 26, -7, -56, 15, 5, -12, 13, 16, -14, -15, -42, 50, 62, 45, 9, -10, 28, 23, 49, -15, 40, 5, 70, -33, 22, 41, -10, 78, 18, 62, 44, 4, 39, -36, 
  7, -7, -50, 6, -26, 38, 36, 33, 39, -36, 3, -31, 18, 26, -10, 25, -48, -55, -16, 39, 48, 58, -28, 33, 32, -37, 6, -28, -4, -2, -56, -35, 20, 13, -2, 13, 27, -47, -17, 4, -26, 2, 14, 23, 20, 17, -12, -27, 33, 1, 10, -35, -81, -26, 44, -64, 16, 38, 56, -14, -21, 8, 37, 12, 0, 22, -7, 33, 5, 20, 24, 9, -12, 1, -24, -5, -25, -15, -11, -7, 8, -23, -20, -29, -23, -37, -2, -47, 8, -31, -38, 39, -9, -8, -19, -19, -20, -8, 18, 11, -41, 22, 
  -11, -44, 29, 34, -3, -5, -30, 18, 40, 29, -12, 20, 41, 16, 25, 28, 32, 37, 18, 13, -2, -1, -2, 28, -9, 2, 6, -29, 17, -4, 36, 25, 49, 0, -24, -27, 22, -46, -27, -27, 58, -13, 51, 78, -41, -7, -50, -2, 39, -26, 28, 38, 101, -53, 3, 44, 29, 13, -28, -8, -15, 26, 59, 50, -3, 26, 39, 7, -48, 3, 39, -4, -26, 15, 33, 48, 25, 52, 74, -48, -53, -8, 17, 58, 3, -6, -72, 59, -12, 10, -41, 17, -59, -36, -4, -54, -46, -68, -61, 33, 0, 44, 
  16, 12, 21, 15, 35, -25, -14, -12, -27, 26, 18, 38, -30, -7, 25, 12, 55, 62, 36, -20, -17, -37, 31, -27, -34, 24, 10, 42, 16, 5, 21, 25, -2, 19, -5, -12, -10, 40, 50, 11, 35, -9, -32, -21, -12, -7, 40, 20, -25, 22, 17, 37, 81, 30, -19, 61, 14, -39, -23, 24, 19, -6, -18, -9, -6, -23, 19, -23, 25, -16, -27, 4, 12, -12, 33, 22, 3, 14, -14, 26, 27, 38, 3, 23, 52, 20, 24, 32, 12, 24, 54, -24, 8, 20, 13, 41, 36, 34, 20, -6, 35, -11, 
  63, -36, -24, 18, 63, 11, 36, 43, 48, 48, 57, -9, -1, 10, -14, 32, 37, 15, 58, 17, 55, 39, 9, 43, -2, -25, 13, 7, 60, -11, -21, -2, 28, 42, 30, -17, 7, 14, 90, 36, 0, 32, -8, 19, -16, 15, 27, -20, 31, 45, -3, 62, -38, -33, 17, -9, 40, 11, 38, 56, -1, 15, 16, 37, 9, 19, -8, 51, -14, 11, -10, 27, -1, -25, 22, 68, -26, 44, 13, 3, 11, 72, 7, 0, -14, 4, 19, -15, 35, 1, 27, 19, -58, 16, -25, 17, -43, 27, 46, 39, -15, 14, 
  37, -21, -7, 21, 36, 9, -20, 42, 49, 51, 3, 15, 17, 21, 17, 41, 33, 20, 33, -21, -16, -9, 7, 28, -34, 8, 19, -18, 48, -2, -33, 32, 29, 4, -10, -28, 15, -58, 33, 3, 44, -12, 31, 44, -77, -8, 10, -9, 48, 16, 35, 52, 64, -12, 3, 7, 40, 0, -26, 19, 31, 25, 40, 65, 12, 27, 46, 24, 18, 6, 17, 19, 44, 2, 11, 48, -16, 52, 46, -14, -66, 29, -2, 40, 12, -7, -4, 50, -11, 19, 9, 23, -22, -22, -26, -45, 0, -23, -13, 50, -8, 40, 
  33, 3, 15, 29, 40, -24, -30, 18, 19, 26, 7, 31, 5, -1, 17, 24, 51, 30, 34, -36, -37, -22, 11, -16, -35, 22, 11, 10, 25, 8, 11, 39, 24, -7, -8, -31, 19, -19, 30, -8, 48, -15, 17, 47, -62, -15, 13, 19, 0, 18, 27, 45, 71, 1, -30, 36, 35, -32, -35, 36, 33, 10, 15, 41, -2, 2, 61, 18, 13, 1, 22, 26, 24, -12, 21, 32, -3, 62, 25, -20, -55, 41, -2, 43, 16, 7, -19, 45, -2, 24, 12, 3, -10, 2, 6, -16, -4, -16, -6, 27, 18, 24, 
  -53, 40, 51, -16, -70, -7, -7, -29, -50, -48, -35, 28, 6, 7, 15, -21, -6, 6, -52, 2, -50, -17, 22, -25, -1, 28, -5, 15, -39, -1, 39, 1, -15, -27, 0, 4, -17, 25, -67, -25, 13, -10, 6, -15, 26, 6, 10, 28, -50, -46, 4, -50, 50, 36, -21, 22, -37, -13, -24, -39, 36, -21, -16, -54, 8, -28, 15, -31, 26, -6, 13, -28, 17, 46, -21, -59, 22, -43, -22, 16, 7, -39, 12, 7, 17, 36, 17, 16, -14, 15, 24, -33, 62, -7, 33, 20, 59, 13, -36, -38, 45, -28, 
  36, -15, -26, -1, 73, -1, 43, 27, 30, 45, 46, 0, -24, -16, -9, 45, 40, 32, 62, -10, 53, 16, 20, 39, 3, -12, 3, 44, 40, 5, -28, 4, 21, 33, 29, 19, 7, 37, 68, 45, 8, 33, -33, -15, -6, 11, 29, -1, 40, 52, 2, 55, -16, 3, -8, -10, 36, 0, 53, 54, -3, 4, -11, 40, 3, -3, -9, 20, -3, 5, -35, 43, 11, -12, 38, 65, -14, 40, -19, 23, 44, 43, 24, 4, 6, 12, 34, -9, 52, 16, 61, 18, -19, 43, -5, 59, -13, 42, 44, 57, 22, -9, 
  59, -25, -34, 24, 65, 23, 21, 38, 53, 52, 51, 5, -3, 13, -13, 51, 41, 29, 77, 2, 51, 33, -12, 40, -3, -22, -1, 22, 54, 3, -29, 7, 34, 44, 31, -13, 21, -4, 75, 25, 11, 23, -11, 17, -22, -3, 28, -17, 48, 45, 10, 59, -21, -22, 19, -17, 39, 22, 48, 38, -12, 23, 25, 67, -10, 20, 14, 42, -3, 27, 3, 29, -2, -22, 28, 71, -16, 45, 3, -8, 13, 63, 8, 0, 11, -6, 4, -13, 34, 5, 23, 32, -59, 14, -19, 16, -39, 19, 54, 37, -12, 17, 
  -35, -6, 36, 8, -36, 20, -7, 19, 48, -61, -32, 11, 60, 39, -2, -6, -69, -20, -40, 13, -2, 17, -49, 24, -2, 11, 0, -50, -34, 10, 22, -8, 10, -37, -26, -3, 35, -75, -77, -20, 7, -19, 61, 53, -17, 19, -38, -39, 21, -32, 12, -29, -18, -17, 26, 19, -6, 40, -13, -43, 5, 16, 38, 49, 2, 29, 48, 8, -8, 31, 47, -9, 7, 20, -23, -10, 23, 15, 51, -34, -60, -35, 2, 15, -82, -55, -59, 1, -23, -40, -64, 50, 2, -45, 18, -74, -7, -35, -39, -3, -53, 29, 
  -3, -29, -34, 12, -28, 16, 3, 34, 44, -22, -20, -28, 39, 33, -31, 25, -24, -33, -26, 14, 25, 37, -36, 32, 13, -22, 3, -57, -4, -9, -38, -46, 32, 6, -19, -10, 35, -81, -36, -6, -32, -3, 45, 48, -16, 4, -47, -31, 32, -17, 9, -11, -72, -32, 35, -34, 13, 32, 19, -36, -31, 28, 42, 36, 9, 16, 32, 39, -15, 14, 45, -5, 2, 8, -2, 2, 5, 11, 32, -22, -43, -34, -4, -10, -57, -52, -42, -29, -5, -37, -59, 25, -34, -31, -19, -61, -34, -36, -15, 28, -54, 24, 
  -69, 34, 55, 3, -80, -27, -79, -48, -46, -34, -59, 26, 16, -6, 32, -31, 25, 7, -37, 14, -56, -51, 26, -49, -4, 48, 11, -1, -45, -9, 42, 22, -17, -40, -50, -15, -31, -38, -74, -40, 40, -33, 37, 35, -7, -14, 8, 34, -34, -62, 13, 13, 122, 22, -31, 39, -38, -29, -71, -41, 42, 1, 12, -32, -1, -34, 49, -34, 10, -21, 39, -37, 23, 31, -8, -65, 43, -16, 33, -14, -45, -37, 9, 38, 32, 22, -25, 57, -41, 24, -11, -32, 51, -29, 38, -61, 60, -51, -67, -39, 24, 13, 
  57, -18, -41, 3, 22, 33, 44, 31, 40, 2, 36, -39, 10, 17, -24, 28, -24, -23, 12, 15, 48, 53, -29, 33, 21, -33, 5, -8, 57, 11, -34, -36, 31, 44, 37, -12, 32, 6, 63, 26, -41, 29, -17, -5, -6, 4, -13, -41, 27, 33, 5, -5, -127, -33, 27, -57, 48, 40, 55, 31, -39, 16, 15, 26, -8, 26, -36, 49, -15, 36, 2, 34, -36, -23, -3, 53, -28, 10, -2, -5, 46, -16, -12, -8, -41, -35, 21, -68, 38, -26, -20, 26, -53, 22, -13, 22, -52, 17, 43, 34, -36, 13, 
  -31, -3, 23, 10, -40, 27, -21, 15, 24, -41, -35, 21, 47, 21, -17, 3, -50, -16, -46, 24, -5, 13, -48, 8, 16, -12, 19, -43, -21, 1, 43, -25, 7, -30, -24, 0, 30, -80, -61, -22, -22, -25, 56, 38, -10, 14, -26, -29, 29, -37, 16, -38, -54, -35, 36, 10, -2, 18, -2, -39, -6, 20, 31, 29, -4, 30, 44, 18, -1, 32, 43, -21, -5, 34, -7, -9, 31, 9, 19, -46, -47, -44, -8, -21, -65, -65, -36, -31, -11, -34, -48, 36, 12, -21, 0, -58, -16, -33, -48, 15, -60, 34, 
  31, -6, 3, 30, 27, -1, -35, 26, 37, 32, 16, 23, -12, 0, 7, 30, 38, 49, 17, -26, -20, -15, 14, 20, -48, 6, -8, 5, 40, 6, -17, 30, 12, 14, -27, -28, 6, -27, 47, 11, 42, -19, 11, 38, -80, 3, 31, -10, 35, 32, 19, 47, 77, 4, -24, 15, 42, -28, -33, 35, 17, 4, 27, 31, -4, 20, 41, 5, 14, 7, 9, 40, 25, -3, 18, 34, -6, 52, 28, 10, -53, 35, -1, 29, 32, -7, 4, 44, 0, 15, 39, 9, -4, -21, -6, -33, 8, 4, 8, 35, 15, 32, 
  33, -1, 0, 8, 43, -19, -29, 18, -4, 44, 29, 19, -14, -14, 10, 9, 65, 45, 33, -37, -31, -45, 13, 3, -35, 13, 6, 25, 23, 11, 8, 38, 21, 8, -15, -20, -5, 7, 61, -1, 40, -21, -22, 1, -60, -14, 32, 7, -5, 41, 33, 48, 61, 11, -21, 50, 35, -42, -31, 29, 31, 0, -12, 36, -3, 2, 30, 6, 23, -20, -20, 29, 21, -11, 23, 35, 0, 39, 19, 9, -38, 31, 4, 17, 45, 9, 15, 44, 12, 22, 45, -20, -10, -2, 7, 10, 15, 14, 21, 29, 27, 6, 
  -20, 3, 52, 4, 0, -32, -59, -32, -36, 26, -16, 39, 9, 5, 23, -19, 44, 52, 1, -20, -71, -60, 14, -37, -47, 66, 15, -5, -8, -3, 50, 61, -12, -28, -40, -21, -27, -35, -9, -23, 62, -13, 30, 25, -26, -20, 17, 24, -23, -6, 36, 54, 112, 19, -31, 49, -14, -34, -70, 13, 40, 6, 3, -5, -3, -20, 45, -11, 22, -20, 26, -28, 21, 19, 30, -3, 33, 24, 41, -14, -57, 20, -2, 47, 40, 28, -18, 79, -27, 39, 13, -17, 36, -7, 26, -51, 44, -4, -49, -20, 21, 8, 
  -11, 18, 53, 5, -1, -27, -18, -32, -39, 32, 13, 46, -16, -24, 36, -25, 50, 28, 15, -11, -38, -34, 35, -23, -7, 42, -3, 49, -12, 3, 57, 46, -21, -8, -9, -1, -17, 50, 29, 2, 24, -11, -5, -30, 2, 6, 33, 22, -33, -7, -1, 23, 104, 42, -29, 63, -31, -37, -38, 19, 38, -11, -28, -23, 0, -12, 15, -14, 28, -14, -3, -24, 19, 11, 9, -19, 27, -8, -14, 21, 8, 25, 1, 19, 50, 50, 21, 55, -2, 36, 45, -23, 41, 13, 37, 50, 50, 27, 11, -26, 38, -24, 
  41, -50, -57, 31, 29, 3, -4, 41, 59, 44, 12, -15, 32, 25, 5, 28, 53, 11, 31, -2, 21, 11, -4, 35, -18, 11, -3, -1, 41, 3, -26, 10, 31, 13, 3, -20, 29, -47, 24, 8, 45, -17, 26, 50, -57, -6, 4, -8, 39, 21, 37, 24, 43, -34, 4, -16, 35, 11, 0, 37, 6, 32, 26, 72, -4, 19, 40, 33, -42, 29, 35, 15, -2, -16, 0, 69, -22, 55, 30, -15, -50, 26, 14, 35, 12, -4, -38, 33, -15, 7, 1, 34, -74, -19, -20, -28, -41, -3, -27, 34, -19, 41, 
  51, -45, -37, 23, 33, 7, -20, 49, 39, 47, 30, -12, 17, 25, -7, 33, 27, 18, 34, 7, 15, 30, -3, 41, -15, -4, -4, -1, 39, -1, -21, 1, 35, 1, -16, -32, 20, -53, 47, 24, 13, -15, 26, 62, -72, 11, 13, -11, 39, 37, 19, 49, 11, -24, 1, -12, 36, 4, 10, 23, -4, 28, 44, 56, -9, 22, 37, 41, -4, 30, 23, 39, 23, -10, 11, 64, -23, 32, 29, 1, -53, 40, 11, 19, 4, 3, -17, 24, -10, 1, 13, 39, -48, 3, -18, -33, -23, -1, 10, 47, -7, 20, 
  41, -13, -55, 7, 13, 38, 74, 40, 43, -27, 33, -39, -4, 7, -18, 31, -37, -43, 4, 18, 69, 73, -28, 51, 45, -50, 5, 0, 28, 11, -38, -39, 15, 37, 50, 41, 16, 36, 32, 45, -56, 28, -31, -17, 33, 36, -7, -31, 47, 29, -29, -48, -114, -25, 53, -59, 35, 34, 62, 13, -36, 14, 9, 24, 11, 26, -54, 21, -14, 28, -27, 39, -28, -20, -21, 12, -43, -7, -41, 17, 59, -4, -7, -50, -27, -24, 34, -59, 48, -26, -4, 22, -17, 13, -32, 45, -34, 30, 68, 30, -25, -7, 
  -54, 22, 52, -24, -82, -25, -41, -37, -55, -46, -45, 29, 44, -1, 26, -56, -20, 7, -65, 23, -50, -33, 4, -42, 4, -3, 5, -31, -55, 8, 46, -30, -33, -45, -39, -25, -30, -40, -75, -60, -4, -30, 45, 38, 10, -21, -9, 24, -41, -68, 6, -54, 35, 14, -24, 30, -41, 4, -50, -53, -5, -15, -4, -36, 10, -30, 25, -29, -6, -30, 34, -42, 14, 43, -29, -64, 32, -37, -5, -16, -45, -47, -11, -3, -3, 12, -46, 5, -37, 6, -34, -7, 48, -38, 22, -47, -12, -46, -57, -50, 14, -27, 
  -9, 5, -7, -10, -9, -10, -7, -3, 1, 8, 8, -1, -5, 6, 6, -10, 9, -8, 0, -1, -11, -1, -11, -7, -13, -2, -3, 5, -11, -11, -13, 0, -10, -12, -2, 2, 1, -4, 3, -4, 0, -7, -11, -5, -7, -5, 4, -3, -1, -12, -5, 9, 10, -13, -4, -5, -5, -9, -7, -14, -11, -8, -6, -12, 2, 4, -13, 4, -13, 9, 1, -5, 5, -12, -1, -6, -2, -2, -1, 3, -10, 8, -2, 9, 6, 5, 1, 5, -3, 10, -4, -8, 4, -5, -4, 1, -12, 5, -14, -7, -9, -4, 
  9, 28, 40, -5, 19, -27, -10, -22, -39, 40, 9, 51, -17, -7, 15, 2, 46, 47, 41, -24, -29, -28, 38, -19, -29, 20, 2, 35, 4, -4, 44, 31, -1, -13, -2, -3, -14, 63, 43, 12, 28, 4, -23, -28, 1, -13, 35, 20, -35, 28, 17, 31, 90, 27, -21, 58, -10, -38, -23, 25, 36, 1, -13, -13, 4, -9, 19, -9, 28, -24, -29, 1, 18, 3, 29, 17, 23, 14, -8, 27, 26, 22, 12, 18, 34, 36, 10, 38, 2, 24, 43, -32, 29, 21, 30, 61, 26, 35, 23, -12, 47, -21, 
  -64, 10, 32, 13, -85, 13, -49, -40, -23, -53, -47, 17, 47, 7, 19, -35, -42, -5, -58, 26, -50, -16, -23, -40, 13, 27, 8, -23, -49, -8, 44, -11, -3, -54, -34, -18, 0, -60, -95, -45, -2, -26, 55, 41, -12, 10, -47, -4, -10, -79, 11, -39, 3, 8, 12, 29, -31, 23, -41, -48, 6, 15, 28, -24, 9, -7, 27, 8, 14, 6, 34, -45, -1, 48, -18, -55, 22, -16, 37, -27, -56, -51, -7, 11, -22, -6, -38, 18, -56, -16, -55, 30, 31, -45, 18, -64, 16, -43, -62, -37, -4, 37, 
  28, -37, -35, 10, -12, 29, 9, 26, 39, -3, -16, -37, 22, 13, -26, 26, -13, -19, -5, 22, 35, 43, -35, 39, 14, -45, 2, -48, 21, 3, -58, -22, 29, 7, -17, -27, 24, -74, -30, -7, -6, -6, 36, 49, -17, 16, -33, -33, 39, 13, 15, 7, -95, -53, 18, -51, 26, 41, 27, -28, -32, 30, 57, 40, 5, 28, 1, 29, -29, 26, 33, 28, -22, -22, 14, 36, -16, 16, 51, -21, -38, -29, -16, 5, -50, -60, -53, -33, 3, -29, -67, 33, -70, -12, -25, -78, -54, -33, -19, 30, -65, 17, 
  -18, 12, 60, -2, -3, -25, -53, -23, -46, 17, 0, 39, 6, -8, 32, -33, 42, 31, -4, 2, -58, -52, 37, -43, -32, 47, 10, 9, -8, -7, 39, 57, -13, -24, -37, -7, -20, 15, -1, -27, 51, -23, 20, 13, -15, -2, 15, 26, -28, -11, 11, 48, 104, 37, -26, 42, -26, -31, -53, 6, 40, 1, -10, -20, 11, -34, 36, -16, 19, -34, 10, -17, 25, 29, 25, -7, 36, 3, 27, 14, -25, 30, 19, 24, 47, 36, -2, 57, -20, 41, 34, -25, 38, -2, 32, 1, 43, 5, -19, -35, 48, 0, 
  -35, 8, 57, -6, -29, -35, -63, -17, -35, 15, -24, 38, 34, -11, 36, -17, 29, 25, -2, -1, -69, -65, 23, -50, -18, 46, 12, -4, -9, 0, 35, 57, 2, -28, -35, -36, -20, -19, -14, -24, 61, -25, 24, 29, -30, -25, 23, 31, -22, -16, 33, 40, 118, 25, -45, 54, -22, -21, -55, -5, 39, 4, 11, -8, 6, -32, 47, -21, 21, -15, 33, -25, 18, 27, 30, -6, 45, 17, 41, -16, -36, 5, 8, 46, 39, 29, -25, 76, -39, 33, 9, -13, 45, -8, 25, -29, 44, -28, -55, -35, 44, 17, 
  45, -17, -38, 9, 60, 10, 28, 40, 59, 59, 59, 10, -8, 13, -8, 37, 37, 32, 63, -2, 46, 30, 1, 39, -12, -20, -4, 24, 44, -5, -31, 15, 41, 41, 14, 1, 24, 15, 87, 38, 12, 11, -1, 6, -21, -6, 30, -3, 44, 44, 19, 61, 6, -20, 7, 6, 42, 13, 37, 47, -3, 11, -4, 52, 5, 28, 5, 37, 7, 24, -13, 33, 11, -26, 44, 60, -7, 57, 1, -11, 0, 60, 24, 14, 1, -7, 18, 12, 48, 11, 27, 26, -45, 13, -13, 23, -27, 16, 32, 49, 13, 11, 
  48, -1, -27, 6, 65, 12, 52, 39, 55, 47, 52, -3, -17, 1, -9, 50, 35, 10, 73, 10, 42, 41, 14, 59, -2, -29, 5, 27, 38, 5, -20, -5, 36, 38, 32, 3, 21, 38, 74, 28, 0, 27, -13, -3, -13, 6, 36, 0, 50, 51, -6, 47, -39, -17, 30, -18, 58, 25, 53, 55, 5, 9, -8, 55, -5, 30, -23, 42, 6, 11, -13, 46, -4, -30, 20, 64, -13, 39, 1, 4, 46, 64, 9, -10, 8, 8, 31, -1, 49, 13, 41, 33, -44, 37, -22, 41, -28, 41, 53, 53, -1, 15, 
  -39, -18, 42, 23, -60, 19, -24, 10, 40, -50, -33, 18, 33, 29, 6, 11, -40, -10, -51, 16, -10, 7, -34, 11, -8, 15, -2, -41, -34, -7, 41, -28, 21, -41, -25, -24, 21, -75, -79, -31, -7, -21, 44, 42, -33, 21, -44, -34, 26, -54, 32, -16, -5, -25, 23, 27, -5, 15, -45, -60, -12, 18, 36, 29, 8, 22, 48, 7, -5, 21, 51, -19, 9, 38, -24, -28, 42, 7, 44, -36, -61, -50, 5, 20, -42, -51, -61, -7, -48, -33, -60, 34, 20, -45, 25, -86, -8, -33, -40, 16, -70, 41, 
  -56, 30, 37, -14, -66, -2, -24, -47, -32, -56, -34, 21, 17, 4, 20, -48, -25, -15, -75, 12, -30, -25, 12, -40, 22, 35, -2, -1, -65, 2, 50, -9, -26, -24, -7, 8, 1, 15, -64, -14, -18, 1, 22, -7, 20, 2, -20, 24, -35, -49, 0, -66, 7, 46, -16, 26, -42, -16, -24, -54, 10, -9, -4, -60, -9, -16, 10, -43, 27, 1, 18, -34, -1, 43, -23, -77, 32, -47, -3, 9, 8, -62, -4, -16, 14, 15, 19, 1, -30, -8, -18, -13, 54, -20, 15, -7, 40, -3, -28, -33, 20, -19, 
  20, -32, -55, 18, 3, 28, 14, 41, 43, -4, -10, -39, 30, 30, -22, 37, -32, -30, -1, 11, 37, 43, -44, 40, 18, -48, 10, -45, 28, 5, -59, -33, 36, 24, -16, -9, 24, -72, -1, 10, -6, 3, 18, 36, -16, 8, -40, -24, 41, -7, 6, -4, -100, -42, 34, -59, 33, 33, 17, -3, -35, 20, 46, 40, -1, 29, 14, 44, -29, 14, 29, 27, -24, -13, -3, 34, -26, 29, 58, -38, -49, -38, -4, 5, -40, -49, -46, -28, -4, -15, -75, 30, -63, -36, -13, -65, -63, -38, -8, 19, -58, 33, 
  -58, 28, 44, -6, -52, -21, -13, -40, -51, -49, -27, 17, 19, 3, 13, -42, -21, -10, -60, 9, -43, -29, 2, -28, 5, 32, 7, -2, -49, 7, 46, 1, -15, -26, -12, 9, -31, 41, -64, -11, 3, -10, 9, -4, 21, -1, 2, 26, -46, -43, -3, -52, 35, 49, -14, 15, -34, 0, -20, -26, 17, -19, -13, -56, 8, -20, 9, -41, 34, -18, 15, -29, 6, 29, -13, -78, 28, -47, -30, 18, 22, -36, 14, 0, 20, 28, 11, 9, -10, 1, 6, -14, 48, -7, 17, 8, 49, -6, -16, -36, 32, -18, 
  -9, -9, -9, 2, 11, 8, 3, -9, 1, -9, 2, -12, -1, -10, 2, 1, 9, -11, -1, -7, 7, -9, -4, -3, 7, -8, -9, 5, -4, -12, -10, 0, -13, 6, 7, 3, -1, 13, -13, -10, -5, 5, -6, -11, -8, -10, -1, -6, 3, -2, 3, -7, -10, 10, -8, 0, -6, -2, 2, -5, 1, 11, 1, 10, -4, 5, -1, -7, 11, -4, -12, -5, 6, -3, 0, -13, -9, -6, -6, 6, -8, -9, 4, -5, -2, 2, 7, 2, 6, -7, -8, -6, -5, 6, 2, -6, 6, 5, 6, -14, 0, 8, 
  18, -16, -63, 11, 7, 27, 38, 37, 24, -15, 13, -43, 23, 28, -10, 23, -28, -43, -14, 26, 37, 61, -18, 43, 30, -39, -1, -21, 10, 0, -41, -29, 7, 36, 9, 9, 38, -24, 17, 33, -37, 23, -12, -3, 17, 30, -16, -20, 33, 19, -11, -27, -108, -34, 32, -50, 30, 36, 49, 6, -39, 21, 24, 16, -2, 27, -30, 33, -18, 21, 7, 24, -26, -9, -27, 15, -34, 0, -6, -10, 18, -18, -16, -14, -25, -18, 8, -51, 14, -23, -28, 24, -34, 0, -22, 4, -46, 9, 33, 30, -41, 7, 
  29, 10, 4, -5, 50, -16, 9, -2, -11, 48, 21, 20, -32, -19, 5, 11, 55, 57, 42, -7, -19, -22, 16, -19, -28, 22, 11, 38, 15, 9, 4, 20, -1, 22, 18, 8, -6, 55, 54, 27, 24, 17, -42, -30, -15, 5, 24, -1, -7, 28, 6, 49, 67, 0, -9, 35, 20, -21, -13, 37, 23, -2, -18, -10, -2, -10, 3, -5, 25, -14, -36, 8, 26, -14, 22, 31, -10, 22, -12, 21, 22, 41, 11, 6, 50, 20, 30, 23, 29, 11, 63, -19, 6, 30, 14, 65, 24, 20, 33, 8, 29, 2, 
  24, 5, -21, -3, 58, -10, -5, 21, -14, 52, 30, 18, -27, -19, 8, 10, 47, 49, 56, -24, 2, -21, 17, 8, -16, 11, 2, 35, 27, -4, -6, 11, 4, 32, 29, 1, -1, 36, 69, 37, 13, 14, -36, -19, -19, 5, 42, 10, -8, 33, 9, 35, 38, -9, -13, 28, 39, -17, 18, 45, 28, 6, -24, 27, -4, -16, 9, 3, 6, -21, -38, 24, 15, -13, 27, 37, -11, 31, 1, 4, 29, 47, 13, 20, 39, 26, 38, 4, 39, 21, 50, -20, -15, 20, 2, 56, -4, 18, 30, 13, 15, -12, 
  0, 33, -26, -17, -15, 15, 44, -21, -33, -25, 20, -18, -40, -2, -16, -8, -27, -44, -4, 30, 30, 17, 5, -12, 35, -22, -14, 24, -20, 11, -34, -25, -29, 14, 34, 30, -19, 49, 7, 27, -62, 11, -43, -73, 41, 19, -3, -6, -29, -2, -32, -48, -80, 12, -3, -55, -26, 8, 30, 1, -8, -8, -34, -64, 12, -23, -65, -15, 5, 8, -50, 12, -15, 1, -27, -46, -4, -56, -51, 49, 72, -25, 1, -61, -11, -3, 45, -46, 24, -2, 10, -32, 41, 25, 6, 42, 33, 37, 41, -21, -1, -41, 
  -1, -6, 4, -3, 6, 10, -8, -9, -5, 4, 1, -8, -3, 3, -6, -7, -5, -2, -11, 7, -4, 9, 4, 6, -4, -6, -6, -12, 8, 6, 5, -3, -6, -5, 13, 0, 7, -1, -11, 6, -6, 8, 3, 5, -4, -7, 7, -8, 3, 1, 0, 2, -8, 12, -11, -9, -9, 2, 13, 9, -1, 1, 1, -9, -2, -9, 5, 5, -6, 13, 5, 4, 4, 1, -3, 8, -4, -7, 0, -4, -6, -1, 2, -12, -2, 5, 5, -13, 5, 7, -6, 7, -5, -10, 4, -2, -5, -2, -7, 2, -3, -10, 
  38, -18, -29, 13, 61, 12, 1, 49, 42, 62, 28, 14, -8, -8, -13, 31, 58, 46, 59, -17, 19, 15, 1, 50, -23, -7, 5, 20, 56, -11, -11, 9, 46, 33, 9, -21, 9, -14, 72, 27, 12, 19, 7, 27, -49, 2, 20, -7, 59, 40, 21, 65, 48, -31, 14, 5, 37, 14, 0, 32, 18, 16, 8, 75, -8, 32, 23, 19, 11, 1, 1, 21, 23, -15, 41, 55, -11, 64, 12, -3, -20, 46, 16, 27, 23, -8, -7, 18, 37, 1, 34, 40, -58, 9, -7, -11, -32, 10, 27, 39, -2, 34, 
  59, -16, -29, 4, 53, 19, 3, 40, 52, 50, 41, -4, -9, 13, -9, 26, 53, 34, 66, 7, 34, 21, -7, 46, -14, -20, 12, 9, 49, -1, -31, 5, 22, 33, 12, -16, 5, -4, 57, 30, 25, 6, -7, 30, -19, 3, 19, -7, 49, 36, 20, 60, 8, -19, 4, 1, 38, 19, 27, 38, 13, 0, 7, 47, -1, 23, 27, 27, 3, 11, 4, 40, 13, -25, 45, 72, -1, 59, 22, -5, -20, 54, 14, 7, 6, 3, -5, 3, 27, 13, 27, 31, -52, 12, -12, 1, -15, 3, 28, 41, 0, 20, 
  26, -81, -35, 19, 42, 24, -15, 34, 67, 35, 13, 0, 33, 26, -18, 40, 31, 12, 50, 9, 15, 19, -13, 50, -17, -15, -3, -15, 55, -7, -36, 11, 39, -1, -19, -27, 26, -60, -3, 14, 38, -23, 36, 64, -48, 0, -33, -22, 59, 4, 23, 33, 45, -54, 5, -41, 36, 16, 7, 24, -2, 18, 52, 73, 8, 33, 11, 34, -67, 31, 31, 14, -35, -7, 3, 58, -21, 66, 66, -26, -60, 31, 4, 34, 5, -6, -78, 26, 1, -1, -25, 27, -84, -20, -11, -27, -44, -29, -50, 39, -22, 44, 
  -7, 0, -10, 2, -6, -10, 9, 5, -4, 6, -11, 5, 5, -6, -9, -10, 10, 2, 4, 3, 2, -5, 1, -10, -7, -6, -8, -6, -7, -3, 7, -7, -10, -2, 3, 2, 2, -8, 5, -9, -10, 9, -13, -4, -14, 11, -4, -13, -7, -3, -8, -7, 8, -4, 6, 7, -8, -9, -6, 0, -7, 1, 6, -6, 1, -6, -5, -4, -10, -1, -2, -9, -1, 9, 0, 5, -3, 0, 8, 0, -12, 1, -12, -3, 5, -10, -5, -9, -10, 9, 2, 9, -4, -6, 9, -7, 10, -12, 10, -11, -7, 4, 
  23, 0, -42, 1, -1, 40, 68, 24, 26, -29, 20, -33, -7, 25, -19, 18, -28, -30, -3, 28, 47, 69, -10, 43, 45, -56, -3, -2, -14, -4, -49, -54, 5, 41, 49, 40, 15, 37, 2, 30, -58, 33, -29, -39, 45, 21, -5, -22, 33, 12, -29, -40, -113, -20, 34, -53, 7, 28, 58, -11, -34, 7, -18, -1, 0, 41, -43, 15, -15, 39, -23, 17, -17, -9, -24, 2, -35, -14, -24, 34, 46, -17, -6, -45, -33, -28, 37, -59, 32, -14, -12, 22, -15, 25, -18, 39, -21, 3, 46, 16, -27, 1, 
  -49, 7, 47, -7, -56, -21, -70, -26, -40, -16, -47, 41, 12, -9, 39, -38, 12, 33, -36, -11, -50, -53, 14, -29, -19, 52, 11, 8, -30, -3, 44, 36, -12, -52, -43, -29, -15, -37, -65, -32, 48, -27, 24, 19, -5, -13, 1, 44, -30, -48, 21, 17, 106, 28, -41, 51, -37, -30, -65, -33, 24, 4, 8, -27, 8, -23, 42, -39, 15, -9, 30, -31, 22, 26, 12, -47, 45, -4, 21, -14, -47, -26, -7, 48, 39, 31, -36, 63, -23, 21, -3, -13, 39, -35, 23, -38, 43, -51, -57, -39, 42, 6, 
  1, -70, -39, 16, 8, 21, -20, 41, 64, 27, 3, -1, 28, 19, -11, 44, 16, 20, 21, 19, 20, 20, -19, 46, -7, -13, -2, -23, 37, -11, -12, 10, 51, 7, -9, -35, 27, -54, -29, -3, 54, -17, 45, 68, -41, -13, -29, -18, 40, -2, 20, 5, 76, -40, 26, -1, 35, 18, -8, 10, -3, 29, 53, 70, -10, 34, 26, 34, -31, 18, 39, 10, -25, -5, 22, 54, 13, 51, 61, -36, -65, -6, 18, 47, -9, -38, -71, 29, -18, -14, -43, 45, -73, -26, -21, -53, -68, -51, -56, 33, -28, 48, 
  46, -29, -22, 28, 61, 6, -20, 41, 53, 48, 31, 10, 13, 17, 4, 37, 61, 40, 60, -20, 14, 11, -6, 48, -36, -1, 6, 0, 48, 8, -9, 26, 42, 19, -10, -22, 14, -40, 64, 17, 37, -10, 20, 47, -54, -8, 32, -11, 43, 45, 19, 55, 21, -24, 0, 7, 39, 6, -3, 40, 18, 21, 30, 69, -4, 26, 33, 37, -4, 24, 4, 40, 18, -23, 21, 74, -21, 55, 24, -14, -63, 34, 2, 33, 15, 2, -15, 27, 16, 9, 25, 46, -55, 7, -13, -1, -14, -3, 21, 56, -7, 23, 
  -25, -34, 11, 11, -26, 13, -10, 42, 50, -17, -25, -9, 46, 21, -30, 24, -31, -19, -6, 25, 17, 25, -51, 16, -1, -19, 8, -47, -8, 1, -4, -33, 27, -4, -9, -11, 25, -71, -68, -14, -4, -2, 45, 67, -33, -2, -52, -35, 35, -6, 17, -20, -62, -54, 21, -12, 22, 24, -11, -36, -26, 19, 43, 41, -7, 19, 47, 32, -13, 25, 53, -3, -8, 17, -7, 10, 11, 30, 63, -50, -60, -45, -1, 13, -65, -55, -46, -11, -18, -23, -56, 24, -41, -20, 5, -63, -55, -40, -32, 14, -73, 37, 
  72, -7, -36, 0, 91, 13, 37, 32, 51, 49, 67, -8, -9, -4, -21, 46, 52, 39, 86, 1, 57, 39, 17, 44, 9, -19, 1, 36, 56, 2, -37, 12, 22, 55, 33, 10, 3, 39, 88, 50, 8, 22, -23, 4, -14, 2, 36, -3, 51, 76, -9, 54, -16, -13, 10, -1, 54, 2, 46, 46, 11, 4, -5, 56, -10, 33, -7, 33, -3, 13, -25, 27, 7, -23, 26, 78, -8, 42, -10, 12, 40, 82, 24, 9, 6, -3, 49, -13, 47, 0, 61, 38, -50, 25, -16, 64, -18, 50, 68, 55, 14, 5, 
  43, 16, -25, 2, 59, -13, 23, 12, -6, 57, 34, -7, -21, -9, 5, 30, 51, 28, 48, -7, 32, 18, 13, 4, 4, 2, 1, 58, 36, -11, -27, 8, -17, 34, 33, 8, -1, 48, 74, 55, 5, 20, -42, -25, -1, -4, 36, 10, 0, 52, -1, 46, 16, -3, -29, 6, 40, -15, 31, 34, 24, -2, -27, 7, -11, -12, -27, -7, 18, -22, -32, 20, 9, -9, 33, 46, -7, 15, -22, 31, 55, 48, 3, 1, 27, 24, 44, 11, 39, 6, 44, -13, -7, 46, -7, 60, 18, 29, 47, 17, 28, -14, 
  32, 7, -27, 13, 47, -16, 30, 23, -21, 54, 31, 16, -38, -8, 18, 23, 57, 42, 68, -16, 20, -12, 28, 5, -12, -7, 4, 53, 30, -12, -20, 12, -5, 39, 29, 12, -2, 50, 68, 28, 22, 17, -37, -29, -7, -10, 44, -4, -14, 55, 9, 58, 30, 4, -13, 12, 35, -30, 19, 48, 33, -14, -33, 13, 6, -15, -9, 4, 12, -9, -27, 18, 11, -4, 37, 34, -14, 15, -2, 20, 44, 50, 16, 13, 24, 27, 32, 13, 26, 5, 51, -21, -18, 26, 0, 69, 10, 35, 41, 5, 24, -13, 
  31, -14, -29, 13, 39, 17, -20, 55, 65, 58, 17, -9, 11, 7, 5, 23, 41, 21, 28, -15, 2, 6, 4, 41, -44, -4, 14, -7, 26, 11, -23, 10, 42, 12, 1, -23, 32, -44, 35, 14, 32, -13, 30, 68, -68, 8, 14, 0, 51, 25, 30, 62, 37, -10, 12, 3, 30, 15, -12, 28, 27, 23, 18, 71, -6, 26, 56, 36, 6, 12, 23, 33, 25, -12, 11, 65, -20, 45, 44, 0, -50, 41, 12, 36, 10, -7, -22, 37, -12, 3, 22, 34, -39, -17, -14, -23, -8, -10, 9, 34, -3, 44, 
  50, -24, -23, 34, 28, 0, -14, 40, 67, 40, 20, 16, 24, 10, 15, 42, 41, 26, 35, -11, 10, 4, 6, 40, -30, 4, 8, -18, 42, -1, -13, 19, 29, 16, -21, -36, 12, -48, 44, 14, 24, -11, 21, 52, -82, 6, 17, -4, 55, 15, 17, 72, 47, -25, -3, -1, 51, -6, 3, 33, 20, 24, 37, 69, 10, 35, 48, 24, 17, 11, 28, 18, 23, -21, 12, 58, -27, 43, 37, 2, -46, 38, 15, 42, 19, 11, -7, 39, 8, 2, 10, 25, -43, 2, -12, -17, -14, 0, 17, 35, -12, 30, 
  -24, 36, 18, -19, -47, -1, 21, -26, -48, -32, -4, -5, -7, -1, -9, -29, -34, -31, -44, 17, -1, 8, -2, -26, 16, -6, 6, 9, -51, -2, 28, -35, -39, 4, 23, 13, -29, 34, -33, 10, -44, 4, -7, -38, 57, 15, -8, 10, -45, -29, -30, -70, -53, 28, 3, 6, -48, -2, 14, -26, -11, -11, -24, -66, -2, -20, -34, -17, 4, -18, -11, -21, -27, 25, -33, -44, 28, -54, -31, 27, 57, -28, 9, -25, -1, 4, 33, -44, 0, -19, 6, -23, 45, 8, 13, 22, 30, 4, 12, -42, 1, -38, 
  17, -28, 12, 15, 15, -30, -33, 7, -4, 38, 16, 11, -25, 7, 18, 25, 52, 42, 39, -9, -17, -36, 22, -7, -54, 10, 1, -1, 33, 0, 29, 32, 21, 11, -12, -31, 7, -29, 36, 3, 36, -16, 9, 21, -51, 3, 26, 16, 3, 8, 23, 58, 87, 6, -32, 35, 23, -29, -54, 29, 15, 16, 0, 22, -6, 7, 25, 10, -17, -3, -11, 10, 3, -5, 17, 29, 2, 57, 16, -1, -41, 37, -8, 45, 28, 22, -20, 53, -5, 4, 36, -23, -42, -12, -7, -46, 14, -18, -36, 10, 14, 16, 
  9, 30, -42, -21, -3, 22, 54, 3, -1, -25, 27, -41, -41, 1, -32, 12, -45, -47, -12, 20, 36, 31, -6, 21, 33, -40, -3, 23, -24, 2, -57, -54, -19, 27, 33, 30, 9, 50, 5, 50, -59, 33, -54, -73, 68, 39, -2, -25, 9, 6, -41, -71, -97, -6, 21, -71, -29, 32, 45, 3, -12, -6, -47, -53, 0, 17, -68, -7, 4, 22, -35, 9, -19, 9, -14, -36, -29, -59, -57, 43, 67, -19, -2, -75, -31, -10, 34, -72, 31, -13, -15, -15, -2, 9, -15, 57, 21, 27, 47, 19, -11, -47, 
  -2, 1, 9, 7, 7, 7, 5, 9, 3, 1, -9, 0, 3, 7, 5, 2, 6, 0, -6, -2, -5, 6, -7, -5, 8, -1, -8, 0, 6, 5, -10, -7, -7, 1, -5, -5, -13, -3, 8, -1, -12, -12, -1, -10, -7, 7, 7, -9, 4, 9, -7, 1, 8, -4, -4, -12, 0, -10, 8, -1, 8, -13, -3, -4, 9, -1, -7, 7, -6, 0, -9, 5, -12, -10, 0, -14, -3, -11, 4, 2, -10, 0, 3, 5, 3, -7, 1, 2, 7, -10, 0, -2, 0, -15, -4, 0, -9, -4, -9, -14, 6, -11, 
  20, -31, -53, 7, -11, 21, 34, 39, 42, -19, 3, -33, 18, 17, -17, 25, -46, -27, -8, 21, 42, 43, -36, 29, 21, -31, -9, -22, 29, 8, -56, -34, 11, 37, 17, -1, 33, -27, 21, 12, -43, 21, 10, 21, 9, 17, -6, -20, 29, 11, -10, -15, -110, -30, 43, -47, 15, 22, 40, -3, -18, 31, 41, 27, -1, 24, -29, 25, -12, 14, 23, 40, -22, -22, -26, 24, -23, 6, 0, -23, -1, -17, -11, -15, -44, -37, 4, -40, 18, -28, -49, 19, -40, 17, -21, -16, -36, -2, 34, 29, -29, 17, 
  54, -16, -12, 16, 57, -5, -13, 43, 33, 61, 35, 28, -2, 10, -10, 35, 54, 54, 46, -13, -1, 10, 17, 38, -32, -2, -1, 24, 43, 2, 1, 17, 15, 17, -3, -18, 9, -16, 68, 5, 24, -13, 13, 33, -73, -12, 40, -7, 23, 35, 11, 80, 46, -12, -24, 18, 34, -9, -26, 27, 26, -1, -7, 56, -4, 7, 49, 23, 7, 9, 3, 34, 29, -11, 30, 53, -12, 59, 13, -7, -55, 48, 6, 29, 10, 2, 6, 28, 0, 5, 32, 23, -25, 12, -1, 11, -10, 20, 17, 54, 12, 31, 
  -8, 11, -6, 9, 3, 2, -3, -2, -1, -7, 3, -4, -1, 5, 0, -3, -1, -14, -5, 5, 6, -14, 0, -5, 8, 14, 1, -13, -1, 1, 3, 3, -2, 9, 9, -10, 6, -1, -3, -3, 12, 5, -7, -6, 12, 6, 2, 1, 7, -15, -9, -9, -3, -10, -11, -4, -10, 7, -12, 8, -9, -1, 0, -4, 8, 2, -9, -8, 3, 5, 6, -5, -4, -8, -6, -4, -15, 7, -3, -3, 11, 7, -10, -1, 5, 3, 2, 13, -14, -2, -3, 0, 0, 10, 5, -2, -9, 4, -8, 9, -7, -5, 
  -23, 33, 36, -17, -22, -8, 37, -25, -57, -52, -7, -8, -5, 3, 6, -28, -19, -15, -27, 23, -7, 7, 12, -30, 30, 17, -9, 13, -36, -5, 37, -7, -40, -8, 24, 23, -16, 64, -12, 12, -42, 5, -27, -62, 50, 15, -5, 17, -30, -15, -18, -74, -63, 33, -15, 5, -37, -11, 12, -19, -2, -14, -25, -53, 9, -25, -35, -35, 21, -2, -23, -6, -6, 22, -24, -52, 17, -51, -47, 31, 62, -18, 17, -48, -4, 12, 46, -35, 19, -10, 20, -14, 48, 21, 10, 51, 57, 19, 32, -34, 24, -36, 
  20, -1, 0, 20, 31, -27, -18, -3, -19, 43, 14, 19, -18, -3, 8, 5, 73, 47, 56, -30, -16, -41, 19, -11, -24, 18, 20, 38, 37, -1, 1, 22, 9, 10, 11, -20, -1, 45, 52, 26, 19, -10, -36, -15, -46, -16, 28, -1, -19, 44, 16, 44, 65, 3, -19, 47, 21, -30, -23, 46, 25, -12, -25, 14, -9, -5, 24, -10, 7, -10, -42, 29, 11, -1, 30, 33, -2, 30, 7, 10, 5, 52, 6, 29, 44, 23, 8, 22, 14, 15, 49, -14, -1, 11, -2, 38, 22, 8, 7, 22, 36, 3, 
  -5, 1, -14, -8, 7, -5, 3, 2, 9, 6, -1, -1, -10, 5, 5, 8, -11, 0, -8, -10, 2, 1, -13, -5, -1, 9, -13, 3, 1, -1, -1, -12, -5, 5, 4, 9, -1, -4, -4, 12, 4, 9, 10, -1, -8, -10, 1, 6, -10, -6, 7, 6, 1, -14, 3, -8, -4, 5, -8, 11, 0, -2, 9, -6, -5, -3, -11, -5, -3, 7, 1, -10, 5, 0, 3, 0, 8, 7, -8, 5, 8, 2, 7, 4, -7, -4, -8, -10, 13, -12, -5, 4, 4, 0, -10, -12, -4, -1, -11, -6, -11, 6, 
  2, -3, -6, -3, 7, -2, -1, -6, 3, 2, 5, 13, 5, 10, -6, -5, 6, 3, 4, 7, -3, -14, 6, -1, -11, 7, -1, -8, -4, 4, 10, 6, -9, 9, -3, 7, 4, -3, -1, -9, -8, 4, 1, -9, -6, -1, -3, -6, -10, -12, 1, -13, -2, 6, 3, -3, -2, 9, -9, 4, 5, 1, -4, -11, -8, 6, -6, -3, -10, 1, -13, 7, -6, -14, 5, 3, -2, 5, 7, -9, -11, -13, -12, 2, 3, -5, 1, -12, 1, -8, -4, -8, 10, -11, 4, -8, 3, 1, -7, -4, -10, -3, 
  42, 29, -42, -10, 46, -8, 37, -3, -35, 39, 35, -11, -37, -13, 5, -2, 21, 23, 56, -13, 10, -7, 41, -7, 14, -4, 9, 65, 25, 8, -38, 9, -16, 45, 34, 32, -15, 85, 80, 42, -30, 14, -56, -54, 27, 13, 38, 3, -26, 53, -8, 23, 2, 16, -5, -10, -4, -11, 28, 66, 16, -23, -38, -34, -8, -8, -41, -22, 24, -12, -43, 17, -2, -9, 12, -10, -13, -4, -64, 34, 60, 43, 24, -22, 42, 39, 68, -23, 48, 7, 74, -34, 16, 55, -16, 77, 39, 44, 39, 4, 37, -48, 
  64, -30, -18, 26, 81, 17, 23, 51, 57, 61, 45, 9, -19, 3, -11, 45, 56, 43, 60, -10, 34, 35, 12, 53, -4, -15, -4, 20, 56, -4, -16, 25, 33, 45, 20, -8, 14, 16, 75, 34, 26, 15, -5, 4, -11, -2, 34, 2, 40, 65, 14, 68, 24, -31, 6, 8, 63, 4, 25, 46, 21, 14, 18, 56, 12, 32, 7, 43, -1, 10, -13, 35, 0, -28, 26, 78, -10, 70, -4, 13, 11, 65, 4, 13, 16, -8, 14, 4, 43, 2, 31, 29, -51, 29, -17, 43, -24, 16, 38, 61, 8, 15, 
  2, -11, -7, -5, -4, -4, -3, 2, -2, 5, 9, 2, -3, -10, -3, -1, 4, 12, 6, 7, -8, 2, -12, 0, -8, -8, -1, 9, 5, -1, 7, -10, 7, -6, 3, 2, -7, 6, -8, 6, -2, 10, -7, -1, -6, -9, 4, 1, -7, -4, -3, -5, -1, 2, 7, 4, -12, 10, 0, -8, 10, -10, 2, 3, 11, -5, 9, -11, -10, -6, -1, -7, 10, -13, -3, 8, -11, -9, -4, 0, 11, -9, 3, -10, -10, -7, -1, -10, -7, -2, 9, -4, -11, 8, -2, -11, -5, -5, -11, 2, -8, -2, 
  -16, 19, 20, -4, -12, -12, 39, -7, -2, -13, -15, 3, 0, -1, 18, -6, 1, 2, 6, 5, 21, -4, -12, 11, -6, 8, -5, 18, -12, 9, -1, 1, -15, 5, 9, 28, 4, 0, -2, -20, -10, 11, -20, -18, 28, 7, -14, 2, -2, 7, -9, -29, -15, 0, -7, 10, -2, -8, -1, 11, 0, -3, 8, -4, -9, -7, -33, -19, 22, 2, -13, 1, 2, -11, 2, -14, -5, -2, -10, -1, -9, 5, 12, -26, -9, -7, 30, -29, 9, -19, 8, -7, 16, -4, 10, -2, -8, -8, -26, 10, -8, 6, 
  -32, 45, 28, -18, -49, -15, 25, -38, -39, -39, -14, 17, 4, -8, 16, -28, -36, -31, -60, 21, -5, -8, 1, -42, 28, -4, 2, -6, -28, -3, 35, -20, -36, -6, 10, 13, -24, 23, -37, 1, -23, -9, 13, -26, 42, 3, -17, -1, -41, -34, -21, -59, -37, 25, -15, 3, -42, 0, -1, -40, -14, -2, -21, -63, -1, -23, -26, -36, 5, -4, 7, -33, -13, 40, -23, -51, 18, -59, -36, 16, 47, -49, -13, -31, 0, -7, 24, -28, -14, 5, 0, -15, 57, -8, 24, 20, 23, 5, -16, -40, 10, -37, 
  70, -7, -23, 13, 91, 23, 35, 48, 54, 62, 67, -16, -15, 2, -14, 59, 39, 32, 81, 3, 59, 37, -5, 56, -9, -11, -5, 23, 42, -8, -25, 4, 17, 54, 47, 11, 28, 26, 88, 53, 0, 19, -18, 2, -5, -4, 45, -6, 48, 68, 10, 46, -15, -26, 19, 4, 46, 2, 48, 54, -8, 4, -11, 46, -7, 28, -9, 45, -3, 25, -22, 36, -3, -20, 26, 90, -12, 58, -11, 7, 35, 74, 22, -4, 2, -5, 42, 4, 47, 9, 54, 32, -49, 37, -25, 56, -21, 38, 56, 56, 12, -2, 
  50, 27, -43, -2, 77, -21, 29, 2, -18, 67, 49, -7, -33, -16, 6, 29, 37, 26, 72, 4, 38, 1, 20, 14, 18, -7, 14, 44, 27, -8, -37, 25, -13, 35, 38, 22, -8, 79, 77, 55, -5, 20, -35, -56, 24, 21, 38, 9, -3, 51, -13, 24, -8, 9, -20, -17, 18, -17, 42, 62, 28, -8, -40, -26, 4, -19, -51, -7, 22, -20, -41, 43, 11, -12, 30, 25, -19, -2, -42, 46, 62, 61, 25, -25, 40, 36, 57, -9, 57, 10, 60, -26, -4, 62, -14, 94, 25, 63, 59, 16, 21, -42, 
  8, -42, -46, 9, -1, 9, 3, 34, 38, -7, -9, -32, 41, 17, -24, 18, -37, -40, -10, 18, 27, 27, -39, 35, 17, -35, 10, -48, 15, -4, -52, -25, 40, 12, 8, -6, 28, -69, -16, 5, 0, 11, 29, 42, -43, 12, -25, -17, 48, -18, 13, -4, -84, -36, 22, -53, 36, 42, 24, -10, -18, 21, 47, 52, -1, 25, 15, 33, -12, 33, 40, 15, -6, -12, 7, 22, -19, 19, 26, -27, -49, -13, -1, 14, -56, -39, -33, -16, 6, -24, -53, 28, -56, -22, -30, -53, -61, -32, -25, 34, -50, 26, 
  -12, 0, -5, 4, 9, -11, 9, 3, 3, 9, -7, -3, 9, 5, 4, -4, -9, 5, -3, -8, 3, -11, 1, 5, -3, -7, -11, -4, -7, -10, -11, 7, -6, -1, -6, -3, -12, 3, 7, 9, -12, 9, -7, -6, 3, 8, 6, 6, -3, -1, -9, -3, -6, -11, -2, -2, 9, -3, -9, -11, 7, -13, -3, 10, 2, -4, 7, -3, -1, -7, 5, -10, 6, 0, -11, 6, -10, 3, 0, 8, 5, -4, -14, 6, 6, -13, -10, 10, -4, 2, -3, -6, -10, -4, -2, 4, 2, -12, 1, -1, 5, 3, 
  -33, -3, 36, -3, -66, 22, -27, 3, 25, -62, -36, -7, 55, 31, -10, 3, -43, -27, -44, 34, 4, 8, -41, 21, 9, 12, 0, -44, -39, 7, 35, -20, 29, -30, -29, -6, 27, -77, -76, -34, -25, -3, 51, 46, -5, 26, -25, -16, 32, -38, 4, -49, -52, 7, 44, -12, -14, 39, 0, -49, -6, 11, 41, 25, 5, 29, 36, 23, 6, 23, 57, -20, 2, 26, -29, -37, 33, -5, 25, -21, -64, -51, -16, -5, -22, -53, -35, -10, -36, -36, -62, 30, 11, -40, 3, -78, -18, -35, -43, -4, -47, 37, 
  -7, 4, 56, 29, 7, -25, -58, -9, -27, 32, -4, 44, 33, -7, 26, -5, 42, 41, 24, -12, -59, -53, 27, -51, -48, 41, -2, -8, 5, -8, 62, 56, 11, -29, -42, -25, -3, -37, 17, -45, 51, -11, 40, 41, -55, -28, 13, 25, -12, -7, 25, 56, 113, 15, -38, 49, 27, -19, -51, 13, 26, 10, 12, 32, -10, -13, 58, 4, 20, -12, 22, -1, 23, 21, 35, 27, 40, 42, 27, -12, -44, 32, -6, 55, 40, 23, -33, 71, -21, 37, 23, -14, 19, -8, 21, -34, 21, -14, -24, -18, 14, 22, 
  -9, 2, 2, 0, -1, 1, 8, -10, 9, 1, -7, -3, 10, 3, -4, -1, 7, 6, 9, 9, 3, -3, 6, -11, -1, 0, -13, -12, -2, -9, -7, 2, 2, -4, 6, 4, 0, -11, 9, 5, -5, 8, 3, -13, 0, 10, 2, 4, -7, -13, 2, 4, -7, -7, -12, 0, 4, -7, 0, -3, -10, -2, 1, -3, -8, 0, 9, -5, -4, -1, -8, -5, 8, -10, 3, -4, -11, -4, -5, -10, 8, -4, 1, -7, 1, -10, -7, -13, 0, -1, -7, -3, 9, 1, -6, -10, -4, -12, -5, -6, -7, -5, 
};
const TfArray<2, int> tensor_dimension58 = { 2, { 128,102 } };
const TfArray<1, float> quant58_scale = { 1, { 0.01336505264043808, } };
const TfArray<1, int> quant58_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const ALIGN(16) int32_t tensor_data59[128] = { 33142, 36055, 4073, 15000, 18487, 16730, -6303, 26545, 12238, 14674, -3244, 17376, 18854, 16502, -5900, 33786, 30189, 12324, 28971, 12683, 23613, -5784, -7760, 6288, 4909, -5692, 6849, -8294, 18059, -7895, 9041, 27976, 37325, 12777, 28616, -5192, -9093, 8111, 35488, 15330, 18262, 16911, 8286, -6615, 36509, 16956, 38311, 38566, -4917, 16082, 21287, 14612, 12015, 19626, 6464, -1926, 5945, 38346, 7901, 4960, 11564, 13597, 35541, 13895, 9721, -4410, 1552, 22408, 30470, -2412, -6714, 18533, 12893, -5631, 24093, 29005, 11530, 29652, 24531, 3375, 5133, 11587, 31472, 12686, 39644, -4917, 16390, 12006, 9266, 26983, -8131, 1721, 2398, 24, -5560, 16364, 30524, 9571, -6584, 9311, 5635, 9672, 11352, -5579, -5968, 32393, 8744, 25452, -5280, 17215, -5280, -9873, 35539, 7657, -7848, -6344, 16962, 3228, -4916, -7064, 36949, 5042, 15338, 4650, -5664, 18616, 15441, -5832, };
const TfArray<1, int> tensor_dimension59 = { 1, { 128 } };
const TfArray<1, float> quant59_scale = { 1, { 4.7086255108297337e-06, } };
const TfArray<1, int> quant59_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const ALIGN(16) int8_t tensor_data60[4*128] = { 
  3, 52, 29, -66, -87, 1, -17, 39, -56, -52, -37, -66, -46, -83, 17, 21, 84, -48, 83, -66, 60, -24, -9, 35, -73, -24, 82, 19, -66, -16, 42, 73, 39, -31, 67, -59, 12, -38, 60, -86, -52, -86, -47, -48, 30, -77, 43, 66, 14, -86, -27, -36, 25, 10, -92, -22, 9, 50, -77, -91, 65, -17, 52, -95, 52, -31, -18, 60, 49, -46, -76, -80, 83, -2, 27, 82, -70, 49, 74, -78, -87, 75, 64, -61, 66, 17, -75, -20, -57, -16, -14, -59, -68, -72, -12, -83, 82, -25, -75, 12, -89, -61, -55, -35, -55, 48, -7, -38, 13, -78, -68, -21, 32, -2, -14, 14, -45, -73, -19, -25, 54, -69, -46, -56, 8, 41, 62, 16, 
  -65, -26, -48, 71, 43, 50, 1, -64, -51, -30, -52, 62, 69, 43, 15, -64, -41, -57, 28, -38, -71, -66, -4, 27, 27, 57, 73, -1, 62, 8, -10, 32, -62, -61, -46, 13, 15, -27, -51, 56, 41, 62, -58, 41, -61, 49, -63, -53, -17, 52, -50, 62, 59, -55, 53, 45, -8, -69, 8, 39, 59, 67, -69, 60, 55, -8, -48, -72, -63, 65, 66, 50, -62, 10, -48, -1, 63, -54, -74, 28, 39, 55, -51, 70, -65, -8, 62, -64, -55, -41, -1, 43, 48, 59, 15, 37, -75, 61, 23, 74, 14, -38, -53, 55, 61, -33, -53, 5, 3, 76, 2, -11, -57, -41, 18, -10, -62, 36, 11, -25, -49, 38, -37, 65, -8, 38, -45, -8, 
  61, 24, -64, 14, 26, 3, 18, -42, 46, 54, -43, 64, 43, 83, -16, 22, -56, 18, -37, 62, -38, -113, 12, -99, 16, -89, -97, 16, -18, 9, -95, -46, 49, 25, -1, -67, -24, 14, 18, -12, 55, 70, -13, -97, 10, 61, 40, 1, 16, 68, 60, 4, -113, 7, 5, -98, -75, -4, 40, -9, -94, -53, -57, 21, -59, -93, -35, -72, 13, -87, -70, 62, -65, 7, 16, -57, -72, -20, -72, -7, 24, -97, 1, -52, 8, 11, 17, 13, -1, 74, -3, -20, -11, -122, 0, 62, -62, -103, -57, -96, 11, 30, 24, -65, -77, 55, -98, 86, 1, 0, -51, 2, 53, 3, 4, 9, 35, 2, -19, 26, 33, 28, 50, -61, -23, -46, -82, -4, 
  -50, -48, 75, -68, -54, -70, -11, 34, 57, 43, 80, -50, -40, -51, -19, 14, -40, 39, -46, 48, -37, 127, -1, 68, 61, 81, -43, 1, -59, -7, 47, -58, -55, 45, -51, 58, -15, 61, -53, -54, -69, -55, 59, 64, 13, -67, -55, 9, 3, -65, 26, -71, 41, 56, 32, 75, 76, -26, 56, 27, -66, -52, -21, -33, -65, 77, 78, 36, 41, 64, 53, -41, -50, 5, 52, -56, -45, 30, 29, 40, 35, -56, -40, -34, -26, 13, -60, 67, 49, -50, -11, 66, 53, 46, -18, -75, 5, 28, 43, -42, 31, 44, 60, 70, 77, -40, 90, -55, 4, -61, 66, -10, -36, 71, -8, -15, 9, 59, -20, -27, -57, 48, 32, -31, -9, -65, 60, 1, 
};
const TfArray<2, int> tensor_dimension60 = { 2, { 4,128 } };
const TfArray<1, float> quant60_scale = { 1, { 0.0099242571741342545, } };
const TfArray<1, int> quant60_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const ALIGN(16) int32_t tensor_data61[4] = { 2589, -2156, 556, -2766, };
const TfArray<1, int> tensor_dimension61 = { 1, { 4 } };
const TfArray<1, float> quant61_scale = { 1, { 2.5905454094754532e-05, } };
const TfArray<1, int> quant61_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,99,40,1 } };
const TfArray<1, float> quant62_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant62_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,50,20,3 } };
const TfArray<1, float> quant63_scale = { 1, { 0.006901259534060955, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,50,20,3 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,50,20,6 } };
const TfArray<1, float> quant65_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant65_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,51,21,6 } };
const TfArray<1, float> quant66_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant66_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,25,10,6 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,25,10,12 } };
const TfArray<1, float> quant68_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,25,10,12 } };
const TfArray<1, float> quant69_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant69_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,25,10,12 } };
const TfArray<1, float> quant70_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<4, int> tensor_dimension71 = { 4, { 1,26,11,12 } };
const TfArray<1, float> quant71_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant71_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const TfArray<4, int> tensor_dimension72 = { 4, { 1,12,5,12 } };
const TfArray<1, float> quant72_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant72_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant72 = { (TfLiteFloatArray*)&quant72_scale, (TfLiteIntArray*)&quant72_zero, 0 };
const TfArray<4, int> tensor_dimension73 = { 4, { 1,12,5,25 } };
const TfArray<1, float> quant73_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant73_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant73 = { (TfLiteFloatArray*)&quant73_scale, (TfLiteIntArray*)&quant73_zero, 0 };
const TfArray<4, int> tensor_dimension74 = { 4, { 1,12,5,25 } };
const TfArray<1, float> quant74_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant74_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant74 = { (TfLiteFloatArray*)&quant74_scale, (TfLiteIntArray*)&quant74_zero, 0 };
const TfArray<4, int> tensor_dimension75 = { 4, { 1,12,5,25 } };
const TfArray<1, float> quant75_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant75_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant75 = { (TfLiteFloatArray*)&quant75_scale, (TfLiteIntArray*)&quant75_zero, 0 };
const TfArray<4, int> tensor_dimension76 = { 4, { 1,13,6,25 } };
const TfArray<1, float> quant76_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant76_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant76 = { (TfLiteFloatArray*)&quant76_scale, (TfLiteIntArray*)&quant76_zero, 0 };
const TfArray<4, int> tensor_dimension77 = { 4, { 1,6,2,25 } };
const TfArray<1, float> quant77_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant77_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant77 = { (TfLiteFloatArray*)&quant77_scale, (TfLiteIntArray*)&quant77_zero, 0 };
const TfArray<4, int> tensor_dimension78 = { 4, { 1,6,2,51 } };
const TfArray<1, float> quant78_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant78_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant78 = { (TfLiteFloatArray*)&quant78_scale, (TfLiteIntArray*)&quant78_zero, 0 };
const TfArray<4, int> tensor_dimension79 = { 4, { 1,6,2,51 } };
const TfArray<1, float> quant79_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant79_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant79 = { (TfLiteFloatArray*)&quant79_scale, (TfLiteIntArray*)&quant79_zero, 0 };
const TfArray<4, int> tensor_dimension80 = { 4, { 1,6,2,51 } };
const TfArray<1, float> quant80_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant80_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant80 = { (TfLiteFloatArray*)&quant80_scale, (TfLiteIntArray*)&quant80_zero, 0 };
const TfArray<4, int> tensor_dimension81 = { 4, { 1,6,2,51 } };
const TfArray<1, float> quant81_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant81_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant81 = { (TfLiteFloatArray*)&quant81_scale, (TfLiteIntArray*)&quant81_zero, 0 };
const TfArray<4, int> tensor_dimension82 = { 4, { 1,6,2,51 } };
const TfArray<1, float> quant82_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant82_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant82 = { (TfLiteFloatArray*)&quant82_scale, (TfLiteIntArray*)&quant82_zero, 0 };
const TfArray<4, int> tensor_dimension83 = { 4, { 1,6,2,51 } };
const TfArray<1, float> quant83_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant83_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant83 = { (TfLiteFloatArray*)&quant83_scale, (TfLiteIntArray*)&quant83_zero, 0 };
const TfArray<4, int> tensor_dimension84 = { 4, { 1,6,2,51 } };
const TfArray<1, float> quant84_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant84_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant84 = { (TfLiteFloatArray*)&quant84_scale, (TfLiteIntArray*)&quant84_zero, 0 };
const TfArray<4, int> tensor_dimension85 = { 4, { 1,6,2,51 } };
const TfArray<1, float> quant85_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant85_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant85 = { (TfLiteFloatArray*)&quant85_scale, (TfLiteIntArray*)&quant85_zero, 0 };
const TfArray<4, int> tensor_dimension86 = { 4, { 1,6,2,51 } };
const TfArray<1, float> quant86_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant86_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant86 = { (TfLiteFloatArray*)&quant86_scale, (TfLiteIntArray*)&quant86_zero, 0 };
const TfArray<4, int> tensor_dimension87 = { 4, { 1,6,2,51 } };
const TfArray<1, float> quant87_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant87_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant87 = { (TfLiteFloatArray*)&quant87_scale, (TfLiteIntArray*)&quant87_zero, 0 };
const TfArray<4, int> tensor_dimension88 = { 4, { 1,6,2,51 } };
const TfArray<1, float> quant88_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant88_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant88 = { (TfLiteFloatArray*)&quant88_scale, (TfLiteIntArray*)&quant88_zero, 0 };
const TfArray<4, int> tensor_dimension89 = { 4, { 1,7,3,51 } };
const TfArray<1, float> quant89_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant89_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant89 = { (TfLiteFloatArray*)&quant89_scale, (TfLiteIntArray*)&quant89_zero, 0 };
const TfArray<4, int> tensor_dimension90 = { 4, { 1,3,1,51 } };
const TfArray<1, float> quant90_scale = { 1, { 0.023354519158601761, } };
const TfArray<1, int> quant90_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant90 = { (TfLiteFloatArray*)&quant90_scale, (TfLiteIntArray*)&quant90_zero, 0 };
const TfArray<4, int> tensor_dimension91 = { 4, { 1,3,1,102 } };
const TfArray<1, float> quant91_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant91_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant91 = { (TfLiteFloatArray*)&quant91_scale, (TfLiteIntArray*)&quant91_zero, 0 };
const TfArray<4, int> tensor_dimension92 = { 4, { 1,3,1,102 } };
const TfArray<1, float> quant92_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant92_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant92 = { (TfLiteFloatArray*)&quant92_scale, (TfLiteIntArray*)&quant92_zero, 0 };
const TfArray<4, int> tensor_dimension93 = { 4, { 1,3,1,102 } };
const TfArray<1, float> quant93_scale = { 1, { 0.00085995782865211368, } };
const TfArray<1, int> quant93_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant93 = { (TfLiteFloatArray*)&quant93_scale, (TfLiteIntArray*)&quant93_zero, 0 };
const TfArray<2, int> tensor_dimension94 = { 2, { 1,102 } };
const TfArray<1, float> quant94_scale = { 1, { 0.00035230879439041018, } };
const TfArray<1, int> quant94_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant94 = { (TfLiteFloatArray*)&quant94_scale, (TfLiteIntArray*)&quant94_zero, 0 };
const TfArray<2, int> tensor_dimension95 = { 2, { 1,128 } };
const TfArray<1, float> quant95_scale = { 1, { 0.0026103167328983545, } };
const TfArray<1, int> quant95_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant95 = { (TfLiteFloatArray*)&quant95_scale, (TfLiteIntArray*)&quant95_zero, 0 };
const TfArray<2, int> tensor_dimension96 = { 2, { 1,4 } };
const TfArray<1, float> quant96_scale = { 1, { 0.091797210276126862, } };
const TfArray<1, int> quant96_zero = { 1, { -2 } };
const TfLiteAffineQuantization quant96 = { (TfLiteFloatArray*)&quant96_scale, (TfLiteIntArray*)&quant96_zero, 0 };
const TfArray<2, int> tensor_dimension97 = { 2, { 1,4 } };
const TfArray<1, float> quant97_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant97_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant97 = { (TfLiteFloatArray*)&quant97_scale, (TfLiteIntArray*)&quant97_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 62 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 62,4,5 } };
const TfArray<1, int> outputs1 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata2 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 63,6,7 } };
const TfArray<1, int> outputs2 = { 1, { 64 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 64,8,9 } };
const TfArray<1, int> outputs3 = { 1, { 65 } };
const TfArray<2, int> inputs4 = { 2, { 65,2 } };
const TfArray<1, int> outputs4 = { 1, { 66 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 66,10,11 } };
const TfArray<1, int> outputs5 = { 1, { 67 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 67,12,13 } };
const TfArray<1, int> outputs6 = { 1, { 68 } };
const TfLiteDepthwiseConvParams opdata7 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 68,14,15 } };
const TfArray<1, int> outputs7 = { 1, { 69 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 69,16,17 } };
const TfArray<1, int> outputs8 = { 1, { 70 } };
const TfArray<2, int> inputs9 = { 2, { 70,2 } };
const TfArray<1, int> outputs9 = { 1, { 71 } };
const TfLiteDepthwiseConvParams opdata10 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 71,18,19 } };
const TfArray<1, int> outputs10 = { 1, { 72 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 72,20,21 } };
const TfArray<1, int> outputs11 = { 1, { 73 } };
const TfLiteDepthwiseConvParams opdata12 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 73,22,23 } };
const TfArray<1, int> outputs12 = { 1, { 74 } };
const TfLiteConvParams opdata13 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 74,24,25 } };
const TfArray<1, int> outputs13 = { 1, { 75 } };
const TfArray<2, int> inputs14 = { 2, { 75,2 } };
const TfArray<1, int> outputs14 = { 1, { 76 } };
const TfLiteDepthwiseConvParams opdata15 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 76,26,27 } };
const TfArray<1, int> outputs15 = { 1, { 77 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 77,28,29 } };
const TfArray<1, int> outputs16 = { 1, { 78 } };
const TfLiteDepthwiseConvParams opdata17 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 78,30,31 } };
const TfArray<1, int> outputs17 = { 1, { 79 } };
const TfLiteConvParams opdata18 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 79,32,33 } };
const TfArray<1, int> outputs18 = { 1, { 80 } };
const TfLiteDepthwiseConvParams opdata19 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 80,34,35 } };
const TfArray<1, int> outputs19 = { 1, { 81 } };
const TfLiteConvParams opdata20 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 81,36,37 } };
const TfArray<1, int> outputs20 = { 1, { 82 } };
const TfLiteDepthwiseConvParams opdata21 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 82,38,39 } };
const TfArray<1, int> outputs21 = { 1, { 83 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 83,40,41 } };
const TfArray<1, int> outputs22 = { 1, { 84 } };
const TfLiteDepthwiseConvParams opdata23 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 84,42,43 } };
const TfArray<1, int> outputs23 = { 1, { 85 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 85,44,45 } };
const TfArray<1, int> outputs24 = { 1, { 86 } };
const TfLiteDepthwiseConvParams opdata25 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 86,46,47 } };
const TfArray<1, int> outputs25 = { 1, { 87 } };
const TfLiteConvParams opdata26 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs26 = { 3, { 87,48,49 } };
const TfArray<1, int> outputs26 = { 1, { 88 } };
const TfArray<2, int> inputs27 = { 2, { 88,2 } };
const TfArray<1, int> outputs27 = { 1, { 89 } };
const TfLiteDepthwiseConvParams opdata28 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs28 = { 3, { 89,50,51 } };
const TfArray<1, int> outputs28 = { 1, { 90 } };
const TfLiteConvParams opdata29 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs29 = { 3, { 90,52,53 } };
const TfArray<1, int> outputs29 = { 1, { 91 } };
const TfLiteDepthwiseConvParams opdata30 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs30 = { 3, { 91,54,55 } };
const TfArray<1, int> outputs30 = { 1, { 92 } };
const TfLiteConvParams opdata31 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs31 = { 3, { 92,56,57 } };
const TfArray<1, int> outputs31 = { 1, { 93 } };
const ALIGN(1) uint8_t opdata32[1] = { 0,  }; /* op type 40=MEAN */
const TfArray<2, int> inputs32 = { 2, { 93,3 } };
const TfArray<1, int> outputs32 = { 1, { 94 } };
const TfLiteFullyConnectedParams opdata33 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs33 = { 3, { 94,58,59 } };
const TfArray<1, int> outputs33 = { 1, { 95 } };
const TfLiteFullyConnectedParams opdata34 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs34 = { 3, { 95,60,61 } };
const TfArray<1, int> outputs34 = { 1, { 96 } };
const TfLiteSoftmaxParams opdata35 = { 1 };
const TfArray<1, int> inputs35 = { 1, { 96 } };
const TfArray<1, int> outputs35 = { 1, { 97 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3968, (TfLiteIntArray*)&tensor_dimension0, 3960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 27, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 27, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 18, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 24, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 54, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 24, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 48, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 108, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 48, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 48, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 108, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 48, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 300, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 100, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 225, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 100, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 625, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 100, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 225, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 100, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 1275, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 459, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 2601, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 459, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 2601, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 459, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 2601, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 459, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data44, (TfLiteIntArray*)&tensor_dimension44, 2601, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data45, (TfLiteIntArray*)&tensor_dimension45, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data46, (TfLiteIntArray*)&tensor_dimension46, 459, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data47, (TfLiteIntArray*)&tensor_dimension47, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data48, (TfLiteIntArray*)&tensor_dimension48, 2601, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data49, (TfLiteIntArray*)&tensor_dimension49, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data50, (TfLiteIntArray*)&tensor_dimension50, 459, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data51, (TfLiteIntArray*)&tensor_dimension51, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data52, (TfLiteIntArray*)&tensor_dimension52, 5202, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data53, (TfLiteIntArray*)&tensor_dimension53, 408, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data54, (TfLiteIntArray*)&tensor_dimension54, 918, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data55, (TfLiteIntArray*)&tensor_dimension55, 408, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data56, (TfLiteIntArray*)&tensor_dimension56, 10404, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data57, (TfLiteIntArray*)&tensor_dimension57, 408, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data58, (TfLiteIntArray*)&tensor_dimension58, 13056, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data59, (TfLiteIntArray*)&tensor_dimension59, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data60, (TfLiteIntArray*)&tensor_dimension60, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data61, (TfLiteIntArray*)&tensor_dimension61, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension62, 3960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3968, (TfLiteIntArray*)&tensor_dimension63, 3000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension64, 3000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6432, (TfLiteIntArray*)&tensor_dimension65, 6000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension66, 6426, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6432, (TfLiteIntArray*)&tensor_dimension67, 1500, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3008, (TfLiteIntArray*)&tensor_dimension68, 3000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension69, 3000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3440, (TfLiteIntArray*)&tensor_dimension70, 3000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension71, 3432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant71))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3440, (TfLiteIntArray*)&tensor_dimension72, 720, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant72))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1504, (TfLiteIntArray*)&tensor_dimension73, 1500, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant73))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension74, 1500, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant74))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1952, (TfLiteIntArray*)&tensor_dimension75, 1500, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant75))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension76, 1950, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant76))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2416, (TfLiteIntArray*)&tensor_dimension77, 300, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant77))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 928, (TfLiteIntArray*)&tensor_dimension78, 612, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant78))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1552, (TfLiteIntArray*)&tensor_dimension79, 612, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant79))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 928, (TfLiteIntArray*)&tensor_dimension80, 612, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant80))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1552, (TfLiteIntArray*)&tensor_dimension81, 612, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant81))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 928, (TfLiteIntArray*)&tensor_dimension82, 612, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant82))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1552, (TfLiteIntArray*)&tensor_dimension83, 612, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant83))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 928, (TfLiteIntArray*)&tensor_dimension84, 612, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant84))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1552, (TfLiteIntArray*)&tensor_dimension85, 612, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant85))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 928, (TfLiteIntArray*)&tensor_dimension86, 612, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant86))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1696, (TfLiteIntArray*)&tensor_dimension87, 612, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant87))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1072, (TfLiteIntArray*)&tensor_dimension88, 612, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant88))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension89, 1071, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant89))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2000, (TfLiteIntArray*)&tensor_dimension90, 153, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant90))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2160, (TfLiteIntArray*)&tensor_dimension91, 306, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant91))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1840, (TfLiteIntArray*)&tensor_dimension92, 306, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant92))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 416, (TfLiteIntArray*)&tensor_dimension93, 306, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant93))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 736, (TfLiteIntArray*)&tensor_dimension94, 102, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant94))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension95, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant95))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 128, (TfLiteIntArray*)&tensor_dimension96, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant96))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension97, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant97))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs27, (TfLiteIntArray*)&outputs27, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs28, (TfLiteIntArray*)&outputs28, const_cast<void*>(static_cast<const void*>(&opdata28)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs29, (TfLiteIntArray*)&outputs29, const_cast<void*>(static_cast<const void*>(&opdata29)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs30, (TfLiteIntArray*)&outputs30, const_cast<void*>(static_cast<const void*>(&opdata30)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs31, (TfLiteIntArray*)&outputs31, const_cast<void*>(static_cast<const void*>(&opdata31)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs32, (TfLiteIntArray*)&outputs32, const_cast<void*>(static_cast<const void*>(&opdata32)), OP_MEAN, },
  { (TfLiteIntArray*)&inputs33, (TfLiteIntArray*)&outputs33, const_cast<void*>(static_cast<const void*>(&opdata33)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs34, (TfLiteIntArray*)&outputs34, const_cast<void*>(static_cast<const void*>(&opdata34)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs35, (TfLiteIntArray*)&outputs35, const_cast<void*>(static_cast<const void*>(&opdata35)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(size_t i, TfLiteEvalTensor *tensor) {
  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors_size = 98;
  for (size_t i = 0; i < 98; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_MEAN] = Register_MEAN();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 36; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 36; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus trained_model_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  97, 
};
TfLiteStatus trained_model_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 36; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
